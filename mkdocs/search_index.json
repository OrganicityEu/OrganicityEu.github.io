{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the \nOrganicity\n technical documentation. This web site will provide you detailed information about the services and tools provided by the Organicity EaaS (Experimentation as a Service) facility.\n\n\nOverview of the technical environment\n\n\nArchitecture\n\n\nAs it can be seen in the following figure, three different tiers can be distinguished within the OC facility architecture:\n\n\n\n\nFigure 1.\n OrganiCity facility high level architecture\n\n\n\n\nOC Experimentation tier\n The OrganiCity Experimentation tier consists of various components (APIs, services and tools) that enable and facilitate building applications and services for experimenters. If you are an experimenter, you will interact with Organicity through the APIs, services and tools of this layer.\n\n\nOC Platform tier\n It embraces the core of the technical facility. Among others, this layer implements data storage, accounting and security. Besides, this layer interacts with the other through APIs.\n\n\nOC Site tier\n It consists of a number of distributed storing entities, the so called OC sites. Among these sites, we can differentiate sites that belong to the Organicity infraestructure (providers and experimenters), and those provided by cities federating data into Organicity. If you are an experimenter, the interaction with the sites will to totally transparent, so that you will only rely on the components at the experimentation tier. If you want to become a new Organcity, this is the entry point for your federation, as will be commented later\n\n\n\n\nAccounts and registration\n\n\nTo ensure that all interactions with and within the facility are authenticated with valid user credentials and access rights, Authentication, Authorization and Accounting (AAA) mechanisms have been implemented. Users will be enforced to use their own credentials to interact with the different APIs, services and tools. To start experimenting on top of the OC facility, the experimenters are encouraged to register themselves in the platform.\n\n\n\n\nRegister\n\n\n  \n\n\nOnce experimenters get registered within the platform, they will be assigned with the OC user role. The OC facility managers will assign the experimenters the OC experimenter role upon the acceptation of the corresponding request. To this end, you should send an email to \nhelpdesk@organicity.eu\n, indicating the mail that you have been registered with and the experiment that you belong to. \n\n\nLikewise, if you are federating a new Organicity (namely a new OC site), you will also have to contact the OC facility managers to obtanin permissions to manage your site. Again, you should send an email to \nhelpdesk@organicity.eu\n, indicating the mail that you have been registered with and the OC site you are federating. \n\n\nAPIs\n\n\nIn general, the interaction with the whole technical environment is performed by using the a number of APIs aiming different purposes.\n\n\n\n\nAsset Discovery\n It facilitates exploration and inspection of available assets. In order to use this API and integrate it in your applications, take a look to the \nAsset Discovery API\n and the \nAsset Discovery Service\n.\n\n\nAsset Annotation\n  As you create assets, you might want to annotate them with meaningful tags. The \nAnnotaions API\n will allow you to do so.\n\n\nPermissions\n As mentioned before, the interactions with Organicity are required to be safe. Use the \nPermissions API\n in you applications and devices to interact with Organicity in a safe way. \n\n\nDatasource\n While experimenting you can require that Organicity stores some of the information you are generating to et historical values of it, send en email to \nhelpdesk@organicity.eu\n for more information. Once the data is recorded, you can use the \nDatasource API\n to retrieve it.\n\n\n\n\nIn general the interaction with the different APIs will require authentication, what is perfomed by sending appropriate access tokens. Under the \nTutorials\n tab you will find insightful explanations about how to obtain and work with these tokens: \nHow To Access Token\n, \nHow To Refresh A Token\n and \nHow To Authenticate A User\n.\n\n\nIn order to test the different APIs, you may find the \nTester API Application\n useful.\n\n\nServices\n\n\nLiving on top of the APIs, a number of services will help you during your interaction with the facility, either if you are an experimenter or manager of an Organicity. You can find them under the \nServices\n tab:\n\n\n\n\nUrban Data Observatory - UDO\n The UDO provides a UI that allows experimeters and users in general to develop a deeper understanding of the federated city data sources that can be used in your experiments. It makes use of the \nAsset Discovery API\n enabling graphical search and exploration. Go to the \nUrban Data Observatory\n to see what it offers.\n\n\n\n\nData Annotation services\n These services simplify the process of creating meaningful knowledge from urban data assets by annotating them. Find more about \nAsset Annotations\n in the \nServices\n tabs. Besides you may find practice information about how to use it in the \nTutorials\n: \nHow To Create Annotation Tags\n, \nHow To Annotate An Assets\n and \nHow To Annotate An Asset Using Machine Larning\n\n\n\n\n\n\nExperimenter Portal\n It is the entry to start the experimentation. From this portal, experimenters will be able to manage their experiments and to start interacting with other services. Go to the \nExperimenter Portal\n to see more.\n\n\n\n\n\n\nCommunity Management\n This potal will allow to find people within the Organicity community according to their preferences and characteristics. Then you will be able to contact them to participate in your experiments, find in the \nCommunity Management\n more information and how it interacts with the \nExperimenter Portal\n.\n\n\n\n\n\n\nFacility Manager\n Through this portal you will be able to manage advances features of the Organicity facility. It is not intended for experimenters, but if you are managing a new city, you will need the \nFacility Manager\n\n\n\n\n\n\nTools\n\n\nOrganicity tools are a set of developments aiming to cover experimentation needs from different perspectives. In this sense, while the Organicity facility is aiming general purpose, the tools are devoted to rather specific needs. You can find them under \nTools\n tab:\n\n\n\n\nScenarios\n This portal allows citizens to create, discuss and evaluate solutions for the city. \nSee more...\n      \n\n\nTSmarT\n It is a modular wireless communications platform designed to facilitate the development and implementation of M2M, monitoring and remote control applications in different markets. TSmarT devices are integrated with OrganiCity facility and therefore able to feed data to the OC platform, connecting them to the OC experimenters site. \nSee more...\n\n\nTinkerSpace\n Toolkit for creating mobile services - Apps - without the need for extensive software training or experience. Tinkerspace builds on the idea of Component-based software engineering and Visual programming, with LEGO\u2122 as an inspiration \u2013 it should be as easy to build a mobile app as to build a LEGO\u2122 model. \nSee more...\n\n\nSmartphone experimentation framework\n It is a complementary framework that facilitates experimenter to gather and process data from the sensors and communication interfaces of the smartphones of volunteers and use them to run experiments. \nSee more...\n\n\nSensiNact\n aims at helping coders working with data streams from deployed data assets without the need to learn about the Organicity APIs. By using \nit, experimenters can interact with information of different data assets available in\n the different clusters, as well as within the scope of their experiments, and understand the data streams that they provide. The SensiNact IDE allows the creation of applications using a scripting tool (with Code Assist functionality). \nSee more...\n\n\nWeb socket processing library\n This library enables experimenters who have skills in the Processing programming language to easily connect to data streams from IoT devices in the OrganiCity facility. They may then actuate events in real-time as part of their Processing sketches. \nSee more...\n\n\n\n\nData assets\n\n\nUrban data, embracing from IoT devices to social events, are modeled inside Organicity as assets. In order to cover a large range of different urban data, OC assets are defined in a generic way following NGSI9/10 specification. Either if you are an experiment or want to federate data into he facility as a new Organicity, you will have to model your resources as assets. \nHere\n you will find a thorough description of the data model along with meaningful examples that will help you to model your data.\n\n\nCurrently there are federated assets from the city sites: Aarhus (Denmark), London (UK) and Santander (Spain) ( \nMore details\n)\n\n\nIf you are an experimenter, you will have to knwo how to manage your assets. Go to the \nTutorials\n to learn: \nHow To Push An Asset To The Experimenters Site\n and \nHow To Update And Delete An Asset\n.\n\n\nIf you are managing a new city the tutorial \nHow To Oc Site\n explains the steps to get your data federated into Organicity.\n\n\nExperimentation overview\n\n\nIn order to avoid getting lost among the different APIs, services and tools, here we present minimal guidelines to follow to start the experiment: \n\n\n\n\nGo to the \nExperimenter Portal\n and create one experiment and one applications as indicated in the documentation. As you will see, the portal offers more functionalities and interactions with other services, we encourage you to check them.\n\n\nOnce you have an experiment, it is time to generate urban data by creating assets. This can be done directly through the portal in a graphical way, but in general you will prefer to do it programatically. To do so, go to \nHow To Push An Asset To The Experimenter Site\n and follow the instrauctions therein. If properly generated, you will be able to see your assets in the \nUrban Data Observatory\n\n\nDuring your experiment your applications may require retrieving data assets, either created by your experiment of other urban data available. Use the \nAsset Discovery API\n and the \nAsset Discovery Service\n to build your application. \n\n\nBesides, you can enrich the information of your assets by using the \nAnnotation Service\n or modify your assets as described in \nHow To Update And Delete An Asset\n\n\n\n\nApart from these steps, you can find much more in the \nTutorials\n and use the \nTools\n for tailored solutions. \n\n\nNew Organicities (OC sites)\n\n\nIf you are going to federate a new OC site, you should follow the intructions provided in \nHow To Oc Site\n. It is worth highlighting that you need to host a server (your OC site) that will feed data into the Organicity facility core.\n\n\nSite managers will be given special rights to manage their sites and data for different urban services within their sites. This will be done through the \nFacility Manager\n.\n\n\nSupport\n\n\nFor resolving technical questions, reporting specific issues/bugs and discussion possible extensions in the APIs, services and tools of Organicity, you have different alternatives: \n\n\n\n\nGeneric questions\n. Use the \nPublic Forum\n for generic questions.\n\n\nGeneric issues\n. If you find a generic issue, you can report it and keep track at \norganicityeu.github.io/issues\n\n\nSpecific issues related to a particular tool\n. Browse the various repositories at \nhttps://github.com/OrganicityEu/\n and then report the issue in the proper one.",
            "title": "Home"
        },
        {
            "location": "/#overview-of-the-technical-environment",
            "text": "",
            "title": "Overview of the technical environment"
        },
        {
            "location": "/#architecture",
            "text": "As it can be seen in the following figure, three different tiers can be distinguished within the OC facility architecture:   Figure 1.  OrganiCity facility high level architecture   OC Experimentation tier  The OrganiCity Experimentation tier consists of various components (APIs, services and tools) that enable and facilitate building applications and services for experimenters. If you are an experimenter, you will interact with Organicity through the APIs, services and tools of this layer.  OC Platform tier  It embraces the core of the technical facility. Among others, this layer implements data storage, accounting and security. Besides, this layer interacts with the other through APIs.  OC Site tier  It consists of a number of distributed storing entities, the so called OC sites. Among these sites, we can differentiate sites that belong to the Organicity infraestructure (providers and experimenters), and those provided by cities federating data into Organicity. If you are an experimenter, the interaction with the sites will to totally transparent, so that you will only rely on the components at the experimentation tier. If you want to become a new Organcity, this is the entry point for your federation, as will be commented later",
            "title": "Architecture"
        },
        {
            "location": "/#accounts-and-registration",
            "text": "To ensure that all interactions with and within the facility are authenticated with valid user credentials and access rights, Authentication, Authorization and Accounting (AAA) mechanisms have been implemented. Users will be enforced to use their own credentials to interact with the different APIs, services and tools. To start experimenting on top of the OC facility, the experimenters are encouraged to register themselves in the platform.   Register      Once experimenters get registered within the platform, they will be assigned with the OC user role. The OC facility managers will assign the experimenters the OC experimenter role upon the acceptation of the corresponding request. To this end, you should send an email to  helpdesk@organicity.eu , indicating the mail that you have been registered with and the experiment that you belong to.   Likewise, if you are federating a new Organicity (namely a new OC site), you will also have to contact the OC facility managers to obtanin permissions to manage your site. Again, you should send an email to  helpdesk@organicity.eu , indicating the mail that you have been registered with and the OC site you are federating.",
            "title": "Accounts and registration"
        },
        {
            "location": "/#apis",
            "text": "In general, the interaction with the whole technical environment is performed by using the a number of APIs aiming different purposes.   Asset Discovery  It facilitates exploration and inspection of available assets. In order to use this API and integrate it in your applications, take a look to the  Asset Discovery API  and the  Asset Discovery Service .  Asset Annotation   As you create assets, you might want to annotate them with meaningful tags. The  Annotaions API  will allow you to do so.  Permissions  As mentioned before, the interactions with Organicity are required to be safe. Use the  Permissions API  in you applications and devices to interact with Organicity in a safe way.   Datasource  While experimenting you can require that Organicity stores some of the information you are generating to et historical values of it, send en email to  helpdesk@organicity.eu  for more information. Once the data is recorded, you can use the  Datasource API  to retrieve it.   In general the interaction with the different APIs will require authentication, what is perfomed by sending appropriate access tokens. Under the  Tutorials  tab you will find insightful explanations about how to obtain and work with these tokens:  How To Access Token ,  How To Refresh A Token  and  How To Authenticate A User .  In order to test the different APIs, you may find the  Tester API Application  useful.",
            "title": "APIs"
        },
        {
            "location": "/#services",
            "text": "Living on top of the APIs, a number of services will help you during your interaction with the facility, either if you are an experimenter or manager of an Organicity. You can find them under the  Services  tab:   Urban Data Observatory - UDO  The UDO provides a UI that allows experimeters and users in general to develop a deeper understanding of the federated city data sources that can be used in your experiments. It makes use of the  Asset Discovery API  enabling graphical search and exploration. Go to the  Urban Data Observatory  to see what it offers.   Data Annotation services  These services simplify the process of creating meaningful knowledge from urban data assets by annotating them. Find more about  Asset Annotations  in the  Services  tabs. Besides you may find practice information about how to use it in the  Tutorials :  How To Create Annotation Tags ,  How To Annotate An Assets  and  How To Annotate An Asset Using Machine Larning    Experimenter Portal  It is the entry to start the experimentation. From this portal, experimenters will be able to manage their experiments and to start interacting with other services. Go to the  Experimenter Portal  to see more.    Community Management  This potal will allow to find people within the Organicity community according to their preferences and characteristics. Then you will be able to contact them to participate in your experiments, find in the  Community Management  more information and how it interacts with the  Experimenter Portal .    Facility Manager  Through this portal you will be able to manage advances features of the Organicity facility. It is not intended for experimenters, but if you are managing a new city, you will need the  Facility Manager",
            "title": "Services"
        },
        {
            "location": "/#tools",
            "text": "Organicity tools are a set of developments aiming to cover experimentation needs from different perspectives. In this sense, while the Organicity facility is aiming general purpose, the tools are devoted to rather specific needs. You can find them under  Tools  tab:   Scenarios  This portal allows citizens to create, discuss and evaluate solutions for the city.  See more...         TSmarT  It is a modular wireless communications platform designed to facilitate the development and implementation of M2M, monitoring and remote control applications in different markets. TSmarT devices are integrated with OrganiCity facility and therefore able to feed data to the OC platform, connecting them to the OC experimenters site.  See more...  TinkerSpace  Toolkit for creating mobile services - Apps - without the need for extensive software training or experience. Tinkerspace builds on the idea of Component-based software engineering and Visual programming, with LEGO\u2122 as an inspiration \u2013 it should be as easy to build a mobile app as to build a LEGO\u2122 model.  See more...  Smartphone experimentation framework  It is a complementary framework that facilitates experimenter to gather and process data from the sensors and communication interfaces of the smartphones of volunteers and use them to run experiments.  See more...  SensiNact  aims at helping coders working with data streams from deployed data assets without the need to learn about the Organicity APIs. By using  it, experimenters can interact with information of different data assets available in  the different clusters, as well as within the scope of their experiments, and understand the data streams that they provide. The SensiNact IDE allows the creation of applications using a scripting tool (with Code Assist functionality).  See more...  Web socket processing library  This library enables experimenters who have skills in the Processing programming language to easily connect to data streams from IoT devices in the OrganiCity facility. They may then actuate events in real-time as part of their Processing sketches.  See more...",
            "title": "Tools"
        },
        {
            "location": "/#data-assets",
            "text": "Urban data, embracing from IoT devices to social events, are modeled inside Organicity as assets. In order to cover a large range of different urban data, OC assets are defined in a generic way following NGSI9/10 specification. Either if you are an experiment or want to federate data into he facility as a new Organicity, you will have to model your resources as assets.  Here  you will find a thorough description of the data model along with meaningful examples that will help you to model your data.  Currently there are federated assets from the city sites: Aarhus (Denmark), London (UK) and Santander (Spain) (  More details )  If you are an experimenter, you will have to knwo how to manage your assets. Go to the  Tutorials  to learn:  How To Push An Asset To The Experimenters Site  and  How To Update And Delete An Asset .  If you are managing a new city the tutorial  How To Oc Site  explains the steps to get your data federated into Organicity.",
            "title": "Data assets"
        },
        {
            "location": "/#experimentation-overview",
            "text": "In order to avoid getting lost among the different APIs, services and tools, here we present minimal guidelines to follow to start the experiment:    Go to the  Experimenter Portal  and create one experiment and one applications as indicated in the documentation. As you will see, the portal offers more functionalities and interactions with other services, we encourage you to check them.  Once you have an experiment, it is time to generate urban data by creating assets. This can be done directly through the portal in a graphical way, but in general you will prefer to do it programatically. To do so, go to  How To Push An Asset To The Experimenter Site  and follow the instrauctions therein. If properly generated, you will be able to see your assets in the  Urban Data Observatory  During your experiment your applications may require retrieving data assets, either created by your experiment of other urban data available. Use the  Asset Discovery API  and the  Asset Discovery Service  to build your application.   Besides, you can enrich the information of your assets by using the  Annotation Service  or modify your assets as described in  How To Update And Delete An Asset   Apart from these steps, you can find much more in the  Tutorials  and use the  Tools  for tailored solutions.",
            "title": "Experimentation overview"
        },
        {
            "location": "/#new-organicities-oc-sites",
            "text": "If you are going to federate a new OC site, you should follow the intructions provided in  How To Oc Site . It is worth highlighting that you need to host a server (your OC site) that will feed data into the Organicity facility core.  Site managers will be given special rights to manage their sites and data for different urban services within their sites. This will be done through the  Facility Manager .",
            "title": "New Organicities (OC sites)"
        },
        {
            "location": "/#support",
            "text": "For resolving technical questions, reporting specific issues/bugs and discussion possible extensions in the APIs, services and tools of Organicity, you have different alternatives:    Generic questions . Use the  Public Forum  for generic questions.  Generic issues . If you find a generic issue, you can report it and keep track at  organicityeu.github.io/issues  Specific issues related to a particular tool . Browse the various repositories at  https://github.com/OrganicityEu/  and then report the issue in the proper one.",
            "title": "Support"
        },
        {
            "location": "/AssetDataModel/",
            "text": "Asset Data Model\n\n\nFor the organization and discovery of data sources, Organicity platform is relying on the \nNGSI9/10\n information model. As depicted in the following diagram, the underlying data model of NGSI\n9/10 consists of Asset Element, Asset Attributes and Attribute Metadata\n\n\n\n\nAn asset is associated with multiple attributes and each attribute can be associated with various\nmetadata. Each one of the Organicity Sites and probably Organicity Experiments are contributing assets into\nthe facility. Assets can represent various types of urban resources from\nIoT/sensor devices with sensors attached, smartphones, services, data sources stored as data\nfiles (csv, xml, pdf) shared online or references to data\u00adendpoints online (third party APIs and\ndata services). For purposes of clarity of how the data of the various assets can be accessed the\nOrganicity indexed assets can be organized in three major categories:\n\n\n\n\nOC raw assets\n: for this type of assets clients of OC platform can retrieve either their last\nvalue or historic values. In general it is possible to post various queries for retrieving data\nof the assets. The execution of the queries is managed by the OC facility and the OC\nSite where this asset belongs to.\n\n\nOC dataset assets\n: \u200b these assets are representing data sources encoded in datafiles\nthat are shared online (e.g., CKAN instances where the data sources are exposed as\nfiles csv, xml, xls, pdf etc.). Organicity clients can discover these assets by posting discovery\nqueries on the OC platform based on their various metadata. The  platform just\ndelivers description of the assets. Organicity clients have to access the online urls to fetch the\nfiles and then further process the dataset files to consume the data.\n\n\nOC online data\u00adendpoint assets\n: \u200b these assets are representing  online\ndata\u00adendpoints/APIs for which the actual data access is not managed by the OC facility.\nOC clients can discover these assets by posting discovery queries on OC platform based\non their various metadata. The Organicity platform just delivers description of the assets. OC\nclients have to access the online endpoints in order to post queries and consume the\ndata.\n\n\n\n\nIn order to avoid conflicts with the identification of the assets and facilitating interaction with the\nentity information to the experimenters, there are specific conventions that should be followed on\nAsset, Attribute and Metadata definition.\n\n\nAsset Attributes and Metadata:\n\n\nEach Asset Element has to be associated with a set of of attributes. Each Asset Attribute\nmight represent various parameters of the asset. In the case of an IoT device or a\nsmartphone it might represent a sensing or actuation capability of the device or a device\ncharacteristic (static or not) like the human readable name of the device, its description,\nits location and so on. In the case of more abstract assets attributes might represent\ntypes of observations not produced by physical sensors (e.g., a bus reporting the number\nof available seats or the number of the route). Each attribute consists of a type shared\namongst all Organicity sites, the actual value of the attribute and a list of metadata that describe\nthe value.\n\n\nBy utilizing the proper attributes for the description of Assets various visualization and\nbrowsing options are made available through the Urban Data Observatory and the rest of the Organicity tools\nincluding:\n- GeoJson data browsing for attributes of assets referring to specific territories\n- Time\u00adseries data browsing for attributes of assets with historical data\n- combinations of the above cases\n\n\nEach Metadata entry represents more characteristics of an attribute, like units of\nmeasurement and data types of the attribute value etc.\n\n\nCommon attribute types (e.g., observation types) should be described with same format\nby the Organicity sites and values should be represented at the same set of units (e.g., distance\nin meters and temperature in degrees Centigrade).\n\n\nDuring the federation of various assets from the Organicity City Sites (Aarhus, London, Santader) a list\nof common urn names for Asset Types, Attribute Types and Metadata has been created (Get \nXLS\n file).\nIt is recommended to use the available names when you are creating your assets.\n\n\nTypes and Identification of Assets\n\n\nEach entity should have an unique identifier in the form of \n\nurn:oc:entity:[site]:[service]:[provider]:[group]:[entityName]\n \nwhere:\n\n\n\n\n\n\nurn:oc:entity:[site]:[service]:[provider]:[group]:[entityName]\n \u200b should be\nunique across the whole Organicity facility.\n\n\n\n\n\n\n[site]\n is representing the federated Organicity site (e.g., London, Santader, Aarhus, Experimenters etc.). During the creation of your experiment you are going\n to aquire the proper prefixes for your assets.\n\n\n\n\n\n\n[service]\n \u200b is representing a smart city service/application domain for example\nparking, garbage, environmental etc.\n\n\n\n\n\n\n[provider]\n is the logic separator for which service the asset belongs to. For\nexample, in a city, the bus company and waste management company can use\ncommon names for different assets, as they use to work in separate silos. In\norder to avoid that, the [\u200b provider] name allows us to avoid the duplication of\nentityNames\u200b within the OC infrastructure for a particular site.\n\n\n\n\n\n\n[group]\n: This could be optional. \u200b The group part can be used for grouping\nassets under the same service and provider. It is responsibility of OS sites to\nmaintain proper group keys.\n\n\n\n\n\n\n[entityName]\n: \u200b The Entity\u200b /\u200b Device identifier which should be unique at the\ncorresponding Organicity Site, service and provider. The same applies at the scope of an experiment.\n\n\n\n\n\n\nAssets could represent devices, places, buildings, and many other entities (including virtual\nobjects). In Organicity, we define a set of OC Entity Types that can be extended in the future to\ninclude more complex installations. Each entity has a specific resource type in the form\nof \u200b \nurn:oc:entityType:[Type]:[Name]\u200b\n where:\n\n\n\n\n\n\n[Type]\n \u200b could express the context type of the context representation of the asset\nfor example IoT device, smartphone, bicycle\u00adstation, weather\u00adstation etc.\n\n\n\n\n\n\n[Name]\n \u200b is optional and can express some specialization of the used type. E.g. ...:iotdevice:noise\n\n\n\n\n\n\nSee \nXLS\n for a recommendation list of asset types.\n\n\nExamples of assets ids and types:\n\n\n\"contextElement\": {\n  \"id\": \"\u200burn:oc:entity:london:environmental:hydePark:weatherstation123\u200b\",\n  \"type\": \"\u200burn:oc:entityType:weatherstation\",\n  \"attributes\": [ \u2026 ]\n} \"\n\n\n\n\ncontextElement\": {\n  \"id\": \"\u200burn:oc:entity:experimenters:86d7edce-5092-44c0-bed8-da4beaa3fbc6:57eab2c2ad0302ad0b5c92c6:asset1243\u200b\",\n  \"type\": \"\u200burn:oc:entityType:smartphone\u200b\",\n  \"isPattern\": \"false\",\n  \"attributes\": [ \u2026 ]\n}\n\n\n\n\nAsset Attributes\n\n\nAsset attributes can represent either various urban observations or other things like properties of the asset creating the observations.\nAttributes can  have a name, a type and a value (\n\u200b \n). Each attribute might represent:\n - in the case of an IoT device or a smartphone:\n    - a \u200b capability \u200b of the device (sensing or actuation)\n    - a \u200b device attribute\u200b like:\n        - description of device\n        - location of the device\n    - Management info:\n        - hardware/software characteristics\n        - communication interfaces,\n        - latest activity\n        - etc.\n -  in the case of more abstract resources like a bicycle docking station or bus station and\n so on, attributes might represent another type of observation like\n    - number of available bicycles or\n    - delay of the next bus\n    - etc.\n - in the case of of a CKAN resource shared online as a file the attributes encode metadata\n like:\n    - the creator of the file\n    - last update\n    - the file type: csv,xml, xls, pdf.\n    - the url to download the file\n    - etc.\n- in the case of of an online web service sharing data attributes might represent\n    - the url to query the web service\n    - the url to retrieve documentation\n    - the type of the web service (REST, SOAP)\n    - etc.\n\n\nAttribute names\n\u200b \u200b might be a human readable strings.\n\n\nAttribute types\n should follow the format: \u200b\n\n\nurn:oc:attributeType:[type]\u200b\n\n\n\n\nThe type should encode the type of observation shared in Organicity. Its quite important to describe only the type of observation that is\nrepresented and not other details  (like the period of observation, the method of observation etc.) in order to facilitate the discovery process and the joining of\ninformation. For example is the attribute expressed the speed of vehicles its recommended to use urn:oc:attributeType:speed and then express in metadata level if the speed is per hour or per minute etc.\n\n\nAttribute MetaData:\n Some of the aforementioned attribute types might require a specific set of\nmetadata like: Attribute types for sensor measurements require a datatype metadata or Attribute\ntypes for sensor measurements require an unit of measurement metadata. Each Metadata\nrepresents various characteristics of the associated attribute of the asset. Some examples might\nbe:\n- device\u200b description \u200b metadata e.g., other languages\n- device\u200b location \u200b metadata other representation of location like geohashing\n- sensing \u200b metadata: timestamp of the latest value, url of endpoint to retrieve historical\ndata of this device/sensor, description of sensor type, units of measurement and so on.\n- actuation \u200b metadata: url of endpoint to trigger actuation, description of actuation, tbd\u2026\n- other type of metadata\n\n\nExamples of Attributes and Metadata\n\n\ncarbonEmission: {\n    type: \"urn:oc:attributeType:carbonEmission\",\n    value: \"971.336623467994\",\n    metadata: {\n        unit: {\n            type: \"urn:oc:uom:kilotonne\",\n            value: \"kilotonne\"\n        },\n    TimeInstant: {\n        type: \"urn:oc:attributeType:ISO8601\",\n        value: \"2013-12-31T23:59:59\"\n    }\n    }\n}\n\n\n\n\nSee \nXLS\n for a recommendation list of asset types.\n\n\nGeospatial Asset Attributes\n\n\n:exclamation: :wrench: :earth_asia: \nPlease, notice the Assets Spatial model changed on the past days!\n :earth_asia: :wrench: :exclamation:\n\n\nFor any questions you can contact us at https://support.zoho.com/portal/organicity/\n \n\n\nAsset can have spatial-information attached. It is recommended each assets to have a spatial attribute. For assets that are having a location the asset location format\nshould be used, while other assets with more complex geometries (e.g. polygons for boroughs in the city) the complex geometry format can be used.\n\n\nAsset Location Format\n\n\nThis is the basic model for adding a simple single point location to an asset.\n\n\n:exclamation: \nNotice this changed. Latitude and Longitude pairs work now following the \nWGS84 Lat Long\n,\n  \nEPSG::4326\n standard as described below:\n\n\nPoints are always always a string containing a valid latitude-longitude pair, separated by comma.\ufeff\u2060\u2060\n\n\n:wrench: \nIf you used this before you simply need to reverse the \nlongitude and latitude\n pairs to \nlatitude and logitude\n as on the example:\n\n\n{\n  \"location\": {\n    \"value\": \"latitude, longitude\",\n    \"type\": \"geo:point\"\n  }\n}\n\n\n\n\nExample:\n\n\n{\n  \"location\": {\n    \"value\": \"-0.2379, 51.5875\",\n    \"type\": \"geo:point\"\n  }\n}\n\n\n\n\nAsset Complex Geometry Format\n\n\nThis model supports complex assets geometries representations by supporting standard \nGeoJSON\n geometry objects.\n\n\n:exclamation: \nNotice this changed: The attribute name should be \nlocation\n instead of \ngeometry\n and the type should be \ngeo:json\n instead of \noc:geo:json\n.\n\n\nAttribute should be named location and type should be geo:json. Coordinates need to follow the longitude, latitude pairs in order to follow the \nGeoJSON\n standard\n\n\n:wrench: \nIf you used this before you simply need to check you are using the \nlocation\n attribute and the  \ngeo:json\n type as on the example below:\n\n\n{\n    \"location\": {\n        \"value\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [longitude, latitude],\n                    [longitude, latitude]\n                ]\n            ]\n        },\n        \"type\": \"geo:json\"\n    }\n}\n\n\n\n\nExample:\n\n\n{\n    \"location\": {\n        \"value\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [100.0, 0.0],\n                    [101.0, 0.0],\n                    [101.0, 1.0],\n                    [100.0, 1.0],\n                    [100.0, 0.0]\n                ],\n                [\n                    [100.2, 0.2],\n                    [100.8, 0.2],\n                    [100.8, 0.8],\n                    [100.2, 0.8],\n                    [100.2, 0.2]\n                ]\n            ]\n        },\n        \"type\": \"geo:json\"\n    }\n}\n\n\n\n\nMore GeoJSON examples can be found in \nGeoJSON IETF Spec\n.\nAdditionally, the following\n\nGeoJSON Tutorial\n\nmight be useful in understanding the format. \n\n\nOther designated Asset Attributes\n\n\nThere is a number of attributes that can be used for an asset that encode several aspects and facilitate several methods of Urban Data Observatory like the discovery process\n\n\nLast Update\n\n\nThis attribute encoded the time that an update to the assed has been performed\n\nThis attribute is set by Organicity platform\n\n\nTimeInstant: {\n    type: \"urn:oc:attributeType:ISO8601\",\n    value: \"2016-08-24T11:56:42+01:00\"\n}\n\n\n\n\nComments and general asset description\n\n\n{\n  \"description\": {\n    \"value\": \"This is a general description of the asset\",\n    \"type\": \"urn:oc:attributeType:description\"\n  }\n}\n\n\n\n\nRanking\n\n\n\n\nThis attribute is set by Organicity platform only. Posting an asset with this attribute will be rejected *\n\n\n\n\n{\n  \"ranking\": {\n    \"value\": 0.7 ,\n    \"type\": \"urn:oc:attributeType:reputation\"\n  }\n}\n\n\n\n\nOrigin\n\n\nThis attribute encodes the origin of information described in the asset.\n\n\norigin: {\n    type: \"urn:oc:attributeType:origin\",\n    value: \"Train station performance indicators from the TransportAPI\",\n    metadata: {\n        unit: {\n            type: \"NOT_APPLIED\",\n            value: \"NOT_APPLIED\"\n        },\n        url1: {\n            type: \"url\",\n            value: \"http://fcc.transportapi.com/\"\n        }\n    }\n}\n\n\n\n\n\"origin\": {\n    \"type\": \"urn:oc:attributeType:origin\"\n    \"value\": \"http://www.londonair.org.uk/LondonAir/API/\"\n}\n\n\n\n\nOrganicity datasource endpoint\n\n\nThis attribute should describe if an Organicity client could retrieve historic   data through the OC\n platform of by consuming an external API service or  accessing an online file\n\n\n\"datasource\": {\n    \"type\": \"urn:oc:attributeType:datasource\"\n    \"value\": \"http://london.site.organicity.eu:8081/api/v1/entities/\"\n    \"metadata\": {\n        \"datasourceInternal\": {\n            \"type\": \"urn:oc:datatype:boolean\"\n            \"value\": \"true\"\n        }\n    }\n}\n\n\n\n\nRelated Material\n\n\nOrganicity Java Entities\n A project for creating and parsing Organicity Asset with Java.",
            "title": "Asset Data Model"
        },
        {
            "location": "/AssetDataModel/#asset-data-model",
            "text": "For the organization and discovery of data sources, Organicity platform is relying on the  NGSI9/10  information model. As depicted in the following diagram, the underlying data model of NGSI\n9/10 consists of Asset Element, Asset Attributes and Attribute Metadata   An asset is associated with multiple attributes and each attribute can be associated with various\nmetadata. Each one of the Organicity Sites and probably Organicity Experiments are contributing assets into\nthe facility. Assets can represent various types of urban resources from\nIoT/sensor devices with sensors attached, smartphones, services, data sources stored as data\nfiles (csv, xml, pdf) shared online or references to data\u00adendpoints online (third party APIs and\ndata services). For purposes of clarity of how the data of the various assets can be accessed the\nOrganicity indexed assets can be organized in three major categories:   OC raw assets : for this type of assets clients of OC platform can retrieve either their last\nvalue or historic values. In general it is possible to post various queries for retrieving data\nof the assets. The execution of the queries is managed by the OC facility and the OC\nSite where this asset belongs to.  OC dataset assets : \u200b these assets are representing data sources encoded in datafiles\nthat are shared online (e.g., CKAN instances where the data sources are exposed as\nfiles csv, xml, xls, pdf etc.). Organicity clients can discover these assets by posting discovery\nqueries on the OC platform based on their various metadata. The  platform just\ndelivers description of the assets. Organicity clients have to access the online urls to fetch the\nfiles and then further process the dataset files to consume the data.  OC online data\u00adendpoint assets : \u200b these assets are representing  online\ndata\u00adendpoints/APIs for which the actual data access is not managed by the OC facility.\nOC clients can discover these assets by posting discovery queries on OC platform based\non their various metadata. The Organicity platform just delivers description of the assets. OC\nclients have to access the online endpoints in order to post queries and consume the\ndata.   In order to avoid conflicts with the identification of the assets and facilitating interaction with the\nentity information to the experimenters, there are specific conventions that should be followed on\nAsset, Attribute and Metadata definition.",
            "title": "Asset Data Model"
        },
        {
            "location": "/AssetDataModel/#asset-attributes-and-metadata",
            "text": "Each Asset Element has to be associated with a set of of attributes. Each Asset Attribute\nmight represent various parameters of the asset. In the case of an IoT device or a\nsmartphone it might represent a sensing or actuation capability of the device or a device\ncharacteristic (static or not) like the human readable name of the device, its description,\nits location and so on. In the case of more abstract assets attributes might represent\ntypes of observations not produced by physical sensors (e.g., a bus reporting the number\nof available seats or the number of the route). Each attribute consists of a type shared\namongst all Organicity sites, the actual value of the attribute and a list of metadata that describe\nthe value.  By utilizing the proper attributes for the description of Assets various visualization and\nbrowsing options are made available through the Urban Data Observatory and the rest of the Organicity tools\nincluding:\n- GeoJson data browsing for attributes of assets referring to specific territories\n- Time\u00adseries data browsing for attributes of assets with historical data\n- combinations of the above cases  Each Metadata entry represents more characteristics of an attribute, like units of\nmeasurement and data types of the attribute value etc.  Common attribute types (e.g., observation types) should be described with same format\nby the Organicity sites and values should be represented at the same set of units (e.g., distance\nin meters and temperature in degrees Centigrade).  During the federation of various assets from the Organicity City Sites (Aarhus, London, Santader) a list\nof common urn names for Asset Types, Attribute Types and Metadata has been created (Get  XLS  file).\nIt is recommended to use the available names when you are creating your assets.",
            "title": "Asset Attributes and Metadata:"
        },
        {
            "location": "/AssetDataModel/#types-and-identification-of-assets",
            "text": "Each entity should have an unique identifier in the form of  urn:oc:entity:[site]:[service]:[provider]:[group]:[entityName]  \nwhere:    urn:oc:entity:[site]:[service]:[provider]:[group]:[entityName]  \u200b should be\nunique across the whole Organicity facility.    [site]  is representing the federated Organicity site (e.g., London, Santader, Aarhus, Experimenters etc.). During the creation of your experiment you are going\n to aquire the proper prefixes for your assets.    [service]  \u200b is representing a smart city service/application domain for example\nparking, garbage, environmental etc.    [provider]  is the logic separator for which service the asset belongs to. For\nexample, in a city, the bus company and waste management company can use\ncommon names for different assets, as they use to work in separate silos. In\norder to avoid that, the [\u200b provider] name allows us to avoid the duplication of\nentityNames\u200b within the OC infrastructure for a particular site.    [group] : This could be optional. \u200b The group part can be used for grouping\nassets under the same service and provider. It is responsibility of OS sites to\nmaintain proper group keys.    [entityName] : \u200b The Entity\u200b /\u200b Device identifier which should be unique at the\ncorresponding Organicity Site, service and provider. The same applies at the scope of an experiment.    Assets could represent devices, places, buildings, and many other entities (including virtual\nobjects). In Organicity, we define a set of OC Entity Types that can be extended in the future to\ninclude more complex installations. Each entity has a specific resource type in the form\nof \u200b  urn:oc:entityType:[Type]:[Name]\u200b  where:    [Type]  \u200b could express the context type of the context representation of the asset\nfor example IoT device, smartphone, bicycle\u00adstation, weather\u00adstation etc.    [Name]  \u200b is optional and can express some specialization of the used type. E.g. ...:iotdevice:noise    See  XLS  for a recommendation list of asset types.  Examples of assets ids and types:  \"contextElement\": {\n  \"id\": \"\u200burn:oc:entity:london:environmental:hydePark:weatherstation123\u200b\",\n  \"type\": \"\u200burn:oc:entityType:weatherstation\",\n  \"attributes\": [ \u2026 ]\n} \"  contextElement\": {\n  \"id\": \"\u200burn:oc:entity:experimenters:86d7edce-5092-44c0-bed8-da4beaa3fbc6:57eab2c2ad0302ad0b5c92c6:asset1243\u200b\",\n  \"type\": \"\u200burn:oc:entityType:smartphone\u200b\",\n  \"isPattern\": \"false\",\n  \"attributes\": [ \u2026 ]\n}",
            "title": "Types and Identification of Assets"
        },
        {
            "location": "/AssetDataModel/#asset-attributes",
            "text": "Asset attributes can represent either various urban observations or other things like properties of the asset creating the observations.\nAttributes can  have a name, a type and a value ( \u200b  ). Each attribute might represent:\n - in the case of an IoT device or a smartphone:\n    - a \u200b capability \u200b of the device (sensing or actuation)\n    - a \u200b device attribute\u200b like:\n        - description of device\n        - location of the device\n    - Management info:\n        - hardware/software characteristics\n        - communication interfaces,\n        - latest activity\n        - etc.\n -  in the case of more abstract resources like a bicycle docking station or bus station and\n so on, attributes might represent another type of observation like\n    - number of available bicycles or\n    - delay of the next bus\n    - etc.\n - in the case of of a CKAN resource shared online as a file the attributes encode metadata\n like:\n    - the creator of the file\n    - last update\n    - the file type: csv,xml, xls, pdf.\n    - the url to download the file\n    - etc.\n- in the case of of an online web service sharing data attributes might represent\n    - the url to query the web service\n    - the url to retrieve documentation\n    - the type of the web service (REST, SOAP)\n    - etc.  Attribute names \u200b \u200b might be a human readable strings.  Attribute types  should follow the format: \u200b  urn:oc:attributeType:[type]\u200b  The type should encode the type of observation shared in Organicity. Its quite important to describe only the type of observation that is\nrepresented and not other details  (like the period of observation, the method of observation etc.) in order to facilitate the discovery process and the joining of\ninformation. For example is the attribute expressed the speed of vehicles its recommended to use urn:oc:attributeType:speed and then express in metadata level if the speed is per hour or per minute etc.  Attribute MetaData:  Some of the aforementioned attribute types might require a specific set of\nmetadata like: Attribute types for sensor measurements require a datatype metadata or Attribute\ntypes for sensor measurements require an unit of measurement metadata. Each Metadata\nrepresents various characteristics of the associated attribute of the asset. Some examples might\nbe:\n- device\u200b description \u200b metadata e.g., other languages\n- device\u200b location \u200b metadata other representation of location like geohashing\n- sensing \u200b metadata: timestamp of the latest value, url of endpoint to retrieve historical\ndata of this device/sensor, description of sensor type, units of measurement and so on.\n- actuation \u200b metadata: url of endpoint to trigger actuation, description of actuation, tbd\u2026\n- other type of metadata  Examples of Attributes and Metadata  carbonEmission: {\n    type: \"urn:oc:attributeType:carbonEmission\",\n    value: \"971.336623467994\",\n    metadata: {\n        unit: {\n            type: \"urn:oc:uom:kilotonne\",\n            value: \"kilotonne\"\n        },\n    TimeInstant: {\n        type: \"urn:oc:attributeType:ISO8601\",\n        value: \"2013-12-31T23:59:59\"\n    }\n    }\n}  See  XLS  for a recommendation list of asset types.",
            "title": "Asset Attributes"
        },
        {
            "location": "/AssetDataModel/#geospatial-asset-attributes",
            "text": ":exclamation: :wrench: :earth_asia:  Please, notice the Assets Spatial model changed on the past days!  :earth_asia: :wrench: :exclamation:  For any questions you can contact us at https://support.zoho.com/portal/organicity/    Asset can have spatial-information attached. It is recommended each assets to have a spatial attribute. For assets that are having a location the asset location format\nshould be used, while other assets with more complex geometries (e.g. polygons for boroughs in the city) the complex geometry format can be used.",
            "title": "Geospatial Asset Attributes"
        },
        {
            "location": "/AssetDataModel/#asset-location-format",
            "text": "This is the basic model for adding a simple single point location to an asset.  :exclamation:  Notice this changed. Latitude and Longitude pairs work now following the  WGS84 Lat Long ,\n   EPSG::4326  standard as described below:  Points are always always a string containing a valid latitude-longitude pair, separated by comma.\ufeff\u2060\u2060  :wrench:  If you used this before you simply need to reverse the  longitude and latitude  pairs to  latitude and logitude  as on the example:  {\n  \"location\": {\n    \"value\": \"latitude, longitude\",\n    \"type\": \"geo:point\"\n  }\n}  Example:  {\n  \"location\": {\n    \"value\": \"-0.2379, 51.5875\",\n    \"type\": \"geo:point\"\n  }\n}",
            "title": "Asset Location Format"
        },
        {
            "location": "/AssetDataModel/#asset-complex-geometry-format",
            "text": "This model supports complex assets geometries representations by supporting standard  GeoJSON  geometry objects.  :exclamation:  Notice this changed: The attribute name should be  location  instead of  geometry  and the type should be  geo:json  instead of  oc:geo:json .  Attribute should be named location and type should be geo:json. Coordinates need to follow the longitude, latitude pairs in order to follow the  GeoJSON  standard  :wrench:  If you used this before you simply need to check you are using the  location  attribute and the   geo:json  type as on the example below:  {\n    \"location\": {\n        \"value\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [longitude, latitude],\n                    [longitude, latitude]\n                ]\n            ]\n        },\n        \"type\": \"geo:json\"\n    }\n}  Example:  {\n    \"location\": {\n        \"value\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [100.0, 0.0],\n                    [101.0, 0.0],\n                    [101.0, 1.0],\n                    [100.0, 1.0],\n                    [100.0, 0.0]\n                ],\n                [\n                    [100.2, 0.2],\n                    [100.8, 0.2],\n                    [100.8, 0.8],\n                    [100.2, 0.8],\n                    [100.2, 0.2]\n                ]\n            ]\n        },\n        \"type\": \"geo:json\"\n    }\n}  More GeoJSON examples can be found in  GeoJSON IETF Spec .\nAdditionally, the following GeoJSON Tutorial \nmight be useful in understanding the format.",
            "title": "Asset Complex Geometry Format"
        },
        {
            "location": "/AssetDataModel/#other-designated-asset-attributes",
            "text": "There is a number of attributes that can be used for an asset that encode several aspects and facilitate several methods of Urban Data Observatory like the discovery process",
            "title": "Other designated Asset Attributes"
        },
        {
            "location": "/AssetDataModel/#last-update",
            "text": "This attribute encoded the time that an update to the assed has been performed This attribute is set by Organicity platform  TimeInstant: {\n    type: \"urn:oc:attributeType:ISO8601\",\n    value: \"2016-08-24T11:56:42+01:00\"\n}",
            "title": "Last Update"
        },
        {
            "location": "/AssetDataModel/#comments-and-general-asset-description",
            "text": "{\n  \"description\": {\n    \"value\": \"This is a general description of the asset\",\n    \"type\": \"urn:oc:attributeType:description\"\n  }\n}",
            "title": "Comments and general asset description"
        },
        {
            "location": "/AssetDataModel/#ranking",
            "text": "This attribute is set by Organicity platform only. Posting an asset with this attribute will be rejected *   {\n  \"ranking\": {\n    \"value\": 0.7 ,\n    \"type\": \"urn:oc:attributeType:reputation\"\n  }\n}",
            "title": "Ranking"
        },
        {
            "location": "/AssetDataModel/#origin",
            "text": "This attribute encodes the origin of information described in the asset.  origin: {\n    type: \"urn:oc:attributeType:origin\",\n    value: \"Train station performance indicators from the TransportAPI\",\n    metadata: {\n        unit: {\n            type: \"NOT_APPLIED\",\n            value: \"NOT_APPLIED\"\n        },\n        url1: {\n            type: \"url\",\n            value: \"http://fcc.transportapi.com/\"\n        }\n    }\n}  \"origin\": {\n    \"type\": \"urn:oc:attributeType:origin\"\n    \"value\": \"http://www.londonair.org.uk/LondonAir/API/\"\n}",
            "title": "Origin"
        },
        {
            "location": "/AssetDataModel/#organicity-datasource-endpoint",
            "text": "This attribute should describe if an Organicity client could retrieve historic   data through the OC\n platform of by consuming an external API service or  accessing an online file  \"datasource\": {\n    \"type\": \"urn:oc:attributeType:datasource\"\n    \"value\": \"http://london.site.organicity.eu:8081/api/v1/entities/\"\n    \"metadata\": {\n        \"datasourceInternal\": {\n            \"type\": \"urn:oc:datatype:boolean\"\n            \"value\": \"true\"\n        }\n    }\n}",
            "title": "Organicity datasource endpoint"
        },
        {
            "location": "/AssetDataModel/#related-material",
            "text": "Organicity Java Entities  A project for creating and parsing Organicity Asset with Java.",
            "title": "Related Material"
        },
        {
            "location": "/AssetCRUD/",
            "text": "CRUD of Assets\n\n\nThis is just an overview of how to CRUD assets.\n\n\nCreate (HTTP Post)\n\n\nTo \ncreate an asset\n, you must do an HTTP \nPOST\n to the OC-Exp. Site:\n\n\nPOST https://exp.orion.organicity.eu/v2/entities\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: <ApplicationId>\nX-Organicity-Experiment: <ExperimentId>\n\n{\n  \"id\": \"urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>\",\n  \"type\": \"urn:oc:entityType:demo\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  }\n}\n\n\n\n\nThe response is a \n201 Created\n, which includes a \nlocation\n header:\n\n\nStatus Code: 201 Created\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT\n...\nLocation: https://discovery.organicity.eu/v0/assets/urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>\n...\n\n\n\n\nGet (HTTP Get)\n\n\nTo read an asset, you must use the \nAsset Discovery Service\n.\nYou can simply do an HTTP GET on the \nlocation\n header returnd by the creation:\n\n\nGET https://discovery.organicity.eu/v0/assets/urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>\n\n\n\n\nUpdate (HTTP Update)\n\n\nTo \nupdate an asset\n, you must do an HTTP \nPOST\n to the OC-Exp. Site.\nJSON attributes \nid\n and \ntype\n are not allowed! Be aware of the \n/attrs\n in the URL:\n\n\nPOST https://exp.orion.organicity.eu/v2/entities/urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>/attrs\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: <ApplicationId>\nX-Organicity-Experiment: <ExperimentId>\n\n{\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  }\n}\n\n\n\n\nThe response is a \n204 No Content\n:\n\n\nStatus Code: 204 No Content\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT\n\n\n\n\nDelete (HTTP Delete)\n\n\nTo \ndelete an asset\n, you must do an HTTP \nDELETE\n to the OC-Exp. Site:\n\n\nDELETE  https://exp.orion.organicity.eu/v2/entities/urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>\n\nAuthorization: Bearer <AccessToken>\nAccept: application/json\nX-Organicity-Application: <ApplicationId>\nX-Organicity-Experiment: <ExperimentId>\n\n\n\n\nThe response is a \n204 No Content\n, which tells you that assed was deleted.",
            "title": "Asset CRUD"
        },
        {
            "location": "/AssetCRUD/#crud-of-assets",
            "text": "This is just an overview of how to CRUD assets.",
            "title": "CRUD of Assets"
        },
        {
            "location": "/AssetCRUD/#create-http-post",
            "text": "To  create an asset , you must do an HTTP  POST  to the OC-Exp. Site:  POST https://exp.orion.organicity.eu/v2/entities\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: <ApplicationId>\nX-Organicity-Experiment: <ExperimentId>\n\n{\n  \"id\": \"urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>\",\n  \"type\": \"urn:oc:entityType:demo\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  }\n}  The response is a  201 Created , which includes a  location  header:  Status Code: 201 Created\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT\n...\nLocation: https://discovery.organicity.eu/v0/assets/urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>\n...",
            "title": "Create (HTTP Post)"
        },
        {
            "location": "/AssetCRUD/#get-http-get",
            "text": "To read an asset, you must use the  Asset Discovery Service .\nYou can simply do an HTTP GET on the  location  header returnd by the creation:  GET https://discovery.organicity.eu/v0/assets/urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>",
            "title": "Get (HTTP Get)"
        },
        {
            "location": "/AssetCRUD/#update-http-update",
            "text": "To  update an asset , you must do an HTTP  POST  to the OC-Exp. Site.\nJSON attributes  id  and  type  are not allowed! Be aware of the  /attrs  in the URL:  POST https://exp.orion.organicity.eu/v2/entities/urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>/attrs\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: <ApplicationId>\nX-Organicity-Experiment: <ExperimentId>\n\n{\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  }\n}  The response is a  204 No Content :  Status Code: 204 No Content\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT",
            "title": "Update (HTTP Update)"
        },
        {
            "location": "/AssetCRUD/#delete-http-delete",
            "text": "To  delete an asset , you must do an HTTP  DELETE  to the OC-Exp. Site:  DELETE  https://exp.orion.organicity.eu/v2/entities/urn:oc:entity:experimenters:<MainExperimenterId>:<ExperimentId>:<AssetId>\n\nAuthorization: Bearer <AccessToken>\nAccept: application/json\nX-Organicity-Application: <ApplicationId>\nX-Organicity-Experiment: <ExperimentId>  The response is a  204 No Content , which tells you that assed was deleted.",
            "title": "Delete (HTTP Delete)"
        },
        {
            "location": "/FederatedDataAssets/",
            "text": "Federated Data Assets\n\n\nAarhus\n\n\nReal Time Traffic Data\n\n\nVehicle speed sensors\n\n\nAarhus\n has a network of \ntraffic sensors\n distributed on selected roads throughout the city. These measures the average speed over short stretches on the main roads. \n\n\nExample:\n\n\n  {\n    \"id\": \"urn:oc:entity:aarhus:traffic:fixed:BT338\",\n    \"type\": \"urn:oc:entityType:iotdevice:traffic\",\n    \"TimeInstant\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2017-07-25T13:35:00.000Z\",\n      \"metadata\": {}\n    },\n    \"location\": {\n      \"type\": \"geo:point\",\n      \"value\": \"56.1102508220387, 10.153714822090137\",\n      \"metadata\": {}\n    },\n    \"origin\": {\n      \"type\": \"urn:oc:attributeType:origin\",\n      \"value\": \"Traffic flow data from ODAA\",\n      \"metadata\": {\n        \"urls\": {\n          \"type\": \"urls\",\n          \"value\": \"https://www.odaa.dk/dataset/realtids-trafikdata\"\n        }\n      }\n    },\n    \"speed:average\": {\n      \"type\": \"urn:oc:attributeType:speed:average\",\n      \"value\": \"69\",\n      \"metadata\": {\n        \"name\": {\n          \"type\": \"urn:oc:dataType:string\",\n          \"value\": \"urn:oc:uom:kilometrePerHour\"\n        }\n      }\n    }\n  }\n\n\n\n\nDokk1 Visitors\n\n\nDokk1\n houses the city\u2019s main library and citizens' services. In the building\u00a0you will find media, a caf\u00e9, project rooms, halls, study cells, playground and much more. Cameras at each entrance count the number of visitors entering and exiting the building.\n\n\nExample:\n\n\n  {\n    \"id\": \"urn:oc:entity:aarhus:visitors:dokk1:fixed:camera1\",\n    \"type\": \"urn:oc:entityType:iotdevice:records\",\n    \"TimeInstant\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2017-07-25T12:40:00.000Z\",\n      \"metadata\": {}\n    },\n    \"location\": {\n      \"type\": \"geo:point\",\n      \"value\": \"56.153394, 10.213934\",\n      \"metadata\": {}\n    },\n    \"origin\": {\n      \"type\": \"urn:oc:attributeType:origin\",\n      \"value\": \"Visitors at Dokk1\",\n      \"metadata\": {\n        \"urls\": {\n          \"type\": \"urls\",\n          \"value\": \"https://www.odaa.dk/dataset/taellekamera-pa-dokk1\"\n        }\n      }\n    },\n    \"visitors:in\": {\n      \"type\": \"Number\",\n      \"value\": 1210,\n      \"metadata\": {\n        \"unit\": {\n          \"type\": \"urn:oc:dataType:string\",\n          \"value\": \"urn:oc:uom:peoplePerHour\"\n        }\n      }\n    },\n    \"visitors:out\": {\n      \"type\": \"Number\",\n      \"value\": 811,\n      \"metadata\": {\n        \"unit\": {\n          \"type\": \"urn:oc:dataType:string\",\n          \"value\": \"urn:oc:uom:peoplePerHour\"\n        }\n      }\n    }\n  }\n\n\n\n\nOutdoor Activities\n\n\nAarhus maintains a number of publicly accessible \nrecreational areas and facilities\n in and around the city. These include bike- and running trails, camp sites, fire pits, outdoor fitness gyms, etc. Some are bookable, some always available.\n\n\nExample:\n\n\n  {\n    \"id\": \"urn:oc:entity:aarhus:friluftsliv:beacharea:02b5c18b2f07047b6637d6760d1deb64\",\n    \"type\": \"urn:oc:entityType:beacharea\",\n    \"TimeInstant\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2016-02-16T14:29:53.000Z\",\n      \"metadata\": {}\n    },\n    \"bookable\": {\n      \"type\": \"urn:oc:datatype:boolean\",\n      \"value\": \"true\",\n      \"metadata\": {}\n    },\n    \"location\": {\n      \"type\": \"geo:json\",\n      \"value\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              10.30353,\n              56.224481000\n            ],\n            [\n              10.303198,\n              56.224281000\n            ],\n            [\n              10.302794,\n              56.223999\n            ],\n            [\n              10.30257,\n              56.2238\n            ],\n            [\n              10.302274,\n              56.223602\n            ],\n            [\n              10.302132,\n              56.223566000\n            ],\n            [\n              10.302008,\n              56.22345\n            ],\n            [\n              10.301855,\n              56.223267\n            ],\n            [\n              10.301826,\n              56.223233\n            ],\n            [\n              10.301823,\n              56.223228000\n            ],\n            [\n              10.301799,\n              56.2232\n            ],\n            [\n              10.301783,\n              56.22318\n            ],\n            [\n              10.30172,\n              56.223105000\n            ],\n            [\n              10.301627,\n              56.223002000\n            ],\n            [\n              10.301178,\n              56.222503000\n            ],\n            [\n              10.30054,\n              56.221855000\n            ],\n            [\n              10.300487,\n              56.221802000\n            ],\n            [\n              10.300233,\n              56.221552000\n            ],\n            [\n              10.29999,\n              56.221259000\n            ],\n            [\n              10.299967,\n              56.221241\n            ],\n            [\n              10.299883,\n              56.221196\n            ],\n            [\n              10.299884,\n              56.221176\n            ],\n            [\n              10.299889,\n              56.221175000\n            ],\n            [\n              10.299898,\n              56.221173\n            ],\n            [\n              10.299813,\n              56.220988000\n            ],\n            [\n              10.299806,\n              56.220976\n            ],\n            [\n              10.299801,\n              56.220965\n            ],\n            [\n              10.299795,\n              56.220954000\n            ],\n            [\n              10.299791,\n              56.220942\n            ],\n            [\n              10.299789,\n              56.220935000\n            ],\n            [\n              10.299786,\n              56.220928\n            ],\n            [\n              10.299785,\n              56.220921000\n            ],\n            [\n              10.299783,\n              56.220914\n            ],\n            [\n              10.299783,\n              56.220906\n            ],\n            [\n              10.29975,\n              56.220834000\n            ],\n            [\n              10.299686,\n              56.220691000\n            ],\n            [\n              10.29953,\n              56.220473000\n            ],\n            [\n              10.299283,\n              56.220113000\n            ],\n            [\n              10.299067,\n              56.219884\n            ],\n            [\n              10.298854,\n              56.219664000\n            ],\n            [\n              10.298661,\n              56.219475000\n            ],\n            [\n              10.298246,\n              56.219059000\n            ],\n            [\n              10.298033,\n              56.21915\n            ],\n            [\n              10.297973,\n              56.219178\n            ],\n            [\n              10.297899,\n              56.219213000\n            ],\n            [\n              10.297828,\n              56.219246000\n            ],\n            [\n              10.297761,\n              56.219277000\n            ],\n            [\n              10.297686,\n              56.219312000\n            ],\n            [\n              10.297682,\n              56.219314000\n            ],\n            [\n              10.297561,\n              56.219371000\n            ],\n            [\n              10.297353,\n              56.219468\n            ],\n            [\n              10.297698,\n              56.219725000\n            ],\n            [\n              10.297801,\n              56.219802000\n            ],\n            [\n              10.298149,\n              56.220207000\n            ],\n            [\n              10.29816,\n              56.220221000\n            ],\n            [\n              10.298167,\n              56.220226000\n            ],\n            [\n              10.298964,\n              56.220912000\n            ],\n            [\n              10.299026,\n              56.220983000\n            ],\n            [\n              10.298958,\n              56.221006000\n            ],\n            [\n              10.29844,\n              56.221188000\n            ],\n            [\n              10.298383,\n              56.221207\n            ],\n            [\n              10.299855,\n              56.222285\n            ],\n            [\n              10.299882,\n              56.222305000\n            ],\n            [\n              10.300132,\n              56.222512000\n            ],\n            [\n              10.300135,\n              56.222515000\n            ],\n            [\n              10.300497,\n              56.222815000\n            ],\n            [\n              10.300611,\n              56.222911000\n            ],\n            [\n              10.300666,\n              56.222957\n            ],\n            [\n              10.300668,\n              56.22296\n            ],\n            [\n              10.300723,\n              56.223006000\n            ],\n            [\n              10.300982,\n              56.223225\n            ],\n            [\n              10.301021,\n              56.223258000\n            ],\n            [\n              10.301037,\n              56.223271000\n            ],\n            [\n              10.301056,\n              56.223288000\n            ],\n            [\n              10.301076,\n              56.223305000\n            ],\n            [\n              10.301092,\n              56.223319000\n            ],\n            [\n              10.301111,\n              56.223334000\n            ],\n            [\n              10.303054,\n              56.224978\n            ],\n            [\n              10.303643,\n              56.224746000\n            ],\n            [\n              10.303849,\n              56.224666\n            ],\n            [\n              10.303643,\n              56.224549000\n            ],\n            [\n              10.30353,\n              56.224481000\n            ]\n          ]\n        ]\n      },\n      \"metadata\": {}\n    },\n    \"name\": {\n      \"type\": \"urn:oc:attributeType:name\",\n      \"value\": \"T\u00e5lfor Strand\",\n      \"metadata\": {}\n    },\n    \"origin\": {\n      \"type\": \"urn:oc:attributeType:origin\",\n      \"value\": \"Beach areas from Friluftliv Aarhus\",\n      \"metadata\": {\n        \"urls\": {\n          \"type\": \"urls\",\n          \"value\": \"https://www.odaa.dk/dataset/naturarealer-ved-strande\"\n        }\n      }\n    }\n  }\n\n\n\n\nCultural Events\n\n\nAarhus\n maintains a shared database with information on all cultural events from the major cultural institutions in the city.\n\n\nExample:\n\n\n\n    \"id\": \"urn:oc:entity:aarhus:events:12306\",\n    \"type\": \"urn:oc:entityType:event\",\n    \"TimeInstant\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2016-09-02T22:00:00.000Z\",\n      \"metadata\": {}\n    },\n    \"URL\": {\n      \"type\": \"urn:oc:attributeType:url\",\n      \"value\": \"http://www.aros.dk/moed-kunsten/samlingen/no-man-is-an-island/\",\n      \"metadata\": {}\n    },\n    \"city\": {\n      \"type\": \"urn:oc:attributeType:city\",\n      \"value\": \"Aarhus C\",\n      \"metadata\": {}\n    },\n    \"excerpt\": {\n      \"type\": \"urn:oc:attributeType:excerpt\",\n      \"value\": \"I udstillingen\u00a0iscenes\u00e6ttes v\u00e6rker fra museets faste samling i nye og uvante relationer, som rejser aktuelle sp\u00f8rgsm\u00e5l om samtidens globale, sociale og \u00f8konomiske udfordringer.\u00a0\",\n      \"metadata\": {}\n    },\n    \"firstEventTime\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2016-09-02T22:00:00.000Z\",\n      \"metadata\": {}\n    },\n    \"imageURL\": {\n      \"type\": \"urn:oc:attributeType:url\",\n      \"value\": \"http://api.detskeriaarhus.dk/files/7984c1d907946d31c4b0a9e9ecaff864.jpg\",\n      \"metadata\": {}\n    },\n    \"lastEventTime\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2016-09-02T22:00:00.000Z\",\n      \"metadata\": {}\n    },\n    \"location\": {\n      \"type\": \"geo:point\",\n      \"value\": \"56.154064, 10.19811\",\n      \"metadata\": {}\n    },\n    \"name\": {\n      \"type\": \"urn:oc:attributeType:name\",\n      \"value\": \"No Man is an Island - The Satanic Verses\",\n      \"metadata\": {}\n    },\n    \"numberOfOccurrences\": {\n      \"type\": \"urn:oc:attributeType:numberOfOccurrences\",\n      \"value\": 1,\n      \"metadata\": {}\n    },\n    \"organizer\": {\n      \"type\": \"urn:oc:attributeType:organizer\",\n      \"value\": \"Aros\",\n      \"metadata\": {}\n    },\n    \"origin\": {\n      \"type\": \"urn:oc:attributeType:origin\",\n      \"value\": \"Det sker i Aarhus\",\n      \"metadata\": {\n        \"urls\": {\n          \"type\": \"urls\",\n          \"value\": \"http://api.detskeriaarhus.dk/\"\n        }\n      }\n    },\n    \"postalCode\": {\n      \"type\": \"urn:oc:attributeType:postalCode\",\n      \"value\": \"8000\",\n      \"metadata\": {}\n    },\n    \"streetAddress\": {\n      \"type\": \"urn:oc:attributeType:streetAddress\",\n      \"value\": \"Aros Alle 2\",\n      \"metadata\": {}\n    },\n    \"ticketPriceRange\": {\n      \"type\": \"urn:oc:attributeType:ticketPriceRange\",\n      \"value\": null,\n      \"metadata\": {}\n    },\n    \"ticketURL\": {\n      \"type\": \"urn:oc:attributeType:url\",\n      \"value\": null,\n      \"metadata\": {}\n    },\n    \"videoURL\": {\n      \"type\": \"urn:oc:attributeType:url\",\n      \"value\": null,\n      \"metadata\": {}\n    }\n  }\n\n\n\n\nLondon\n\n\nLondon Borough Profiles\n\n\nGreater London is divided into 33 Boroughs. For each Borough we gather aggregate statistics related to mobility, air quality and communities. Some statistics are based on census that is collected every 10 years, while other statistics are updated more frequently. Example statistics include population density, average income, average house price, fraction of greenspace and average number of cars per household. The data is gathered from the \nLondon Datastore\n, \nPublic Health England\n and other sources.\n\n\nExample:\n\n\n{\n    \"id\": \"urn:oc:entity:london:districtProfile:uk.gov.london:E09000013\",\n    \"type\": \"urn:oc:entityType:districtProfile\",\n    \"geometry\": {\n        \"type\": \"oc:geo:json\",\n        \"value\": {\n            \"coordinates\": [\n                [\n                    [\n                        [-0.2333, 51.532],\n                        [-0.2456, 51.4908],\n                        [-0.203, 51.4933],\n                        [-0.2333, 51.532]\n                    ]\n                ]\n            ],\n            \"type\": \"MultiPolygon\"\n        },\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.22078893731921054,51.49501040208028\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"The London Borough profile is a combination of data from the London Datastore and Public Health England.\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            },\n            \"urls\": {\n                \"type\": \"url\",\n                \"value\": \"http://data.london.gov.uk/dataset/london-borough-profiles,http://data.london.gov.uk/dataset/walking-and-cycling-borough,http://www.noo.org.uk/visualisation\"\n            }\n        }\n    },\n    \"carbonEmission\": {\n        \"type\": \"urn:oc:attributeType:carbonEmission\",\n        \"value\": \"971.336623467994\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:kilotonne\",\n                \"value\": \"kilotonne\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2013-12-31T23:59:59\"\n            }\n        }\n    },\n    \"cyclingFrequency\": {\n        \"type\": \"urn:oc:attributeType:cyclingFrequency\",\n        \"value\": \"19.882866745828885\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2014-12-31T23:59:59\"\n            }\n        }\n    },\n    \"greenspace\": {\n        \"type\": \"urn:oc:attributeType:greenspace\",\n        \"value\": \"19.1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2005-12-31T23:59:59\"\n            }\n        }\n    },\n    \"housePrice\": {\n        \"type\": \"urn:oc:attributeType:housePrice\",\n        \"value\": \"661000.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:monetaryValuePounds\",\n                \"value\": \"monetayValuePounds\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2014-12-31T23:59:59\"\n            }\n        }\n    },\n    \"householdCarOwnership\": {\n        \"type\": \"urn:oc:attributeType:householdCarOwnership\",\n        \"value\": \"0.544025313314307\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:count\",\n                \"value\": \"count\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2011-12-31T23:59:59\"\n            }\n        }\n    },\n    \"householdIncome\": {\n        \"type\": \"urn:oc:attributeType:householdIncome\",\n        \"value\": \"62910.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:monetaryValuePounds\",\n                \"value\": \"monetayValuePounds\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2013-12-31T23:59:59\"\n            }\n        }\n    },\n    \"obesity\": {\n        \"type\": \"urn:oc:attributeType:obesity\",\n        \"value\": \"14.918342434625048\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2014-12-31T23:59:59\"\n            }\n        }\n    },\n    \"populationDensity\": {\n        \"type\": \"urn:oc:attributeType:populationDensity\",\n        \"value\": \"110.80989224363077\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:peoplePerHectare\",\n                \"value\": \"peoplePerHectare\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"walkingFrequency\": {\n        \"type\": \"urn:oc:attributeType:walkingFrequency\",\n        \"value\": \"61.00442050708806\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2014-12-31T23:59:59\"\n            }\n        }\n    }\n}\n\n\n\n\nNote: The area attribute has been simplified in this example due to space reasons.\n\n\nLondon Traffic Counts\n\n\nIn October every year the \nDepartment for Transport\n performs an extensive \ntraffic count\n throughout thousands for locations in England. The traffic counts are presented as daily averages of different vehicle types (bicycles, motorcycles, cars, vans, trucks, etc.) that pass through a certain point.\n\n\nExample:\n\n\n{\n    \"id\": \"urn:oc:entity:london:trafficCount:uk.gov.dft:DfT-TrafficCounter-6000\",\n    \"type\": \"urn:oc:entityType:trafficstats\",\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.23795282516501054,51.587519079277754\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Street-level traffic count data from UK Department for Transport.\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            },\n            \"urls\": {\n                \"type\": \"url\",\n                \"value\": \"http://www.dft.gov.uk/traffic-counts/\"\n            }\n        }\n    },\n    \"trafficIntensity:bicycle\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:bicycle\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:bus\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:bus\",\n        \"value\": \"320.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:car\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:car\",\n        \"value\": \"35237.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:heavyGoodsVehicle\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:heavyGoodsVehicle\",\n        \"value\": \"3271.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:lightGoodsVehicle\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:lightGoodsVehicle\",\n        \"value\": \"7204.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:motorcycle\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:motorcycle\",\n        \"value\": \"493.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    }\n}\n\n\n\n\nTransport\n\n\nTransport for London\n and \nTransport API\n provide API endpoints for getting information about the London public transport network, tube stations, bus stops, citybicycle rental stations, tube lines and bus lines. In the first round of experimentation we\n\n\nExample:\n\n\n{\n    \"id\": \"urn:oc:entity:london:transportService:TransportAPI:VIC\",\n    \"type\": \"urn:oc:entityType:transportStation\",\n    \"access:scope\": {\n        \"type\": \"urn:oc:attributeType:access:scope\",\n        \"value\": \"public\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.144544,51.495256\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Train station performance indicators from the TransportAPI\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            },\n            \"urls\": {\n                \"type\": \"url\",\n                \"value\": \"http://fcc.transportapi.com/\"\n            }\n        }\n    },\n    \"transportServicePerformance\": {\n        \"type\": \"urn:oc:attributeType:transportServicePerformance\",\n        \"value\": \"96.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2016-09-29T16:17:38+01:00\"\n            }\n        }\n    }\n}\n\n\n\n\nLondon Air Quality Network\n\n\nThe \nLondon Air Quality Network\n (LAQN) provides pollution measurements that are essential to underpin air quality management and health studies. The majority of London\u2019s 33 boroughs supply measurements to the network and in addition these data are increasingly being supplemented by measurements from local authorities surrounding London, thereby providing an overall perspective of air pollution in London. The LAQN is operated and managed by the Environmental Research Group (ERG) at King\u2019s College London. QA/QC audits are carried out by the National Physical Laboratory (NPL).\n\n\nBased on the 2014 \nLAQN report\n, the air quality observations made are Carbon Monoxide (CO), Nitrogen Dioxide (NO2), Sulphur dioxide (SO2), Ozone (O3), Particles (PM10) and Particles (PM2.5) along with environmental observations like Wind Speed, Temperature, Rainfall, etc. in over 60 monitoring sites.\n\n\n{\n    \"id\": \"urn:oc:entity:london:aqn:CD9\",\n    \"type\": \"urn:oc:entityType:iotdevice\",\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.129053205282516,51.5277066194645\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"http://www.londonair.org.uk/LondonAir/API/\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            }\n        }\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://london.site.organicity.eu:8081/api/v1/entities/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:datatype:boolean\",\n                \"value\": \"true\"\n            }\n        }\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"CD9\",\n        \"metadata\": {}\n    },\n    \"chemicalAgentAtmosphericConcentration:NO\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:NO\",\n        \"value\": \"46.2\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:microgramPerCubicMetre\",\n                \"value\": \"microgramPerCubicMetre\"\n            },\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"chemicalAgentAtmosphericConcentration:airParticlesPM10\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:airParticlesPM10\",\n        \"value\": \"25.8\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:miligramPerCubicMetre\",\n                \"value\": \"miligramPerCubicMetre\"\n            },\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"chemicalAgentAtmosphericConcentration:airParticlesPM25\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:airParticlesPM25\",\n        \"value\": \"17.5\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:miligramPerCubicMetre\",\n                \"value\": \"miligramPerCubicMetre\"\n            },\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    }\n}\n\n\n\n\nEnvironmental Sensors - QEOP\n\n\nA number of environmental stations (3 weather stations) have been deployed in Queen Elizabeth Olympic Park (QEOP) measuring environmental conditions of the park like: temperature, rain levels, wind direction and intensity, humidity, barometric pressure and light intensity.\n\n\nMoreover, there are recorded data from 10 distinct points in the city (Temperature, Humidity, Nitrogen Oxide, Nitrogen Dioxide, Carbon Dioxide) for year 2015.\n\n\n{\n    \"id\": \"urn:oc:entity:london:enableiot:fixed:ICRI-QEOP-0002\",\n    \"type\": \"urn:oc:entityType:iotdevice\",\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.014934,51.547581\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Intel QeoP Deployments\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            }\n        }\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://london.site.organicity.eu:8081/api/v1/entities\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:datatype:boolean\",\n                \"value\": \"true\"\n            }\n        }\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"ICRI-QEOP-0002active\",\n        \"metadata\": {}\n    },\n    \"10_Min_Avg_Wind_Speed\": {\n        \"type\": \"urn:oc:attributeType:windSpeed\",\n        \"value\": \"4.83\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Barometer\": {\n        \"type\": \"urn:oc:attributeType:atmosphericPressure\",\n        \"value\": \"771.9568\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Day_ET\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Day_Rain\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Inside_Humidity\": {\n        \"type\": \"urn:oc:attributeType:relativeHumidity\",\n        \"value\": \"0.34\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Inside_Temperature\": {\n        \"type\": \"urn:oc:attributeType:temperature:ambient\",\n        \"value\": \"28.72222\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Month_ET\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Month_Rain\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"1.05\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Outside_Humidity\": {\n        \"type\": \"urn:oc:attributeType:relativeHumidity\",\n        \"value\": \"0.71\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Outside_Temperature\": {\n        \"type\": \"urn:oc:attributeType:temperature:ambient\",\n        \"value\": \"13.61111\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Wind_Direction\": {\n        \"type\": \"urn:oc:attributeType:windDirection\",\n        \"value\": \"37.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Wind_Speed\": {\n        \"type\": \"urn:oc:attributeType:windSpeed\",\n        \"value\": \"11.27\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Year_ET\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Year_Rain\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"110.8\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    }\n}\n\n\n\n\nSantander\n\n\nTraffic\n\n\nTraffic cameras.\n\n\nFour traffic cameras in the city provide real time images about the status of the traffic in different areas of the city.\n\n\n{\n    \"id\": \"urn:oc:entity:santander:traffic:camera:02\",\n    \"type\": \"urn:oc:entityType:camera\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-09T11:17:33.000Z\",\n        \"metadata\": {}\n    },\n    \"image\": {\n        \"type\": \"urn:oc:attributeType:image\",\n        \"value\": \"http://datos.santander.es/files/camara_castilla/castilla_20170109121732.jpg\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Castilla Hermida\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Santander City\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": \"-1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    }\n}\n\n\n\n\nVehicle count sensors\n\n\nPlaced at the main entrance of the city, they provide information about the occupancy and traffic intensity in the different lanes of the main roads.\n\n\n{\n    \"id\": \"urn:oc:entity:santander:traffic:fixed:3306\",\n    \"type\": \"urn:oc:entityType:iotdevice:vehicleCounter\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T09:15:07.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.82782, 43.4513]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"roadOccupancy\": {\n        \"type\": \"urn:oc:attributeType:speed:roadOccupancy\",\n        \"value\": 6.24,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:vehiclesPerMinute\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    },\n    \"trafficIntensity\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity\",\n        \"value\": 11,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:vehiclesPerMinute\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    }\n}\n\n\n\n\nVehicle speed sensors\n\n\nPlaced at the main entrance of the city, they provide information about the occupancy, the count of vehicles, the median and average speed in the different lanes of the main roads.\n\n\n{\n    \"id\": \"urn:oc:entity:santander:traffic:fixed:3305\",\n    \"type\": \"urn:oc:entityType:iotdevice:vehicleSpeed\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T09:08:09.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.83027, 43.4499]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"roadOccupancy\": {\n        \"type\": \"urn:oc:attributeType:speed:roadOccupancy\",\n        \"value\": 8.86,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:vehiclesPerMinute\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    },\n    \"speed:average\": {\n        \"type\": \"urn:oc:attributeType:speed:average\",\n        \"value\": 59.7,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:kilometrePerHour\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    },\n    \"speed:median\": {\n        \"type\": \"urn:oc:attributeType:speed:median\",\n        \"value\": 58,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:kilometrePerHour\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    },\n    \"trafficIntensity\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity\",\n        \"value\": 18,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:vehiclesPerMinute\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    }\n}\n\n\n\n\nMagnetic Loops\n\n\nIt provides real time information about the traffic intensity, the occupancy of the roads and the load, based on the measurements gathered by magnetic loops deployed along the city.\n\n\n{\n    \"id\": \"urn:oc:entity:santander:traffic:magneticLoop:1001\",\n    \"type\": \"urn:oc:entityType:iotdevice:magneticLoop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T09:27:00.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.82959, 43.4536]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SICE\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"roadLoad\": {\n        \"type\": \"urn:oc:attributeType:roadLoad\",\n        \"value\": 9,\n        \"metadata\": {}\n    },\n    \"roadOccupancy\": {\n        \"type\": \"urn:oc:attributeType:roadOccupancy\",\n        \"value\": 3,\n        \"metadata\": {}\n    },\n    \"trafficIntensity\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity\",\n        \"value\": 180,\n        \"metadata\": {}\n    }\n}\n\n\n\n\nParking\n\n\nOutdoor Parking\n\n\nReal time information of available parking spots within zone 30. A set of 400 ferromagnetic sensors are placed under the asphalt in zone 30 of the Santander city centre, providing real time information about the status of occupancy of the different parking spots.\n\n\n{\n    \"id\": \"urn:oc:entity:santander:parking:np3601\",\n    \"type\": \"urn:oc:entityType:iotdevice:parking\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T07:53:44.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.79897, 43.4631]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"presenceStatus:parking\": {\n        \"type\": \"urn:oc:attributeType:presenceStatus:parking\",\n        \"value\": \"true\",\n        \"metadata\": {\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"True means that the parking spot is occupied while false it is available\"\n            }\n        }\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    }\n}\n\n\n\n\nUnderground Car Parkings\n\n\n{\n    \"id\": \"urn:oc:entity:santander:parking:underground:APAR4\",\n    \"type\": \"urn:oc:entityType:undergroundParking\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T10:16:00.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"extraSpotNumber\": {\n        \"type\": \"urn:oc:attributeType:extraSpotNumber\",\n        \"value\": 2,\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.81769, 43.4614]\n        },\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Parking de Numancia\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantanderRA\",\n        \"metadata\": {}\n    },\n    \"parkingDisposition\": {\n        \"type\": \"urn:oc:attributeType:parkingDisposition\",\n        \"value\": \"parallel\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"totalSpotNumber\": {\n        \"type\": \"urn:oc:attributeType:totalSpotNumber\",\n        \"value\": 244,\n        \"metadata\": {}\n    }\n}\n\n\n\n\nParking reserved for people with dissabilities.\n\n\nIt provides information about the parking spots reserved for people with disabilities. \n\n\n{\n    \"id\": \"urn:oc:entity:santander:parking:disabledpeople:51564\",\n    \"type\": \"urn:oc:entityType:parkingZone:disabledPeople\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-11T23:35:35.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.83885, 43.4625]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Santander OD\",\n        \"metadata\": {}\n    },\n    \"parkingspots:angled\": {\n        \"type\": \"urn:oc:attributeType:parkingspots:angled\",\n        \"value\": 0,\n        \"metadata\": {}\n    },\n    \"parkingspots:inline\": {\n        \"type\": \"urn:oc:attributeType:parkingspots:inline\",\n        \"value\": 1,\n        \"metadata\": {}\n    },\n    \"regulation\": {\n        \"type\": \"urn:oc:attributeType:regulation\",\n        \"value\": \"Libre\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"street:name\": {\n        \"type\": \"urn:oc:attributeType:street:name\",\n        \"value\": \"CL/ RAFAEL ALSUA\",\n        \"metadata\": {\n            \"detail\": {\n                \"type\": \"urn:oc:datatype:string\",\n                \"value\": \"Margen Norte del vial, junto al n\u00ba 17\"\n            }\n        }\n    }\n}\n\n\n\n\nLoad and unload areas\n\n\n{\n    \"id\": \"urn:oc:entity:santander:parking:loadunload:50949\",\n    \"type\": \"urn:oc:entity:parkingZone:loadunload\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-11T23:40:08.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.77824, 43.473]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Santander OD\",\n        \"metadata\": {}\n    },\n    \"parkingspots:angled\": {\n        \"type\": \"urn:oc:attributeType:parkingspots:angled\",\n        \"value\": 0,\n        \"metadata\": {}\n    },\n    \"parkingspots:inline\": {\n        \"type\": \"urn:oc:attributeType:parkingspots:inline\",\n        \"value\": 2,\n        \"metadata\": {}\n    },\n    \"regulation\": {\n        \"type\": \"urn:oc:attributeType:regulation\",\n        \"value\": \"Libre\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"serviceHours\": {\n        \"type\": \"urn:oc:attributeType:schedule\",\n        \"value\": \"DE 7 A 11,30 H\",\n        \"metadata\": {}\n    },\n    \"street:name\": {\n        \"type\": \"urn:oc:attributeType:street:name\",\n        \"value\": \"AV/ REINA VICTORIA\",\n        \"metadata\": {\n            \"detail\": {\n                \"type\": \"urn:oc:datatype:string\",\n                \"value\": \"RESERVA TRASLADADA DEL APARCAMIENTO INTERIOR.\"\n            }\n        }\n    }\n}\n\n\n\n\nTransport\n\n\nBus stops.\n\n\nA set of 415 assets, one per bus stop in the city, have been created. Those assets provide real time information about next buses reaching the bus stop, including the distance to reach the bus stop as well as the estimated time of arrival for the first and second bus coming.\n\n\n{\n    \"id\": \"urn:oc:entity:santander:publictransport:bus:stop:103\",\n    \"type\": \"urn:oc:entityType:busStop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-04T22:20:00.000Z\",\n        \"metadata\": {}\n    },\n    \"address\": {\n        \"type\": \"urn:oc:attributeType:address\",\n        \"value\": \"Plaza de las Estaciones S/N\",\n        \"metadata\": {}\n    },\n    \"bus:direction\": {\n        \"type\": \"urn:oc:attributeType:bus:direction\",\n        \"value\": \"B\u00ba Pesquero\",\n        \"metadata\": {}\n    },\n    \"bus:stopName\": {\n        \"type\": \"urn:oc:attributeType:bus:stopName\",\n        \"value\": \"Las Estaciones\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.8107700513716405,43.45908154114637\",\n        \"metadata\": {}\n    }\n}\n\n\n\n\nBus lines\n\n\n{\n    \"id\": \"urn:oc:entity:santander:transport:bus:line:N3\",\n    \"type\": \"bus:line\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-03T00:00:00.000Z\",\n        \"metadata\": {}\n    },\n    \"lineNumber\": {\n        \"type\": \"urn:oc:attributeType:busLine:number\",\n        \"value\": \"N3\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:busLine:name\",\n        \"value\": \"PE\u00d1ACASTILLO-PLAZA DE ITALIA \",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"TUS Santander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": \"-1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    }\n}\n\n\n\n\nTaxi stops.\n\n\nThese assets provide real time information about taxi availability in each particular stop, based on the information provided by the fleet management systems deployed by the two taxi associations.\n\n\n{\n    \"id\": \"urn:oc:entity:santander:transport:taxis:stop:1\",\n    \"type\": \"urn:oc:entityType:taxis:stop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-05T00:01:01.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.7886569,43.463448\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:taxis:stops:name\",\n        \"value\": \"SAN MARTIN\",\n        \"metadata\": {}\n    }\n}\n\n\n\n\nBike stops.\n\n\nA set of 16 assets has been created, providing information about the number of available public-hire bikes and also the number of places to return such bikes.\n\n\n{\n    \"id\": \"urn:oc:entity:santander:transport:bikestation:12\",\n    \"type\": \"urn:oc:entityType:bikeStop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-09T09:26:13.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"feeSpaces\": {\n        \"type\": \"urn:oc:attributeType:freeSpaces\",\n        \"value\": 9,\n        \"metadata\": {}\n    },\n    \"freeBikes\": {\n        \"type\": \"urn:oc:attributeType:freeBikes\",\n        \"value\": 6,\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.8248012423,43.4579662522\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"012_CALLE ALTA\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"TusBic\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    }\n}\n\n\n\n\nDistricts and sections\n\n\nDistricts\n\n\n{\n    \"id\": \"urn:oc:entity:santander:districts:D03\",\n    \"type\": \"urn:oc:entityType:district\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-04T11:16:41.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [-3.79124, 43.4685],\n                    [-3.79199, 43.4686],\n                    [-3.79221, 43.4686],\n                    [-3.79238, 43.4686],\n                    [-3.79255, 43.4686],\n                    [-3.79263, 43.4686],\n                    [-3.79294, 43.4685],\n                    [-3.79343, 43.4685],\n                    [-3.79366, 43.4685],\n                    [-3.79414, 43.4685],\n                    [-3.79476, 43.4684],\n                    [-3.79521, 43.4684],\n                    [-3.79543, 43.4684],\n                    [-3.7956, 43.4684],\n                    [-3.7958, 43.4684],\n                    [-3.79623, 43.4685],\n                    [-3.79653, 43.4685],\n                    [-3.79665, 43.4685],\n                    [-3.79679, 43.4685],\n                    [-3.79701, 43.4685],\n                    [-3.79723, 43.4685],\n                    [-3.79752, 43.4685],\n                    [-3.79795, 43.4684],\n                    [-3.79886, 43.4684],\n                    [-3.79928, 43.4683],\n                    [-3.79947, 43.4683],\n                    [-3.79966, 43.4683],\n                    [-3.79994, 43.4682],\n                    [-3.80002, 43.4681],\n                    [-3.80114, 43.4678],\n                    [-3.80134, 43.4678],\n                    [-3.80174, 43.4677],\n                    [-3.80205, 43.4676],\n                    [-3.80219, 43.4676],\n                    [-3.80233, 43.4675],\n                    [-3.80265, 43.4675],\n                    [-3.80307, 43.4675],\n                    [-3.80348, 43.4675],\n                    [-3.80393, 43.4675],\n                    [-3.80426, 43.4675],\n                    [-3.80437, 43.4675],\n                    [-3.80476, 43.4675],\n                    [-3.80507, 43.4674],\n                    [-3.80528, 43.4674],\n                    [-3.80539, 43.4674],\n                    [-3.80571, 43.4674],\n                    [-3.80598, 43.4674],\n                    [-3.80612, 43.4673],\n                    [-3.80624, 43.4673],\n                    [-3.80653, 43.4673],\n                    [-3.80678, 43.4672],\n                    [-3.80692, 43.4672],\n                    [-3.80706, 43.4672],\n                    [-3.80719, 43.4672],\n                    [-3.80732, 43.4672],\n                    [-3.80794, 43.4673],\n                    [-3.80799, 43.4673],\n                    [-3.80818, 43.4674],\n                    [-3.80833, 43.4674],\n                    [-3.80909, 43.4675],\n                    [-3.80947, 43.4676],\n                    [-3.80973, 43.4676],\n                    [-3.80992, 43.4676],\n                    [-3.80995, 43.4676],\n                    [-3.81028, 43.4676],\n                    [-3.81341, 43.4676],\n                    [-3.81353, 43.4676],\n                    [-3.81377, 43.4676],\n                    [-3.81385, 43.4676],\n                    [-3.81372, 43.4675],\n                    [-3.81347, 43.4674],\n                    [-3.812, 43.4666],\n                    [-3.81198, 43.4666],\n                    [-3.81197, 43.4666],\n                    [-3.81197, 43.4665],\n                    [-3.81199, 43.4665],\n                    [-3.81202, 43.4665],\n                    [-3.81206, 43.4665],\n                    [-3.8121, 43.4665],\n                    [-3.81278, 43.4667],\n                    [-3.81284, 43.4667],\n                    [-3.81291, 43.4667],\n                    [-3.81296, 43.4666],\n                    [-3.813, 43.4666],\n                    [-3.81303, 43.4666],\n                    [-3.81303, 43.4665],\n                    [-3.81301, 43.4664],\n                    [-3.81297, 43.4664],\n                    [-3.81294, 43.4664],\n                    [-3.8129, 43.4664],\n                    [-3.8128, 43.4663],\n                    [-3.81222, 43.4662],\n                    [-3.81213, 43.4662],\n                    [-3.81204, 43.4662],\n                    [-3.81195, 43.4662],\n                    [-3.81185, 43.4662],\n                    [-3.81169, 43.4662],\n                    [-3.81162, 43.4662],\n                    [-3.81156, 43.4662],\n                    [-3.81153, 43.4661],\n                    [-3.81153, 43.4661],\n                    [-3.81156, 43.466],\n                    [-3.8116, 43.466],\n                    [-3.81166, 43.466],\n                    [-3.8119, 43.466],\n                    [-3.81195, 43.466],\n                    [-3.81199, 43.466],\n                    [-3.81202, 43.4659],\n                    [-3.81203, 43.4659],\n                    [-3.81202, 43.4659],\n                    [-3.812, 43.4658],\n                    [-3.81177, 43.4654],\n                    [-3.81161, 43.4652],\n                    [-3.81151, 43.465],\n                    [-3.81148, 43.465],\n                    [-3.81141, 43.4649],\n                    [-3.81126, 43.4647],\n                    [-3.81112, 43.4646],\n                    [-3.81106, 43.4645],\n                    [-3.811, 43.4644],\n                    [-3.81098, 43.4644],\n                    [-3.81101, 43.4643],\n                    [-3.81133, 43.4632],\n                    [-3.81133, 43.4632],\n                    [-3.81063, 43.4632],\n                    [-3.81069, 43.4637],\n                    [-3.81007, 43.4637],\n                    [-3.81005, 43.464],\n                    [-3.81002, 43.464],\n                    [-3.80997, 43.464],\n                    [-3.80877, 43.464],\n                    [-3.80875, 43.4637],\n                    [-3.80828, 43.4637],\n                    [-3.8078, 43.4637],\n                    [-3.80769, 43.4637],\n                    [-3.80621, 43.4637],\n                    [-3.80548, 43.4638],\n                    [-3.80546, 43.4638],\n                    [-3.80446, 43.4638],\n                    [-3.80418, 43.4639],\n                    [-3.804, 43.4639],\n                    [-3.80381, 43.4639],\n                    [-3.80375, 43.4639],\n                    [-3.80347, 43.464],\n                    [-3.80314, 43.4641],\n                    [-3.80287, 43.4641],\n                    [-3.80269, 43.4642],\n                    [-3.80265, 43.4642],\n                    [-3.80246, 43.4642],\n                    [-3.80235, 43.4642],\n                    [-3.80211, 43.4642],\n                    [-3.80185, 43.4643],\n                    [-3.80166, 43.4643],\n                    [-3.80133, 43.4643],\n                    [-3.80115, 43.4643],\n                    [-3.80103, 43.4643],\n                    [-3.80087, 43.4643],\n                    [-3.80073, 43.4643],\n                    [-3.8007, 43.4643],\n                    [-3.80025, 43.4643],\n                    [-3.79985, 43.4643],\n                    [-3.79958, 43.4644],\n                    [-3.79912, 43.4644],\n                    [-3.79861, 43.4644],\n                    [-3.79818, 43.4645],\n                    [-3.79791, 43.4645],\n                    [-3.79768, 43.4646],\n                    [-3.79738, 43.4646],\n                    [-3.7971, 43.4647],\n                    [-3.79683, 43.4647],\n                    [-3.79688, 43.4652],\n                    [-3.79682, 43.4653],\n                    [-3.79671, 43.4654],\n                    [-3.79646, 43.4654],\n                    [-3.796, 43.4654],\n                    [-3.79584, 43.4655],\n                    [-3.79571, 43.4655],\n                    [-3.79553, 43.4656],\n                    [-3.79536, 43.4656],\n                    [-3.79494, 43.4657],\n                    [-3.79473, 43.4658],\n                    [-3.79459, 43.4659],\n                    [-3.79435, 43.4659],\n                    [-3.79362, 43.466],\n                    [-3.79269, 43.4661],\n                    [-3.79255, 43.4661],\n                    [-3.7917, 43.4662],\n                    [-3.79167, 43.4662],\n                    [-3.79078, 43.4663],\n                    [-3.78731, 43.4665],\n                    [-3.7871, 43.4665],\n                    [-3.78709, 43.4666],\n                    [-3.78715, 43.467],\n                    [-3.78722, 43.4672],\n                    [-3.78734, 43.4674],\n                    [-3.78754, 43.4677],\n                    [-3.78776, 43.4679],\n                    [-3.78798, 43.468],\n                    [-3.7904, 43.4683],\n                    [-3.79124, 43.4685]\n                ]\n            ]\n        },\n        \"metadata\": {}\n    }\n}\n\n\n\n\nSections\n\n\n{\n    \"id\": \"urn:oc:entity:santander:sections:D07:S22\",\n    \"type\": \"section\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-05T13:21:07.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [-3.81032, 43.4696],\n                    [-3.81078, 43.4695],\n                    [-3.81128, 43.4694],\n                    [-3.81175, 43.4694],\n                    [-3.81226, 43.4693],\n                    [-3.81301, 43.4691],\n                    [-3.81383, 43.4689],\n                    [-3.81385, 43.4689],\n                    [-3.81385, 43.4689],\n                    [-3.81387, 43.4689],\n                    [-3.81353, 43.4686],\n                    [-3.81347, 43.4686],\n                    [-3.81342, 43.4685],\n                    [-3.8134, 43.4685],\n                    [-3.81339, 43.4685],\n                    [-3.81339, 43.4684],\n                    [-3.81341, 43.4679],\n                    [-3.8134, 43.4677],\n                    [-3.81341, 43.4676],\n                    [-3.81028, 43.4676],\n                    [-3.80995, 43.4676],\n                    [-3.80992, 43.4676],\n                    [-3.8102, 43.4684],\n                    [-3.81022, 43.4685],\n                    [-3.81021, 43.4686],\n                    [-3.81017, 43.4687],\n                    [-3.81011, 43.4688],\n                    [-3.80993, 43.4689],\n                    [-3.8098, 43.4691],\n                    [-3.80972, 43.4691],\n                    [-3.80967, 43.4692],\n                    [-3.80964, 43.4692],\n                    [-3.80964, 43.4692],\n                    [-3.80965, 43.4692],\n                    [-3.80966, 43.4692],\n                    [-3.80973, 43.4693],\n                    [-3.80983, 43.4694],\n                    [-3.80989, 43.4695],\n                    [-3.80991, 43.4696],\n                    [-3.81002, 43.4696],\n                    [-3.81032, 43.4696]\n                ]\n            ]\n        },\n        \"metadata\": {}\n    }\n}\n\n\n\n\nPace of the city events\n\n\nEvents happening in the city that have been generated by citizens using the apps to report them. Mainly, PulsodelaCiudad and Cuida Santander Apps\n\n\n{\n    \"id\": \"urn:oc:entity:santander:paceofthecity:event:7975\",\n    \"type\": \"city:event\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-22T08:59:59.000Z\",\n        \"metadata\": {}\n    },\n    \"eventText\": {\n        \"type\": \"urn:oc:attributeType:event:description\",\n        \"value\": \"Faltan dos bolardos que se han partido.  han quedado trozos por encima del raso de la acera,  con lo cual puede haber cortadas en los pies.\",\n        \"metadata\": {}\n    },\n    \"eventTitle\": {\n        \"type\": \"urn:oc:attributeType:event:name\",\n        \"value\": null,\n        \"metadata\": {}\n    },\n    \"eventType\": {\n        \"type\": \"urn:oc:attributeType:event:type\",\n        \"value\": \"VIA_PUBLICA\",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:imageURL\",\n        \"value\": \"http://farm9.staticflickr.com/8268/29711271953_c1b018c526.jpg\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.7963962,43.4701798\",\n        \"metadata\": {}\n    }\n}\n\n\n\n\nTourism:Points of Interest\n\n\nBeaches\n\n\n{\n    \"id\": \"urn:oc:santander:tourism:poi:beach:6\",\n    \"type\": \"poi:park\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-05T13:13:51.000Z\",\n        \"metadata\": {}\n    },\n    \"description:long\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"\",\n        \"metadata\": {}\n    },\n    \"description:short\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"Debe su nombre a la roca con esta forma que hay en la orilla\",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:imageURL\",\n        \"value\": \"http://ra.smartsantander.eu/images/playas/camello.jpg\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.7752789259,43.4694983127\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Playa de El Camello\",\n        \"metadata\": {}\n    }\n}\n\n\n\n\nPark and gardens\n\n\n{\n    \"id\": \"urn:oc:santander:tourism:poi:park:9\",\n    \"type\": \"poi:park\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-05T13:13:51.000Z\",\n        \"metadata\": {}\n    },\n    \"description:short\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"175.000 m2 de parque con ejemplares arb\u00f3reos destacados \",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:imageURL\",\n        \"value\": \"http://ra.smartsantander.eu/images/parques/ParqueMorales.jpg\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.8407950000,43.4557850000\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Parque Dr Morales\",\n        \"metadata\": {}\n    }\n}\n\n\n\n\nShops\n\n\nMore than 2000 assets have been created based on the information registered at Comercio Santander initiative. The list of assets is updated every day, so that, it can change during the experimentation period. \n\n\n{\n    \"id\": \"urn:oc:santander:commerce:shops:2844\",\n    \"type\": \"poi:shop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-02T11:49:32.000Z\",\n        \"metadata\": {}\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"Moda y complementos marca propia para mujer joven.\",\n        \"metadata\": {}\n    },\n    \"description:other\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"\",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:imageURL\",\n        \"value\": \"http://www.comerciosantander.com/imagenes/Comercios/ED407B6E-AB2E-E9B4-BD50-FC012F619733.jpg/resize/480/640/\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.812214499999982,43.4620188\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"SHIMAI\",\n        \"metadata\": {}\n    }\n}\n\n\n\n\nCultural agenda events\n\n\nReal time information to Santander Auna Events. \n\n\n{\n    \"id\": \"urn:oc:entity:santander:culture:auna:23269\",\n    \"type\": \"agenda:event\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-02T01:50:41.000Z\",\n        \"metadata\": {}\n    },\n    \"category\": {\n        \"type\": \"urn:oc:attributeType:decription\",\n        \"value\": \"Formaci\u00f3n/Talleres\",\n        \"metadata\": {}\n    },\n    \"date\": {\n        \"type\": \"urn:oc:attributeType:event:date\",\n        \"value\": \"Lunes 02/01/2017, todo el d\u00eda. \",\n        \"metadata\": {}\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"Festival de cine independiente dirigido\u00c2 por el c\u00c3\u00a1ntabro Luis Bezeta con videocreaci\u00c3\u00b3n, ficci\u00c3\u00b3n,\u00c2 animaci\u00c3\u00b3n, performance y conciertos\",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:url\",\n        \"value\": \"http://www.fundacionsantandercreativa.com/ekh2983gd29837gt_uploads/web_2/eventos_images/final/23269.jpg\",\n        \"metadata\": {}\n    },\n    \"link\": {\n        \"type\": \"urn:oc:attributeType:url\",\n        \"value\": \"http://www.fundacionsantandercreativa.com/mobile/index.php?evento%3Dinscripciones-para-el-curso-de-modelado-en-3d-con-blender\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Inscripciones para el curso de Modelado en 3D con Blender\",\n        \"metadata\": {}\n    },\n    \"subname\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"IV Picnick Festival\",\n        \"metadata\": {}\n    }\n}\n\n\n\n\nNews in the city\n\n\nNews generated by the different areas of governance within the municipality. \n\n\n{\n    \"id\": \"urn:oc:entity:santander:news:c35672836c31190ad2badb057cee6ad4\",\n    \"type\": \"urn:oc:entityType:news\",\n    \"date\": {\n        \"type\": \"urn:oc:attributeType:date\",\n        \"value\": \"08-09-2016 15:41\",\n        \"metadata\": {}\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"La imagen m\u00e1s ic\u00f3nica de la nueva exposici\u00f3n del centro es la fotograf\u00eda que se hicieron un grupo de artistas espa\u00f1oles en Roma con motivo de la visita que les hizo el escritor Pedro Antonio de Alarc\u00f3n en las Navidades de 1860\",\n        \"metadata\": {}\n    },\n    \"news:title\": {\n        \"type\": \"urn:oc:attributeType:title\",\n        \"value\": \"El CDIS recorre el proceso de formaci\u00f3n del artista a trav\u00e9s de la figura de Di\u00f3scoro Puebla\",\n        \"metadata\": {}\n    },\n    \"url\": {\n        \"type\": \"urn:oc:attributeType:url\",\n        \"value\": \"http://santander.es/noticia/cultura/cdis-recorre-proceso-formacion-del-artista-traves-figura-diascoro-puebla\",\n        \"metadata\": {}\n    }\n}\n\n\n\n\nEnvironmental sensors\n\n\nMobile Nodes\n\n\n{\n    \"id\": \"urn:oc:entity:santander:environmental:mobile:3028\",\n    \"type\": \"urn:oc:entityType:mobileSensor\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-09T19:26:35.000Z\",\n        \"metadata\": {}\n    },\n    \"chemicalAgentAtmosphericConcentration:CO\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:CO\",\n        \"value\": 0.1,\n        \"metadata\": {}\n    },\n    \"chemicalAgentAtmosphericConcentration:O3\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:O3\",\n        \"value\": 79,\n        \"metadata\": {}\n    },\n    \"chemicalAgentAtmosphericConcentration:airParticles\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:airParticles\",\n        \"value\": 0.09,\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"direction:heading\": {\n        \"type\": \"urn:oc:attributeType:direction:heading\",\n        \"value\": 87,\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.811630,43.461900\",\n        \"metadata\": {}\n    },\n    \"mileage:total\": {\n        \"type\": \"urn:oc:attributeType:mileage:total\",\n        \"value\": 18825,\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"position:altitude\": {\n        \"type\": \"urn:oc:attributeType:position:altitude\",\n        \"value\": 13,\n        \"metadata\": {}\n    },\n    \"relativeHumidity\": {\n        \"type\": \"urn:oc:attributeType:relativeHumidity\",\n        \"value\": 46,\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"speed:instantaneous\": {\n        \"type\": \"urn:oc:attributeType:speed:instantaneous\",\n        \"value\": 27,\n        \"metadata\": {}\n    },\n    \"temperature:ambient\": {\n        \"type\": \"urn:oc:attributeType:temperature:ambient\",\n        \"value\": 10.7,\n        \"metadata\": {}\n    }\n}\n\n\n\n\nNoise repeaters\n\n\n{\n    \"id\": \"urn:oc:entity:santander:environmental:fixed:737\",\n    \"type\": \"urn:oc:entityType:repeater:noise\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-02T11:01:06.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.81289,43.45487\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": \"-1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"soundPressureLevel:ambient\": {\n        \"type\": \"urn:oc:attributeType:soundPressureLevel:ambient\",\n        \"value\": \"50.50\",\n        \"metadata\": {}\n    }\n }\n\n\n\n\nluminosity repeaters\n\n\n{\n    \"id\": \"urn:oc:entity:santander:environmental:fixed:680\",\n    \"type\": \"urn:oc:entityType:repeater:luminosity\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2013-04-05T11:20:19.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"illuminance\": {\n        \"type\": \"urn:oc:attributeType:illuminance\",\n        \"value\": 3,\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.82052,43.46023\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": \"-1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"temperature:ambient\": {\n        \"type\": \"urn:oc:attributeType:temperature:ambient\",\n        \"value\": 4,\n        \"metadata\": {}\n    }\n}",
            "title": "Federated Data Assets"
        },
        {
            "location": "/FederatedDataAssets/#federated-data-assets",
            "text": "",
            "title": "Federated Data Assets"
        },
        {
            "location": "/FederatedDataAssets/#aarhus",
            "text": "",
            "title": "Aarhus"
        },
        {
            "location": "/FederatedDataAssets/#real-time-traffic-data",
            "text": "",
            "title": "Real Time Traffic Data"
        },
        {
            "location": "/FederatedDataAssets/#vehicle-speed-sensors",
            "text": "Aarhus  has a network of  traffic sensors  distributed on selected roads throughout the city. These measures the average speed over short stretches on the main roads.   Example:    {\n    \"id\": \"urn:oc:entity:aarhus:traffic:fixed:BT338\",\n    \"type\": \"urn:oc:entityType:iotdevice:traffic\",\n    \"TimeInstant\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2017-07-25T13:35:00.000Z\",\n      \"metadata\": {}\n    },\n    \"location\": {\n      \"type\": \"geo:point\",\n      \"value\": \"56.1102508220387, 10.153714822090137\",\n      \"metadata\": {}\n    },\n    \"origin\": {\n      \"type\": \"urn:oc:attributeType:origin\",\n      \"value\": \"Traffic flow data from ODAA\",\n      \"metadata\": {\n        \"urls\": {\n          \"type\": \"urls\",\n          \"value\": \"https://www.odaa.dk/dataset/realtids-trafikdata\"\n        }\n      }\n    },\n    \"speed:average\": {\n      \"type\": \"urn:oc:attributeType:speed:average\",\n      \"value\": \"69\",\n      \"metadata\": {\n        \"name\": {\n          \"type\": \"urn:oc:dataType:string\",\n          \"value\": \"urn:oc:uom:kilometrePerHour\"\n        }\n      }\n    }\n  }",
            "title": "Vehicle speed sensors"
        },
        {
            "location": "/FederatedDataAssets/#dokk1-visitors",
            "text": "Dokk1  houses the city\u2019s main library and citizens' services. In the building\u00a0you will find media, a caf\u00e9, project rooms, halls, study cells, playground and much more. Cameras at each entrance count the number of visitors entering and exiting the building.  Example:    {\n    \"id\": \"urn:oc:entity:aarhus:visitors:dokk1:fixed:camera1\",\n    \"type\": \"urn:oc:entityType:iotdevice:records\",\n    \"TimeInstant\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2017-07-25T12:40:00.000Z\",\n      \"metadata\": {}\n    },\n    \"location\": {\n      \"type\": \"geo:point\",\n      \"value\": \"56.153394, 10.213934\",\n      \"metadata\": {}\n    },\n    \"origin\": {\n      \"type\": \"urn:oc:attributeType:origin\",\n      \"value\": \"Visitors at Dokk1\",\n      \"metadata\": {\n        \"urls\": {\n          \"type\": \"urls\",\n          \"value\": \"https://www.odaa.dk/dataset/taellekamera-pa-dokk1\"\n        }\n      }\n    },\n    \"visitors:in\": {\n      \"type\": \"Number\",\n      \"value\": 1210,\n      \"metadata\": {\n        \"unit\": {\n          \"type\": \"urn:oc:dataType:string\",\n          \"value\": \"urn:oc:uom:peoplePerHour\"\n        }\n      }\n    },\n    \"visitors:out\": {\n      \"type\": \"Number\",\n      \"value\": 811,\n      \"metadata\": {\n        \"unit\": {\n          \"type\": \"urn:oc:dataType:string\",\n          \"value\": \"urn:oc:uom:peoplePerHour\"\n        }\n      }\n    }\n  }",
            "title": "Dokk1 Visitors"
        },
        {
            "location": "/FederatedDataAssets/#outdoor-activities",
            "text": "Aarhus maintains a number of publicly accessible  recreational areas and facilities  in and around the city. These include bike- and running trails, camp sites, fire pits, outdoor fitness gyms, etc. Some are bookable, some always available.  Example:    {\n    \"id\": \"urn:oc:entity:aarhus:friluftsliv:beacharea:02b5c18b2f07047b6637d6760d1deb64\",\n    \"type\": \"urn:oc:entityType:beacharea\",\n    \"TimeInstant\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2016-02-16T14:29:53.000Z\",\n      \"metadata\": {}\n    },\n    \"bookable\": {\n      \"type\": \"urn:oc:datatype:boolean\",\n      \"value\": \"true\",\n      \"metadata\": {}\n    },\n    \"location\": {\n      \"type\": \"geo:json\",\n      \"value\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              10.30353,\n              56.224481000\n            ],\n            [\n              10.303198,\n              56.224281000\n            ],\n            [\n              10.302794,\n              56.223999\n            ],\n            [\n              10.30257,\n              56.2238\n            ],\n            [\n              10.302274,\n              56.223602\n            ],\n            [\n              10.302132,\n              56.223566000\n            ],\n            [\n              10.302008,\n              56.22345\n            ],\n            [\n              10.301855,\n              56.223267\n            ],\n            [\n              10.301826,\n              56.223233\n            ],\n            [\n              10.301823,\n              56.223228000\n            ],\n            [\n              10.301799,\n              56.2232\n            ],\n            [\n              10.301783,\n              56.22318\n            ],\n            [\n              10.30172,\n              56.223105000\n            ],\n            [\n              10.301627,\n              56.223002000\n            ],\n            [\n              10.301178,\n              56.222503000\n            ],\n            [\n              10.30054,\n              56.221855000\n            ],\n            [\n              10.300487,\n              56.221802000\n            ],\n            [\n              10.300233,\n              56.221552000\n            ],\n            [\n              10.29999,\n              56.221259000\n            ],\n            [\n              10.299967,\n              56.221241\n            ],\n            [\n              10.299883,\n              56.221196\n            ],\n            [\n              10.299884,\n              56.221176\n            ],\n            [\n              10.299889,\n              56.221175000\n            ],\n            [\n              10.299898,\n              56.221173\n            ],\n            [\n              10.299813,\n              56.220988000\n            ],\n            [\n              10.299806,\n              56.220976\n            ],\n            [\n              10.299801,\n              56.220965\n            ],\n            [\n              10.299795,\n              56.220954000\n            ],\n            [\n              10.299791,\n              56.220942\n            ],\n            [\n              10.299789,\n              56.220935000\n            ],\n            [\n              10.299786,\n              56.220928\n            ],\n            [\n              10.299785,\n              56.220921000\n            ],\n            [\n              10.299783,\n              56.220914\n            ],\n            [\n              10.299783,\n              56.220906\n            ],\n            [\n              10.29975,\n              56.220834000\n            ],\n            [\n              10.299686,\n              56.220691000\n            ],\n            [\n              10.29953,\n              56.220473000\n            ],\n            [\n              10.299283,\n              56.220113000\n            ],\n            [\n              10.299067,\n              56.219884\n            ],\n            [\n              10.298854,\n              56.219664000\n            ],\n            [\n              10.298661,\n              56.219475000\n            ],\n            [\n              10.298246,\n              56.219059000\n            ],\n            [\n              10.298033,\n              56.21915\n            ],\n            [\n              10.297973,\n              56.219178\n            ],\n            [\n              10.297899,\n              56.219213000\n            ],\n            [\n              10.297828,\n              56.219246000\n            ],\n            [\n              10.297761,\n              56.219277000\n            ],\n            [\n              10.297686,\n              56.219312000\n            ],\n            [\n              10.297682,\n              56.219314000\n            ],\n            [\n              10.297561,\n              56.219371000\n            ],\n            [\n              10.297353,\n              56.219468\n            ],\n            [\n              10.297698,\n              56.219725000\n            ],\n            [\n              10.297801,\n              56.219802000\n            ],\n            [\n              10.298149,\n              56.220207000\n            ],\n            [\n              10.29816,\n              56.220221000\n            ],\n            [\n              10.298167,\n              56.220226000\n            ],\n            [\n              10.298964,\n              56.220912000\n            ],\n            [\n              10.299026,\n              56.220983000\n            ],\n            [\n              10.298958,\n              56.221006000\n            ],\n            [\n              10.29844,\n              56.221188000\n            ],\n            [\n              10.298383,\n              56.221207\n            ],\n            [\n              10.299855,\n              56.222285\n            ],\n            [\n              10.299882,\n              56.222305000\n            ],\n            [\n              10.300132,\n              56.222512000\n            ],\n            [\n              10.300135,\n              56.222515000\n            ],\n            [\n              10.300497,\n              56.222815000\n            ],\n            [\n              10.300611,\n              56.222911000\n            ],\n            [\n              10.300666,\n              56.222957\n            ],\n            [\n              10.300668,\n              56.22296\n            ],\n            [\n              10.300723,\n              56.223006000\n            ],\n            [\n              10.300982,\n              56.223225\n            ],\n            [\n              10.301021,\n              56.223258000\n            ],\n            [\n              10.301037,\n              56.223271000\n            ],\n            [\n              10.301056,\n              56.223288000\n            ],\n            [\n              10.301076,\n              56.223305000\n            ],\n            [\n              10.301092,\n              56.223319000\n            ],\n            [\n              10.301111,\n              56.223334000\n            ],\n            [\n              10.303054,\n              56.224978\n            ],\n            [\n              10.303643,\n              56.224746000\n            ],\n            [\n              10.303849,\n              56.224666\n            ],\n            [\n              10.303643,\n              56.224549000\n            ],\n            [\n              10.30353,\n              56.224481000\n            ]\n          ]\n        ]\n      },\n      \"metadata\": {}\n    },\n    \"name\": {\n      \"type\": \"urn:oc:attributeType:name\",\n      \"value\": \"T\u00e5lfor Strand\",\n      \"metadata\": {}\n    },\n    \"origin\": {\n      \"type\": \"urn:oc:attributeType:origin\",\n      \"value\": \"Beach areas from Friluftliv Aarhus\",\n      \"metadata\": {\n        \"urls\": {\n          \"type\": \"urls\",\n          \"value\": \"https://www.odaa.dk/dataset/naturarealer-ved-strande\"\n        }\n      }\n    }\n  }",
            "title": "Outdoor Activities"
        },
        {
            "location": "/FederatedDataAssets/#cultural-events",
            "text": "Aarhus  maintains a shared database with information on all cultural events from the major cultural institutions in the city.  Example:  \n    \"id\": \"urn:oc:entity:aarhus:events:12306\",\n    \"type\": \"urn:oc:entityType:event\",\n    \"TimeInstant\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2016-09-02T22:00:00.000Z\",\n      \"metadata\": {}\n    },\n    \"URL\": {\n      \"type\": \"urn:oc:attributeType:url\",\n      \"value\": \"http://www.aros.dk/moed-kunsten/samlingen/no-man-is-an-island/\",\n      \"metadata\": {}\n    },\n    \"city\": {\n      \"type\": \"urn:oc:attributeType:city\",\n      \"value\": \"Aarhus C\",\n      \"metadata\": {}\n    },\n    \"excerpt\": {\n      \"type\": \"urn:oc:attributeType:excerpt\",\n      \"value\": \"I udstillingen\u00a0iscenes\u00e6ttes v\u00e6rker fra museets faste samling i nye og uvante relationer, som rejser aktuelle sp\u00f8rgsm\u00e5l om samtidens globale, sociale og \u00f8konomiske udfordringer.\u00a0\",\n      \"metadata\": {}\n    },\n    \"firstEventTime\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2016-09-02T22:00:00.000Z\",\n      \"metadata\": {}\n    },\n    \"imageURL\": {\n      \"type\": \"urn:oc:attributeType:url\",\n      \"value\": \"http://api.detskeriaarhus.dk/files/7984c1d907946d31c4b0a9e9ecaff864.jpg\",\n      \"metadata\": {}\n    },\n    \"lastEventTime\": {\n      \"type\": \"urn:oc:attributeType:ISO8601\",\n      \"value\": \"2016-09-02T22:00:00.000Z\",\n      \"metadata\": {}\n    },\n    \"location\": {\n      \"type\": \"geo:point\",\n      \"value\": \"56.154064, 10.19811\",\n      \"metadata\": {}\n    },\n    \"name\": {\n      \"type\": \"urn:oc:attributeType:name\",\n      \"value\": \"No Man is an Island - The Satanic Verses\",\n      \"metadata\": {}\n    },\n    \"numberOfOccurrences\": {\n      \"type\": \"urn:oc:attributeType:numberOfOccurrences\",\n      \"value\": 1,\n      \"metadata\": {}\n    },\n    \"organizer\": {\n      \"type\": \"urn:oc:attributeType:organizer\",\n      \"value\": \"Aros\",\n      \"metadata\": {}\n    },\n    \"origin\": {\n      \"type\": \"urn:oc:attributeType:origin\",\n      \"value\": \"Det sker i Aarhus\",\n      \"metadata\": {\n        \"urls\": {\n          \"type\": \"urls\",\n          \"value\": \"http://api.detskeriaarhus.dk/\"\n        }\n      }\n    },\n    \"postalCode\": {\n      \"type\": \"urn:oc:attributeType:postalCode\",\n      \"value\": \"8000\",\n      \"metadata\": {}\n    },\n    \"streetAddress\": {\n      \"type\": \"urn:oc:attributeType:streetAddress\",\n      \"value\": \"Aros Alle 2\",\n      \"metadata\": {}\n    },\n    \"ticketPriceRange\": {\n      \"type\": \"urn:oc:attributeType:ticketPriceRange\",\n      \"value\": null,\n      \"metadata\": {}\n    },\n    \"ticketURL\": {\n      \"type\": \"urn:oc:attributeType:url\",\n      \"value\": null,\n      \"metadata\": {}\n    },\n    \"videoURL\": {\n      \"type\": \"urn:oc:attributeType:url\",\n      \"value\": null,\n      \"metadata\": {}\n    }\n  }",
            "title": "Cultural Events"
        },
        {
            "location": "/FederatedDataAssets/#london",
            "text": "",
            "title": "London"
        },
        {
            "location": "/FederatedDataAssets/#london-borough-profiles",
            "text": "Greater London is divided into 33 Boroughs. For each Borough we gather aggregate statistics related to mobility, air quality and communities. Some statistics are based on census that is collected every 10 years, while other statistics are updated more frequently. Example statistics include population density, average income, average house price, fraction of greenspace and average number of cars per household. The data is gathered from the  London Datastore ,  Public Health England  and other sources.  Example:  {\n    \"id\": \"urn:oc:entity:london:districtProfile:uk.gov.london:E09000013\",\n    \"type\": \"urn:oc:entityType:districtProfile\",\n    \"geometry\": {\n        \"type\": \"oc:geo:json\",\n        \"value\": {\n            \"coordinates\": [\n                [\n                    [\n                        [-0.2333, 51.532],\n                        [-0.2456, 51.4908],\n                        [-0.203, 51.4933],\n                        [-0.2333, 51.532]\n                    ]\n                ]\n            ],\n            \"type\": \"MultiPolygon\"\n        },\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.22078893731921054,51.49501040208028\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"The London Borough profile is a combination of data from the London Datastore and Public Health England.\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            },\n            \"urls\": {\n                \"type\": \"url\",\n                \"value\": \"http://data.london.gov.uk/dataset/london-borough-profiles,http://data.london.gov.uk/dataset/walking-and-cycling-borough,http://www.noo.org.uk/visualisation\"\n            }\n        }\n    },\n    \"carbonEmission\": {\n        \"type\": \"urn:oc:attributeType:carbonEmission\",\n        \"value\": \"971.336623467994\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:kilotonne\",\n                \"value\": \"kilotonne\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2013-12-31T23:59:59\"\n            }\n        }\n    },\n    \"cyclingFrequency\": {\n        \"type\": \"urn:oc:attributeType:cyclingFrequency\",\n        \"value\": \"19.882866745828885\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2014-12-31T23:59:59\"\n            }\n        }\n    },\n    \"greenspace\": {\n        \"type\": \"urn:oc:attributeType:greenspace\",\n        \"value\": \"19.1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2005-12-31T23:59:59\"\n            }\n        }\n    },\n    \"housePrice\": {\n        \"type\": \"urn:oc:attributeType:housePrice\",\n        \"value\": \"661000.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:monetaryValuePounds\",\n                \"value\": \"monetayValuePounds\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2014-12-31T23:59:59\"\n            }\n        }\n    },\n    \"householdCarOwnership\": {\n        \"type\": \"urn:oc:attributeType:householdCarOwnership\",\n        \"value\": \"0.544025313314307\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:count\",\n                \"value\": \"count\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2011-12-31T23:59:59\"\n            }\n        }\n    },\n    \"householdIncome\": {\n        \"type\": \"urn:oc:attributeType:householdIncome\",\n        \"value\": \"62910.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:monetaryValuePounds\",\n                \"value\": \"monetayValuePounds\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2013-12-31T23:59:59\"\n            }\n        }\n    },\n    \"obesity\": {\n        \"type\": \"urn:oc:attributeType:obesity\",\n        \"value\": \"14.918342434625048\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2014-12-31T23:59:59\"\n            }\n        }\n    },\n    \"populationDensity\": {\n        \"type\": \"urn:oc:attributeType:populationDensity\",\n        \"value\": \"110.80989224363077\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:peoplePerHectare\",\n                \"value\": \"peoplePerHectare\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"walkingFrequency\": {\n        \"type\": \"urn:oc:attributeType:walkingFrequency\",\n        \"value\": \"61.00442050708806\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2014-12-31T23:59:59\"\n            }\n        }\n    }\n}  Note: The area attribute has been simplified in this example due to space reasons.",
            "title": "London Borough Profiles"
        },
        {
            "location": "/FederatedDataAssets/#london-traffic-counts",
            "text": "In October every year the  Department for Transport  performs an extensive  traffic count  throughout thousands for locations in England. The traffic counts are presented as daily averages of different vehicle types (bicycles, motorcycles, cars, vans, trucks, etc.) that pass through a certain point.  Example:  {\n    \"id\": \"urn:oc:entity:london:trafficCount:uk.gov.dft:DfT-TrafficCounter-6000\",\n    \"type\": \"urn:oc:entityType:trafficstats\",\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.23795282516501054,51.587519079277754\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Street-level traffic count data from UK Department for Transport.\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            },\n            \"urls\": {\n                \"type\": \"url\",\n                \"value\": \"http://www.dft.gov.uk/traffic-counts/\"\n            }\n        }\n    },\n    \"trafficIntensity:bicycle\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:bicycle\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:bus\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:bus\",\n        \"value\": \"320.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:car\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:car\",\n        \"value\": \"35237.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:heavyGoodsVehicle\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:heavyGoodsVehicle\",\n        \"value\": \"3271.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:lightGoodsVehicle\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:lightGoodsVehicle\",\n        \"value\": \"7204.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    },\n    \"trafficIntensity:motorcycle\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity:motorcycle\",\n        \"value\": \"493.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:vehiclePerDay\",\n                \"value\": \"vehiclePerDay\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2015-12-31T23:59:59\"\n            }\n        }\n    }\n}",
            "title": "London Traffic Counts"
        },
        {
            "location": "/FederatedDataAssets/#transport",
            "text": "Transport for London  and  Transport API  provide API endpoints for getting information about the London public transport network, tube stations, bus stops, citybicycle rental stations, tube lines and bus lines. In the first round of experimentation we  Example:  {\n    \"id\": \"urn:oc:entity:london:transportService:TransportAPI:VIC\",\n    \"type\": \"urn:oc:entityType:transportStation\",\n    \"access:scope\": {\n        \"type\": \"urn:oc:attributeType:access:scope\",\n        \"value\": \"public\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.144544,51.495256\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Train station performance indicators from the TransportAPI\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            },\n            \"urls\": {\n                \"type\": \"url\",\n                \"value\": \"http://fcc.transportapi.com/\"\n            }\n        }\n    },\n    \"transportServicePerformance\": {\n        \"type\": \"urn:oc:attributeType:transportServicePerformance\",\n        \"value\": \"96.0\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:percent\",\n                \"value\": \"percent\"\n            },\n            \"TimeInstant\": {\n                \"type\": \"urn:oc:attributeType:ISO8601\",\n                \"value\": \"2016-09-29T16:17:38+01:00\"\n            }\n        }\n    }\n}",
            "title": "Transport"
        },
        {
            "location": "/FederatedDataAssets/#london-air-quality-network",
            "text": "The  London Air Quality Network  (LAQN) provides pollution measurements that are essential to underpin air quality management and health studies. The majority of London\u2019s 33 boroughs supply measurements to the network and in addition these data are increasingly being supplemented by measurements from local authorities surrounding London, thereby providing an overall perspective of air pollution in London. The LAQN is operated and managed by the Environmental Research Group (ERG) at King\u2019s College London. QA/QC audits are carried out by the National Physical Laboratory (NPL).  Based on the 2014  LAQN report , the air quality observations made are Carbon Monoxide (CO), Nitrogen Dioxide (NO2), Sulphur dioxide (SO2), Ozone (O3), Particles (PM10) and Particles (PM2.5) along with environmental observations like Wind Speed, Temperature, Rainfall, etc. in over 60 monitoring sites.  {\n    \"id\": \"urn:oc:entity:london:aqn:CD9\",\n    \"type\": \"urn:oc:entityType:iotdevice\",\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.129053205282516,51.5277066194645\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"http://www.londonair.org.uk/LondonAir/API/\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            }\n        }\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://london.site.organicity.eu:8081/api/v1/entities/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:datatype:boolean\",\n                \"value\": \"true\"\n            }\n        }\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"CD9\",\n        \"metadata\": {}\n    },\n    \"chemicalAgentAtmosphericConcentration:NO\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:NO\",\n        \"value\": \"46.2\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:microgramPerCubicMetre\",\n                \"value\": \"microgramPerCubicMetre\"\n            },\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"chemicalAgentAtmosphericConcentration:airParticlesPM10\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:airParticlesPM10\",\n        \"value\": \"25.8\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:miligramPerCubicMetre\",\n                \"value\": \"miligramPerCubicMetre\"\n            },\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"chemicalAgentAtmosphericConcentration:airParticlesPM25\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:airParticlesPM25\",\n        \"value\": \"17.5\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:uom:miligramPerCubicMetre\",\n                \"value\": \"miligramPerCubicMetre\"\n            },\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    }\n}",
            "title": "London Air Quality Network"
        },
        {
            "location": "/FederatedDataAssets/#environmental-sensors-qeop",
            "text": "A number of environmental stations (3 weather stations) have been deployed in Queen Elizabeth Olympic Park (QEOP) measuring environmental conditions of the park like: temperature, rain levels, wind direction and intensity, humidity, barometric pressure and light intensity.  Moreover, there are recorded data from 10 distinct points in the city (Temperature, Humidity, Nitrogen Oxide, Nitrogen Dioxide, Carbon Dioxide) for year 2015.  {\n    \"id\": \"urn:oc:entity:london:enableiot:fixed:ICRI-QEOP-0002\",\n    \"type\": \"urn:oc:entityType:iotdevice\",\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-0.014934,51.547581\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Intel QeoP Deployments\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"NOT_APPLIED\",\n                \"value\": \"NOT_APPLIED\"\n            }\n        }\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://london.site.organicity.eu:8081/api/v1/entities\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:datatype:boolean\",\n                \"value\": \"true\"\n            }\n        }\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"ICRI-QEOP-0002active\",\n        \"metadata\": {}\n    },\n    \"10_Min_Avg_Wind_Speed\": {\n        \"type\": \"urn:oc:attributeType:windSpeed\",\n        \"value\": \"4.83\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Barometer\": {\n        \"type\": \"urn:oc:attributeType:atmosphericPressure\",\n        \"value\": \"771.9568\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Day_ET\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Day_Rain\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Inside_Humidity\": {\n        \"type\": \"urn:oc:attributeType:relativeHumidity\",\n        \"value\": \"0.34\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Inside_Temperature\": {\n        \"type\": \"urn:oc:attributeType:temperature:ambient\",\n        \"value\": \"28.72222\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Month_ET\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Month_Rain\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"1.05\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Outside_Humidity\": {\n        \"type\": \"urn:oc:attributeType:relativeHumidity\",\n        \"value\": \"0.71\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Outside_Temperature\": {\n        \"type\": \"urn:oc:attributeType:temperature:ambient\",\n        \"value\": \"13.61111\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Wind_Direction\": {\n        \"type\": \"urn:oc:attributeType:windDirection\",\n        \"value\": \"37.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Wind_Speed\": {\n        \"type\": \"urn:oc:attributeType:windSpeed\",\n        \"value\": \"11.27\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Year_ET\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"0.0\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    },\n    \"Year_Rain\": {\n        \"type\": \"urn:oc:attributeType:rainfall\",\n        \"value\": \"110.8\",\n        \"metadata\": {\n            \"datatype\": {\n                \"type\": \"urn:oc:datatype:numeric\",\n                \"value\": \"numeric\"\n            }\n        }\n    }\n}",
            "title": "Environmental Sensors - QEOP"
        },
        {
            "location": "/FederatedDataAssets/#santander",
            "text": "",
            "title": "Santander"
        },
        {
            "location": "/FederatedDataAssets/#traffic",
            "text": "",
            "title": "Traffic"
        },
        {
            "location": "/FederatedDataAssets/#traffic-cameras",
            "text": "Four traffic cameras in the city provide real time images about the status of the traffic in different areas of the city.  {\n    \"id\": \"urn:oc:entity:santander:traffic:camera:02\",\n    \"type\": \"urn:oc:entityType:camera\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-09T11:17:33.000Z\",\n        \"metadata\": {}\n    },\n    \"image\": {\n        \"type\": \"urn:oc:attributeType:image\",\n        \"value\": \"http://datos.santander.es/files/camara_castilla/castilla_20170109121732.jpg\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Castilla Hermida\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Santander City\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": \"-1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    }\n}",
            "title": "Traffic cameras."
        },
        {
            "location": "/FederatedDataAssets/#vehicle-count-sensors",
            "text": "Placed at the main entrance of the city, they provide information about the occupancy and traffic intensity in the different lanes of the main roads.  {\n    \"id\": \"urn:oc:entity:santander:traffic:fixed:3306\",\n    \"type\": \"urn:oc:entityType:iotdevice:vehicleCounter\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T09:15:07.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.82782, 43.4513]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"roadOccupancy\": {\n        \"type\": \"urn:oc:attributeType:speed:roadOccupancy\",\n        \"value\": 6.24,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:vehiclesPerMinute\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    },\n    \"trafficIntensity\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity\",\n        \"value\": 11,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:vehiclesPerMinute\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    }\n}",
            "title": "Vehicle count sensors"
        },
        {
            "location": "/FederatedDataAssets/#vehicle-speed-sensors_1",
            "text": "Placed at the main entrance of the city, they provide information about the occupancy, the count of vehicles, the median and average speed in the different lanes of the main roads.  {\n    \"id\": \"urn:oc:entity:santander:traffic:fixed:3305\",\n    \"type\": \"urn:oc:entityType:iotdevice:vehicleSpeed\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T09:08:09.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.83027, 43.4499]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"roadOccupancy\": {\n        \"type\": \"urn:oc:attributeType:speed:roadOccupancy\",\n        \"value\": 8.86,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:vehiclesPerMinute\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    },\n    \"speed:average\": {\n        \"type\": \"urn:oc:attributeType:speed:average\",\n        \"value\": 59.7,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:kilometrePerHour\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    },\n    \"speed:median\": {\n        \"type\": \"urn:oc:attributeType:speed:median\",\n        \"value\": 58,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:kilometrePerHour\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    },\n    \"trafficIntensity\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity\",\n        \"value\": 18,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:vehiclesPerMinute\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"Measurements calculated in the last minute\"\n            }\n        }\n    }\n}",
            "title": "Vehicle speed sensors"
        },
        {
            "location": "/FederatedDataAssets/#magnetic-loops",
            "text": "It provides real time information about the traffic intensity, the occupancy of the roads and the load, based on the measurements gathered by magnetic loops deployed along the city.  {\n    \"id\": \"urn:oc:entity:santander:traffic:magneticLoop:1001\",\n    \"type\": \"urn:oc:entityType:iotdevice:magneticLoop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T09:27:00.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.82959, 43.4536]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SICE\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"roadLoad\": {\n        \"type\": \"urn:oc:attributeType:roadLoad\",\n        \"value\": 9,\n        \"metadata\": {}\n    },\n    \"roadOccupancy\": {\n        \"type\": \"urn:oc:attributeType:roadOccupancy\",\n        \"value\": 3,\n        \"metadata\": {}\n    },\n    \"trafficIntensity\": {\n        \"type\": \"urn:oc:attributeType:trafficIntensity\",\n        \"value\": 180,\n        \"metadata\": {}\n    }\n}",
            "title": "Magnetic Loops"
        },
        {
            "location": "/FederatedDataAssets/#parking",
            "text": "",
            "title": "Parking"
        },
        {
            "location": "/FederatedDataAssets/#outdoor-parking",
            "text": "Real time information of available parking spots within zone 30. A set of 400 ferromagnetic sensors are placed under the asphalt in zone 30 of the Santander city centre, providing real time information about the status of occupancy of the different parking spots.  {\n    \"id\": \"urn:oc:entity:santander:parking:np3601\",\n    \"type\": \"urn:oc:entityType:iotdevice:parking\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T07:53:44.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.79897, 43.4631]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"presenceStatus:parking\": {\n        \"type\": \"urn:oc:attributeType:presenceStatus:parking\",\n        \"value\": \"true\",\n        \"metadata\": {\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"True means that the parking spot is occupied while false it is available\"\n            }\n        }\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    }\n}",
            "title": "Outdoor Parking"
        },
        {
            "location": "/FederatedDataAssets/#underground-car-parkings",
            "text": "{\n    \"id\": \"urn:oc:entity:santander:parking:underground:APAR4\",\n    \"type\": \"urn:oc:entityType:undergroundParking\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-12T10:16:00.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"extraSpotNumber\": {\n        \"type\": \"urn:oc:attributeType:extraSpotNumber\",\n        \"value\": 2,\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.81769, 43.4614]\n        },\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Parking de Numancia\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantanderRA\",\n        \"metadata\": {}\n    },\n    \"parkingDisposition\": {\n        \"type\": \"urn:oc:attributeType:parkingDisposition\",\n        \"value\": \"parallel\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"totalSpotNumber\": {\n        \"type\": \"urn:oc:attributeType:totalSpotNumber\",\n        \"value\": 244,\n        \"metadata\": {}\n    }\n}",
            "title": "Underground Car Parkings"
        },
        {
            "location": "/FederatedDataAssets/#parking-reserved-for-people-with-dissabilities",
            "text": "It provides information about the parking spots reserved for people with disabilities.   {\n    \"id\": \"urn:oc:entity:santander:parking:disabledpeople:51564\",\n    \"type\": \"urn:oc:entityType:parkingZone:disabledPeople\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-11T23:35:35.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.83885, 43.4625]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Santander OD\",\n        \"metadata\": {}\n    },\n    \"parkingspots:angled\": {\n        \"type\": \"urn:oc:attributeType:parkingspots:angled\",\n        \"value\": 0,\n        \"metadata\": {}\n    },\n    \"parkingspots:inline\": {\n        \"type\": \"urn:oc:attributeType:parkingspots:inline\",\n        \"value\": 1,\n        \"metadata\": {}\n    },\n    \"regulation\": {\n        \"type\": \"urn:oc:attributeType:regulation\",\n        \"value\": \"Libre\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"street:name\": {\n        \"type\": \"urn:oc:attributeType:street:name\",\n        \"value\": \"CL/ RAFAEL ALSUA\",\n        \"metadata\": {\n            \"detail\": {\n                \"type\": \"urn:oc:datatype:string\",\n                \"value\": \"Margen Norte del vial, junto al n\u00ba 17\"\n            }\n        }\n    }\n}",
            "title": "Parking reserved for people with dissabilities."
        },
        {
            "location": "/FederatedDataAssets/#load-and-unload-areas",
            "text": "{\n    \"id\": \"urn:oc:entity:santander:parking:loadunload:50949\",\n    \"type\": \"urn:oc:entity:parkingZone:loadunload\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-11T23:40:08.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-3.77824, 43.473]\n        },\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"Santander OD\",\n        \"metadata\": {}\n    },\n    \"parkingspots:angled\": {\n        \"type\": \"urn:oc:attributeType:parkingspots:angled\",\n        \"value\": 0,\n        \"metadata\": {}\n    },\n    \"parkingspots:inline\": {\n        \"type\": \"urn:oc:attributeType:parkingspots:inline\",\n        \"value\": 2,\n        \"metadata\": {}\n    },\n    \"regulation\": {\n        \"type\": \"urn:oc:attributeType:regulation\",\n        \"value\": \"Libre\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"serviceHours\": {\n        \"type\": \"urn:oc:attributeType:schedule\",\n        \"value\": \"DE 7 A 11,30 H\",\n        \"metadata\": {}\n    },\n    \"street:name\": {\n        \"type\": \"urn:oc:attributeType:street:name\",\n        \"value\": \"AV/ REINA VICTORIA\",\n        \"metadata\": {\n            \"detail\": {\n                \"type\": \"urn:oc:datatype:string\",\n                \"value\": \"RESERVA TRASLADADA DEL APARCAMIENTO INTERIOR.\"\n            }\n        }\n    }\n}",
            "title": "Load and unload areas"
        },
        {
            "location": "/FederatedDataAssets/#transport_1",
            "text": "",
            "title": "Transport"
        },
        {
            "location": "/FederatedDataAssets/#bus-stops",
            "text": "A set of 415 assets, one per bus stop in the city, have been created. Those assets provide real time information about next buses reaching the bus stop, including the distance to reach the bus stop as well as the estimated time of arrival for the first and second bus coming.  {\n    \"id\": \"urn:oc:entity:santander:publictransport:bus:stop:103\",\n    \"type\": \"urn:oc:entityType:busStop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-04T22:20:00.000Z\",\n        \"metadata\": {}\n    },\n    \"address\": {\n        \"type\": \"urn:oc:attributeType:address\",\n        \"value\": \"Plaza de las Estaciones S/N\",\n        \"metadata\": {}\n    },\n    \"bus:direction\": {\n        \"type\": \"urn:oc:attributeType:bus:direction\",\n        \"value\": \"B\u00ba Pesquero\",\n        \"metadata\": {}\n    },\n    \"bus:stopName\": {\n        \"type\": \"urn:oc:attributeType:bus:stopName\",\n        \"value\": \"Las Estaciones\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.8107700513716405,43.45908154114637\",\n        \"metadata\": {}\n    }\n}",
            "title": "Bus stops."
        },
        {
            "location": "/FederatedDataAssets/#bus-lines",
            "text": "{\n    \"id\": \"urn:oc:entity:santander:transport:bus:line:N3\",\n    \"type\": \"bus:line\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-03T00:00:00.000Z\",\n        \"metadata\": {}\n    },\n    \"lineNumber\": {\n        \"type\": \"urn:oc:attributeType:busLine:number\",\n        \"value\": \"N3\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:busLine:name\",\n        \"value\": \"PE\u00d1ACASTILLO-PLAZA DE ITALIA \",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"TUS Santander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": \"-1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    }\n}",
            "title": "Bus lines"
        },
        {
            "location": "/FederatedDataAssets/#taxi-stops",
            "text": "These assets provide real time information about taxi availability in each particular stop, based on the information provided by the fleet management systems deployed by the two taxi associations.  {\n    \"id\": \"urn:oc:entity:santander:transport:taxis:stop:1\",\n    \"type\": \"urn:oc:entityType:taxis:stop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-05T00:01:01.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.7886569,43.463448\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:taxis:stops:name\",\n        \"value\": \"SAN MARTIN\",\n        \"metadata\": {}\n    }\n}",
            "title": "Taxi stops."
        },
        {
            "location": "/FederatedDataAssets/#bike-stops",
            "text": "A set of 16 assets has been created, providing information about the number of available public-hire bikes and also the number of places to return such bikes.  {\n    \"id\": \"urn:oc:entity:santander:transport:bikestation:12\",\n    \"type\": \"urn:oc:entityType:bikeStop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-09T09:26:13.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"feeSpaces\": {\n        \"type\": \"urn:oc:attributeType:freeSpaces\",\n        \"value\": 9,\n        \"metadata\": {}\n    },\n    \"freeBikes\": {\n        \"type\": \"urn:oc:attributeType:freeBikes\",\n        \"value\": 6,\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.8248012423,43.4579662522\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"012_CALLE ALTA\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"TusBic\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    }\n}",
            "title": "Bike stops."
        },
        {
            "location": "/FederatedDataAssets/#districts-and-sections",
            "text": "",
            "title": "Districts and sections"
        },
        {
            "location": "/FederatedDataAssets/#districts",
            "text": "{\n    \"id\": \"urn:oc:entity:santander:districts:D03\",\n    \"type\": \"urn:oc:entityType:district\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-04T11:16:41.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [-3.79124, 43.4685],\n                    [-3.79199, 43.4686],\n                    [-3.79221, 43.4686],\n                    [-3.79238, 43.4686],\n                    [-3.79255, 43.4686],\n                    [-3.79263, 43.4686],\n                    [-3.79294, 43.4685],\n                    [-3.79343, 43.4685],\n                    [-3.79366, 43.4685],\n                    [-3.79414, 43.4685],\n                    [-3.79476, 43.4684],\n                    [-3.79521, 43.4684],\n                    [-3.79543, 43.4684],\n                    [-3.7956, 43.4684],\n                    [-3.7958, 43.4684],\n                    [-3.79623, 43.4685],\n                    [-3.79653, 43.4685],\n                    [-3.79665, 43.4685],\n                    [-3.79679, 43.4685],\n                    [-3.79701, 43.4685],\n                    [-3.79723, 43.4685],\n                    [-3.79752, 43.4685],\n                    [-3.79795, 43.4684],\n                    [-3.79886, 43.4684],\n                    [-3.79928, 43.4683],\n                    [-3.79947, 43.4683],\n                    [-3.79966, 43.4683],\n                    [-3.79994, 43.4682],\n                    [-3.80002, 43.4681],\n                    [-3.80114, 43.4678],\n                    [-3.80134, 43.4678],\n                    [-3.80174, 43.4677],\n                    [-3.80205, 43.4676],\n                    [-3.80219, 43.4676],\n                    [-3.80233, 43.4675],\n                    [-3.80265, 43.4675],\n                    [-3.80307, 43.4675],\n                    [-3.80348, 43.4675],\n                    [-3.80393, 43.4675],\n                    [-3.80426, 43.4675],\n                    [-3.80437, 43.4675],\n                    [-3.80476, 43.4675],\n                    [-3.80507, 43.4674],\n                    [-3.80528, 43.4674],\n                    [-3.80539, 43.4674],\n                    [-3.80571, 43.4674],\n                    [-3.80598, 43.4674],\n                    [-3.80612, 43.4673],\n                    [-3.80624, 43.4673],\n                    [-3.80653, 43.4673],\n                    [-3.80678, 43.4672],\n                    [-3.80692, 43.4672],\n                    [-3.80706, 43.4672],\n                    [-3.80719, 43.4672],\n                    [-3.80732, 43.4672],\n                    [-3.80794, 43.4673],\n                    [-3.80799, 43.4673],\n                    [-3.80818, 43.4674],\n                    [-3.80833, 43.4674],\n                    [-3.80909, 43.4675],\n                    [-3.80947, 43.4676],\n                    [-3.80973, 43.4676],\n                    [-3.80992, 43.4676],\n                    [-3.80995, 43.4676],\n                    [-3.81028, 43.4676],\n                    [-3.81341, 43.4676],\n                    [-3.81353, 43.4676],\n                    [-3.81377, 43.4676],\n                    [-3.81385, 43.4676],\n                    [-3.81372, 43.4675],\n                    [-3.81347, 43.4674],\n                    [-3.812, 43.4666],\n                    [-3.81198, 43.4666],\n                    [-3.81197, 43.4666],\n                    [-3.81197, 43.4665],\n                    [-3.81199, 43.4665],\n                    [-3.81202, 43.4665],\n                    [-3.81206, 43.4665],\n                    [-3.8121, 43.4665],\n                    [-3.81278, 43.4667],\n                    [-3.81284, 43.4667],\n                    [-3.81291, 43.4667],\n                    [-3.81296, 43.4666],\n                    [-3.813, 43.4666],\n                    [-3.81303, 43.4666],\n                    [-3.81303, 43.4665],\n                    [-3.81301, 43.4664],\n                    [-3.81297, 43.4664],\n                    [-3.81294, 43.4664],\n                    [-3.8129, 43.4664],\n                    [-3.8128, 43.4663],\n                    [-3.81222, 43.4662],\n                    [-3.81213, 43.4662],\n                    [-3.81204, 43.4662],\n                    [-3.81195, 43.4662],\n                    [-3.81185, 43.4662],\n                    [-3.81169, 43.4662],\n                    [-3.81162, 43.4662],\n                    [-3.81156, 43.4662],\n                    [-3.81153, 43.4661],\n                    [-3.81153, 43.4661],\n                    [-3.81156, 43.466],\n                    [-3.8116, 43.466],\n                    [-3.81166, 43.466],\n                    [-3.8119, 43.466],\n                    [-3.81195, 43.466],\n                    [-3.81199, 43.466],\n                    [-3.81202, 43.4659],\n                    [-3.81203, 43.4659],\n                    [-3.81202, 43.4659],\n                    [-3.812, 43.4658],\n                    [-3.81177, 43.4654],\n                    [-3.81161, 43.4652],\n                    [-3.81151, 43.465],\n                    [-3.81148, 43.465],\n                    [-3.81141, 43.4649],\n                    [-3.81126, 43.4647],\n                    [-3.81112, 43.4646],\n                    [-3.81106, 43.4645],\n                    [-3.811, 43.4644],\n                    [-3.81098, 43.4644],\n                    [-3.81101, 43.4643],\n                    [-3.81133, 43.4632],\n                    [-3.81133, 43.4632],\n                    [-3.81063, 43.4632],\n                    [-3.81069, 43.4637],\n                    [-3.81007, 43.4637],\n                    [-3.81005, 43.464],\n                    [-3.81002, 43.464],\n                    [-3.80997, 43.464],\n                    [-3.80877, 43.464],\n                    [-3.80875, 43.4637],\n                    [-3.80828, 43.4637],\n                    [-3.8078, 43.4637],\n                    [-3.80769, 43.4637],\n                    [-3.80621, 43.4637],\n                    [-3.80548, 43.4638],\n                    [-3.80546, 43.4638],\n                    [-3.80446, 43.4638],\n                    [-3.80418, 43.4639],\n                    [-3.804, 43.4639],\n                    [-3.80381, 43.4639],\n                    [-3.80375, 43.4639],\n                    [-3.80347, 43.464],\n                    [-3.80314, 43.4641],\n                    [-3.80287, 43.4641],\n                    [-3.80269, 43.4642],\n                    [-3.80265, 43.4642],\n                    [-3.80246, 43.4642],\n                    [-3.80235, 43.4642],\n                    [-3.80211, 43.4642],\n                    [-3.80185, 43.4643],\n                    [-3.80166, 43.4643],\n                    [-3.80133, 43.4643],\n                    [-3.80115, 43.4643],\n                    [-3.80103, 43.4643],\n                    [-3.80087, 43.4643],\n                    [-3.80073, 43.4643],\n                    [-3.8007, 43.4643],\n                    [-3.80025, 43.4643],\n                    [-3.79985, 43.4643],\n                    [-3.79958, 43.4644],\n                    [-3.79912, 43.4644],\n                    [-3.79861, 43.4644],\n                    [-3.79818, 43.4645],\n                    [-3.79791, 43.4645],\n                    [-3.79768, 43.4646],\n                    [-3.79738, 43.4646],\n                    [-3.7971, 43.4647],\n                    [-3.79683, 43.4647],\n                    [-3.79688, 43.4652],\n                    [-3.79682, 43.4653],\n                    [-3.79671, 43.4654],\n                    [-3.79646, 43.4654],\n                    [-3.796, 43.4654],\n                    [-3.79584, 43.4655],\n                    [-3.79571, 43.4655],\n                    [-3.79553, 43.4656],\n                    [-3.79536, 43.4656],\n                    [-3.79494, 43.4657],\n                    [-3.79473, 43.4658],\n                    [-3.79459, 43.4659],\n                    [-3.79435, 43.4659],\n                    [-3.79362, 43.466],\n                    [-3.79269, 43.4661],\n                    [-3.79255, 43.4661],\n                    [-3.7917, 43.4662],\n                    [-3.79167, 43.4662],\n                    [-3.79078, 43.4663],\n                    [-3.78731, 43.4665],\n                    [-3.7871, 43.4665],\n                    [-3.78709, 43.4666],\n                    [-3.78715, 43.467],\n                    [-3.78722, 43.4672],\n                    [-3.78734, 43.4674],\n                    [-3.78754, 43.4677],\n                    [-3.78776, 43.4679],\n                    [-3.78798, 43.468],\n                    [-3.7904, 43.4683],\n                    [-3.79124, 43.4685]\n                ]\n            ]\n        },\n        \"metadata\": {}\n    }\n}",
            "title": "Districts"
        },
        {
            "location": "/FederatedDataAssets/#sections",
            "text": "{\n    \"id\": \"urn:oc:entity:santander:sections:D07:S22\",\n    \"type\": \"section\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-05T13:21:07.000Z\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [-3.81032, 43.4696],\n                    [-3.81078, 43.4695],\n                    [-3.81128, 43.4694],\n                    [-3.81175, 43.4694],\n                    [-3.81226, 43.4693],\n                    [-3.81301, 43.4691],\n                    [-3.81383, 43.4689],\n                    [-3.81385, 43.4689],\n                    [-3.81385, 43.4689],\n                    [-3.81387, 43.4689],\n                    [-3.81353, 43.4686],\n                    [-3.81347, 43.4686],\n                    [-3.81342, 43.4685],\n                    [-3.8134, 43.4685],\n                    [-3.81339, 43.4685],\n                    [-3.81339, 43.4684],\n                    [-3.81341, 43.4679],\n                    [-3.8134, 43.4677],\n                    [-3.81341, 43.4676],\n                    [-3.81028, 43.4676],\n                    [-3.80995, 43.4676],\n                    [-3.80992, 43.4676],\n                    [-3.8102, 43.4684],\n                    [-3.81022, 43.4685],\n                    [-3.81021, 43.4686],\n                    [-3.81017, 43.4687],\n                    [-3.81011, 43.4688],\n                    [-3.80993, 43.4689],\n                    [-3.8098, 43.4691],\n                    [-3.80972, 43.4691],\n                    [-3.80967, 43.4692],\n                    [-3.80964, 43.4692],\n                    [-3.80964, 43.4692],\n                    [-3.80965, 43.4692],\n                    [-3.80966, 43.4692],\n                    [-3.80973, 43.4693],\n                    [-3.80983, 43.4694],\n                    [-3.80989, 43.4695],\n                    [-3.80991, 43.4696],\n                    [-3.81002, 43.4696],\n                    [-3.81032, 43.4696]\n                ]\n            ]\n        },\n        \"metadata\": {}\n    }\n}",
            "title": "Sections"
        },
        {
            "location": "/FederatedDataAssets/#pace-of-the-city-events",
            "text": "Events happening in the city that have been generated by citizens using the apps to report them. Mainly, PulsodelaCiudad and Cuida Santander Apps  {\n    \"id\": \"urn:oc:entity:santander:paceofthecity:event:7975\",\n    \"type\": \"city:event\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-22T08:59:59.000Z\",\n        \"metadata\": {}\n    },\n    \"eventText\": {\n        \"type\": \"urn:oc:attributeType:event:description\",\n        \"value\": \"Faltan dos bolardos que se han partido.  han quedado trozos por encima del raso de la acera,  con lo cual puede haber cortadas en los pies.\",\n        \"metadata\": {}\n    },\n    \"eventTitle\": {\n        \"type\": \"urn:oc:attributeType:event:name\",\n        \"value\": null,\n        \"metadata\": {}\n    },\n    \"eventType\": {\n        \"type\": \"urn:oc:attributeType:event:type\",\n        \"value\": \"VIA_PUBLICA\",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:imageURL\",\n        \"value\": \"http://farm9.staticflickr.com/8268/29711271953_c1b018c526.jpg\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.7963962,43.4701798\",\n        \"metadata\": {}\n    }\n}",
            "title": "Pace of the city events"
        },
        {
            "location": "/FederatedDataAssets/#tourismpoints-of-interest",
            "text": "",
            "title": "Tourism:Points of Interest"
        },
        {
            "location": "/FederatedDataAssets/#beaches",
            "text": "{\n    \"id\": \"urn:oc:santander:tourism:poi:beach:6\",\n    \"type\": \"poi:park\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-05T13:13:51.000Z\",\n        \"metadata\": {}\n    },\n    \"description:long\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"\",\n        \"metadata\": {}\n    },\n    \"description:short\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"Debe su nombre a la roca con esta forma que hay en la orilla\",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:imageURL\",\n        \"value\": \"http://ra.smartsantander.eu/images/playas/camello.jpg\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.7752789259,43.4694983127\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Playa de El Camello\",\n        \"metadata\": {}\n    }\n}",
            "title": "Beaches"
        },
        {
            "location": "/FederatedDataAssets/#park-and-gardens",
            "text": "{\n    \"id\": \"urn:oc:santander:tourism:poi:park:9\",\n    \"type\": \"poi:park\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2016-10-05T13:13:51.000Z\",\n        \"metadata\": {}\n    },\n    \"description:short\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"175.000 m2 de parque con ejemplares arb\u00f3reos destacados \",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:imageURL\",\n        \"value\": \"http://ra.smartsantander.eu/images/parques/ParqueMorales.jpg\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.8407950000,43.4557850000\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Parque Dr Morales\",\n        \"metadata\": {}\n    }\n}",
            "title": "Park and gardens"
        },
        {
            "location": "/FederatedDataAssets/#shops",
            "text": "More than 2000 assets have been created based on the information registered at Comercio Santander initiative. The list of assets is updated every day, so that, it can change during the experimentation period.   {\n    \"id\": \"urn:oc:santander:commerce:shops:2844\",\n    \"type\": \"poi:shop\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-02T11:49:32.000Z\",\n        \"metadata\": {}\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"Moda y complementos marca propia para mujer joven.\",\n        \"metadata\": {}\n    },\n    \"description:other\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"\",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:imageURL\",\n        \"value\": \"http://www.comerciosantander.com/imagenes/Comercios/ED407B6E-AB2E-E9B4-BD50-FC012F619733.jpg/resize/480/640/\",\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.812214499999982,43.4620188\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"SHIMAI\",\n        \"metadata\": {}\n    }\n}",
            "title": "Shops"
        },
        {
            "location": "/FederatedDataAssets/#cultural-agenda-events",
            "text": "Real time information to Santander Auna Events.   {\n    \"id\": \"urn:oc:entity:santander:culture:auna:23269\",\n    \"type\": \"agenda:event\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-02T01:50:41.000Z\",\n        \"metadata\": {}\n    },\n    \"category\": {\n        \"type\": \"urn:oc:attributeType:decription\",\n        \"value\": \"Formaci\u00f3n/Talleres\",\n        \"metadata\": {}\n    },\n    \"date\": {\n        \"type\": \"urn:oc:attributeType:event:date\",\n        \"value\": \"Lunes 02/01/2017, todo el d\u00eda. \",\n        \"metadata\": {}\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"Festival de cine independiente dirigido\u00c2 por el c\u00c3\u00a1ntabro Luis Bezeta con videocreaci\u00c3\u00b3n, ficci\u00c3\u00b3n,\u00c2 animaci\u00c3\u00b3n, performance y conciertos\",\n        \"metadata\": {}\n    },\n    \"imageURL\": {\n        \"type\": \"urn:oc:attributeType:url\",\n        \"value\": \"http://www.fundacionsantandercreativa.com/ekh2983gd29837gt_uploads/web_2/eventos_images/final/23269.jpg\",\n        \"metadata\": {}\n    },\n    \"link\": {\n        \"type\": \"urn:oc:attributeType:url\",\n        \"value\": \"http://www.fundacionsantandercreativa.com/mobile/index.php?evento%3Dinscripciones-para-el-curso-de-modelado-en-3d-con-blender\",\n        \"metadata\": {}\n    },\n    \"name\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"Inscripciones para el curso de Modelado en 3D con Blender\",\n        \"metadata\": {}\n    },\n    \"subname\": {\n        \"type\": \"urn:oc:attributeType:name\",\n        \"value\": \"IV Picnick Festival\",\n        \"metadata\": {}\n    }\n}",
            "title": "Cultural agenda events"
        },
        {
            "location": "/FederatedDataAssets/#news-in-the-city",
            "text": "News generated by the different areas of governance within the municipality.   {\n    \"id\": \"urn:oc:entity:santander:news:c35672836c31190ad2badb057cee6ad4\",\n    \"type\": \"urn:oc:entityType:news\",\n    \"date\": {\n        \"type\": \"urn:oc:attributeType:date\",\n        \"value\": \"08-09-2016 15:41\",\n        \"metadata\": {}\n    },\n    \"description\": {\n        \"type\": \"urn:oc:attributeType:description\",\n        \"value\": \"La imagen m\u00e1s ic\u00f3nica de la nueva exposici\u00f3n del centro es la fotograf\u00eda que se hicieron un grupo de artistas espa\u00f1oles en Roma con motivo de la visita que les hizo el escritor Pedro Antonio de Alarc\u00f3n en las Navidades de 1860\",\n        \"metadata\": {}\n    },\n    \"news:title\": {\n        \"type\": \"urn:oc:attributeType:title\",\n        \"value\": \"El CDIS recorre el proceso de formaci\u00f3n del artista a trav\u00e9s de la figura de Di\u00f3scoro Puebla\",\n        \"metadata\": {}\n    },\n    \"url\": {\n        \"type\": \"urn:oc:attributeType:url\",\n        \"value\": \"http://santander.es/noticia/cultura/cdis-recorre-proceso-formacion-del-artista-traves-figura-diascoro-puebla\",\n        \"metadata\": {}\n    }\n}",
            "title": "News in the city"
        },
        {
            "location": "/FederatedDataAssets/#environmental-sensors",
            "text": "",
            "title": "Environmental sensors"
        },
        {
            "location": "/FederatedDataAssets/#mobile-nodes",
            "text": "{\n    \"id\": \"urn:oc:entity:santander:environmental:mobile:3028\",\n    \"type\": \"urn:oc:entityType:mobileSensor\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-09T19:26:35.000Z\",\n        \"metadata\": {}\n    },\n    \"chemicalAgentAtmosphericConcentration:CO\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:CO\",\n        \"value\": 0.1,\n        \"metadata\": {}\n    },\n    \"chemicalAgentAtmosphericConcentration:O3\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:O3\",\n        \"value\": 79,\n        \"metadata\": {}\n    },\n    \"chemicalAgentAtmosphericConcentration:airParticles\": {\n        \"type\": \"urn:oc:attributeType:chemicalAgentAtmosphericConcentration:airParticles\",\n        \"value\": 0.09,\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"direction:heading\": {\n        \"type\": \"urn:oc:attributeType:direction:heading\",\n        \"value\": 87,\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.811630,43.461900\",\n        \"metadata\": {}\n    },\n    \"mileage:total\": {\n        \"type\": \"urn:oc:attributeType:mileage:total\",\n        \"value\": 18825,\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"position:altitude\": {\n        \"type\": \"urn:oc:attributeType:position:altitude\",\n        \"value\": 13,\n        \"metadata\": {}\n    },\n    \"relativeHumidity\": {\n        \"type\": \"urn:oc:attributeType:relativeHumidity\",\n        \"value\": 46,\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": -1,\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"speed:instantaneous\": {\n        \"type\": \"urn:oc:attributeType:speed:instantaneous\",\n        \"value\": 27,\n        \"metadata\": {}\n    },\n    \"temperature:ambient\": {\n        \"type\": \"urn:oc:attributeType:temperature:ambient\",\n        \"value\": 10.7,\n        \"metadata\": {}\n    }\n}",
            "title": "Mobile Nodes"
        },
        {
            "location": "/FederatedDataAssets/#noise-repeaters",
            "text": "{\n    \"id\": \"urn:oc:entity:santander:environmental:fixed:737\",\n    \"type\": \"urn:oc:entityType:repeater:noise\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2017-01-02T11:01:06.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.81289,43.45487\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": \"-1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"soundPressureLevel:ambient\": {\n        \"type\": \"urn:oc:attributeType:soundPressureLevel:ambient\",\n        \"value\": \"50.50\",\n        \"metadata\": {}\n    }\n }",
            "title": "Noise repeaters"
        },
        {
            "location": "/FederatedDataAssets/#luminosity-repeaters",
            "text": "{\n    \"id\": \"urn:oc:entity:santander:environmental:fixed:680\",\n    \"type\": \"urn:oc:entityType:repeater:luminosity\",\n    \"TimeInstant\": {\n        \"type\": \"ISO8601\",\n        \"value\": \"2013-04-05T11:20:19.000Z\",\n        \"metadata\": {}\n    },\n    \"datasource\": {\n        \"type\": \"urn:oc:attributeType:datasource\",\n        \"value\": \"http://mu.tlmat.unican.es:8098/\",\n        \"metadata\": {\n            \"datasourceInternal\": {\n                \"type\": \"urn:oc:dataType:boolean\",\n                \"value\": \"boolean\"\n            }\n        }\n    },\n    \"illuminance\": {\n        \"type\": \"urn:oc:attributeType:illuminance\",\n        \"value\": 3,\n        \"metadata\": {}\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"-3.82052,43.46023\",\n        \"metadata\": {}\n    },\n    \"origin\": {\n        \"type\": \"urn:oc:attributeType:origin\",\n        \"value\": \"SmartSantander\",\n        \"metadata\": {}\n    },\n    \"reputation\": {\n        \"type\": \"urn:oc:attributeType:reputation\",\n        \"value\": \"-1\",\n        \"metadata\": {\n            \"unit\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"urn:oc:uom:index\"\n            },\n            \"description\": {\n                \"type\": \"urn:oc:dataType:string\",\n                \"value\": \"The reputation scores vary from 0 to 1. -1 means that there is not scores already calculated\"\n            }\n        }\n    },\n    \"temperature:ambient\": {\n        \"type\": \"urn:oc:attributeType:temperature:ambient\",\n        \"value\": 4,\n        \"metadata\": {}\n    }\n}",
            "title": "luminosity repeaters"
        },
        {
            "location": "/AssetDiscoveryService/",
            "text": "Assets Discovery Service\n\n\nThe Asset Discovery API facilitates exploration and inspection of available assets.\n\n\nGeneral Information\n\n\nThis API aims to create the foundations for a novel urban data observatory in the form of a service that allow various stakeholders (data scientists, city decision makers, organisations and citizens) to explore, with the intent to act, mixed static and real-time urban and social data streams and their exploitation in experimentation.\n\n\nIt comprises the following functionalities:\n\n\n\n\nSearching and filtering assets using multiple options\n\n\nRetrieving information about: services, sites and providers\n\n\nRetrieving assets data\n\n\nRetrieving experiments and the associated assets\n\n\nSupport for \nGeoJSON\n\n\n\n\nThis API is the core engine of the \nOrganicity Urban Data Observatory\n and it is designed following the \nOASC\n principles, as an extension of the \nNGSI 9/10\n standard, specially following the new \nFIWARE-NGSI v2 Specification\n\n\nDocumentation\n\n\n\n\nAPI Documentation\n\n\nAPI Swagger Blueprint\n\n\n\n\nExamples\n\n\nHere you will find some examples showcasing the API possibilities using popular Javascript libraries. All the examples are available in \nCodepen collection\n\n\nSpatial queries: GeoJson and Leaflet\n\n\nBy using the \nAsset Discovery Spatial Search\n method we can quickly get assets data on \nGeoJSON\n format. This allows to quickly develop map vizualizations by using libraries as \nLeaflet\n\n\nThe API method\n\n\nGET https://discovery.organicity.eu/v0/assets/geo/search?city=london\n\n\n\n\nThe code example\n\n\nLook at the complete example in \nCodepen.io\n\n\nvar myMap = L.map('map');\nvar assetsLayer = new L.geoJson();\nassetsLayer.addTo(myMap);\n\nL.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {\n  id: 'mapbox.streets-basic',\n  accessToken: 'pk.eyJ1IjoidG9tYXNkaWV6IiwiYSI6ImRTd01HSGsifQ.loQdtLNQ8GJkJl2LUzzxVg'\n}).addTo(myMap);\n\n$.getJSON(\"https://discovery.organicity.eu/v0/assets/geo/search?city=london\", function(layers) {\n\n  $(layers).each(function(key, data) {\n    $(layers[key].features).each(function(key, data) {\n      console.log(data);\n      assetsLayer.addData(data);\n    });\n  });\n\n   myMap.fitBounds(assetsLayer.getBounds());\n\n});\n\n\n\n\nIncremental search: AngularJS and Material\n\n\nBy using the \nAsset Discovery Incremental Search\n method we can quickly search an asset by providing key words incrementally. This allows to quickly build search and filter functionalities with tools as \nAngular Material\n\n\nThe API method\n\n\nGET https://discovery.organicity.eu/v0/assets/metadata/search?query=some+text\n\n\n\n\nThe code example\n\n\nLook at the complete example in \nCodepen.io\n\n\n(function() {\n  'use strict';\n  angular\n    .module('MyApp')\n    .controller('IncrementalSearch', IncrementalSearch);\n\n  function IncrementalSearch($q, $log, $filter, $http) {\n    var vm = this;\n\n    vm.simulateQuery = true;\n    vm.querySearch = querySearch;\n    vm.selectedItemChange = selectedItemChange;\n    vm.assetsSelectedRemove = assetsSelectedRemove;\n    vm.assetsSelected = [];\n    vm.assetsLoaded = [];\n    vm.deferred = null;\n\n    function querySearch(query) {\n      vm.deferred = $q.defer();\n      var jsonquery = \"\";\n      if (query !== null && query !== \"\")\n        jsonquery = \"&query=\" + query.replace(/\\s/g,\"+\");\n      $http({\n        method: 'GET',\n        url: 'https://discovery.organicity.eu/v0/assets/metadata/search?' + jsonquery\n      }).then(\n        function successCallback(response) {\n          vm.deferred.resolve(vm.assetsLoaded = response.data);\n        },\n        function errorCallback(response) {});\n      return vm.deferred.promise;\n    }\n\n    function selectedItemChange(item) {\n      if (item) {\n        //check if item is already selected\n        if ($filter('filter')(vm.assetsSelected, function(d) {\n            return d.id === item.id;\n          })[0]) {} else {\n          //add id to object\n          vm.assetsSelected.push(item);\n        }\n        // clear search field\n        vm.searchText = '';\n        vm.selectedItem = undefined;\n\n        //somehow blur the autocomplete focus\n        $mdAutocompleteCtrl.blur();\n      }\n    }\n\n    function assetsSelectedRemove(item) {\n      var index = vm.assetsSelected.indexOf(item);\n      vm.assetsSelected.splice(index, 1);\n    }\n  }\n})();\n\n\n\n\n\n<div ng-controller=\"IncrementalSearch as searchAssets\" layout=\"column\" ng-cloak=\"\" ng-app=\"MyApp\">\n  <md-content class=\"md-padding\">\n    <p ng-repeat=\"asset in searchAssets.assetsSelected\">{{asset.id}}\n      <md-button class=\"md-raised md-warn\" ng-click=\"searchAssets.assetsSelectedRemove(asset)\">Remove</md-button>\n    </p>\n    <form ng-submit=\"$event.preventDefault()\">\n      <md-autocomplete md-min-length=\"3\" md-selected-item=\"searchAssets.selectedItem\" md-search-text=\"searchAssets.searchText\" md-selected-item-change=\"searchAssets.selectedItemChange(item)\" md-items=\"item in searchAssets.querySearch(searchAssets.searchText)\" md-item-text=\"item.id\" md-min-length=\"0\"\n        md-no-cache=\"true\" placeholder=\"Search assets...\">\n        <md-item-template>\n          <strong md-highlight-text=\"searchAssets.searchText\" md-highlight-flags=\"^i\">{{item.id}}\n          </strong>\n        </md-item-template>\n        <md-not-found>\n          No asset matching \"{{searchAssets.searchText}}\" was found.\n        </md-not-found>\n      </md-autocomplete>\n    </form>\n  </md-content>\n</div>\n\n\n\n\nSites and assets: D3.js treeview\n\n\nBy using the \nAsset Discovery Site Filter\n method we can quickly retrieve assets from an specific site. This allows to quickly build exploration tools for an specific site using tools as \nD3.js\n\n\nThe API method\n\n\nGET https://discovery.organicity.eu/v0/assets/sites/london?per=10000\n\n\n\n\nThe code example\n\n\nLook at the complete example in \nCodepen.io\n\n\nvar margin = {\n    top: 40,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n  width = 960 - margin.left - margin.right,\n  height = 500 - margin.top - margin.bottom;\n\nvar color = d3.scale.category20c();\n\nvar treemap = d3.layout.treemap()\n  .size([width, height])\n  .sticky(true)\n  .value(function(d) {\n    return d.size;\n  });\n\nvar div = d3.select(\"body\").append(\"div\")\n  .style(\"position\", \"relative\")\n  .style(\"width\", (width + margin.left + margin.right) + \"px\")\n  .style(\"height\", (height + margin.top + margin.bottom) + \"px\")\n  .style(\"left\", margin.left + \"px\")\n  .style(\"top\", margin.top + \"px\");\n\nd3.json(\"https://discovery.organicity.eu/v0/assets/sites/london?per=100\", function(error, data) {\n  if (error) throw error;\n  var assetTypes = [];\n  data.forEach(function(asset) {\n    assetTypes.push(asset.type);\n  })\n  assetTypes = new Set(assetTypes);\n  var newAssets = {\n    name: \"london\",\n    children: []\n  };\n  assetTypes.forEach(function(type) {\n    var typeChilds = {\n      name: type,\n      children: []\n    }\n    data.forEach(function(asset) {\n      if (asset.type == type)\n        typeChilds.children.push({\n          name: asset.id,\n          size: asset.context.last_updated_at\n        });\n    })\n    newAssets.children.push(typeChilds);\n  })\n  console.log(newAssets);\n  var node = div.datum(newAssets).selectAll(\".node\")\n    .data(treemap.nodes)\n    .enter().append(\"div\")\n    .attr(\"class\", \"node\")\n    .call(position)\n    .style(\"background\", function(d) {\n      return d.children ? color(d.name) : null;\n    })\n    .html(function(d) {\n      return d.children ? null : '<a target=\"_blank\" href=\"https://discovery.organicity.eu/v0/assets/' + d.name + '\"/>' + d.name + '</a>';\n    })\n    .on(\"mouseover\", function(d) {\n      d3.selectAll(\".name\").html(d.name)\n    })\n    .on(\"mouseout\", function(d) {\n      d3.selectAll(\".name\").html('No asset selected...')\n    });;\n\n  d3.selectAll(\"input\").on(\"change\", function change() {\n    var value = this.value === \"count\" ?\n\n      function() {\n        return 1;\n      } :\n      function(d) {\n        return d.size;\n      };\n\n    node\n      .data(treemap.value(value).nodes)\n      .transition()\n      .duration(1500)\n      .call(position);\n  });\n});\n\nfunction position() {\n  this.style(\"left\", function(d) {\n      return d.x + \"px\";\n    })\n    .style(\"top\", function(d) {\n      return d.y + \"px\";\n    })\n    .style(\"width\", function(d) {\n      return Math.max(0, d.dx - 1) + \"px\";\n    })\n    .style(\"height\", function(d) {\n      return Math.max(0, d.dy - 1) + \"px\";\n    });\n}\n\n\n\n\n<div class=\"name\"></div>\n<form>\n  <label><input type=\"radio\" name=\"mode\" value=\"size\" checked> Last updated</label>\n  <label><input type=\"radio\" name=\"mode\" value=\"count\"> Count</label>\n</form>\n\n\n\n\nStatus",
            "title": "Asset Discovery Service"
        },
        {
            "location": "/AssetDiscoveryService/#assets-discovery-service",
            "text": "The Asset Discovery API facilitates exploration and inspection of available assets.",
            "title": "Assets Discovery Service"
        },
        {
            "location": "/AssetDiscoveryService/#general-information",
            "text": "This API aims to create the foundations for a novel urban data observatory in the form of a service that allow various stakeholders (data scientists, city decision makers, organisations and citizens) to explore, with the intent to act, mixed static and real-time urban and social data streams and their exploitation in experimentation.  It comprises the following functionalities:   Searching and filtering assets using multiple options  Retrieving information about: services, sites and providers  Retrieving assets data  Retrieving experiments and the associated assets  Support for  GeoJSON   This API is the core engine of the  Organicity Urban Data Observatory  and it is designed following the  OASC  principles, as an extension of the  NGSI 9/10  standard, specially following the new  FIWARE-NGSI v2 Specification",
            "title": "General Information"
        },
        {
            "location": "/AssetDiscoveryService/#documentation",
            "text": "API Documentation  API Swagger Blueprint",
            "title": "Documentation"
        },
        {
            "location": "/AssetDiscoveryService/#examples",
            "text": "Here you will find some examples showcasing the API possibilities using popular Javascript libraries. All the examples are available in  Codepen collection",
            "title": "Examples"
        },
        {
            "location": "/AssetDiscoveryService/#spatial-queries-geojson-and-leaflet",
            "text": "By using the  Asset Discovery Spatial Search  method we can quickly get assets data on  GeoJSON  format. This allows to quickly develop map vizualizations by using libraries as  Leaflet  The API method  GET https://discovery.organicity.eu/v0/assets/geo/search?city=london  The code example  Look at the complete example in  Codepen.io  var myMap = L.map('map');\nvar assetsLayer = new L.geoJson();\nassetsLayer.addTo(myMap);\n\nL.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {\n  id: 'mapbox.streets-basic',\n  accessToken: 'pk.eyJ1IjoidG9tYXNkaWV6IiwiYSI6ImRTd01HSGsifQ.loQdtLNQ8GJkJl2LUzzxVg'\n}).addTo(myMap);\n\n$.getJSON(\"https://discovery.organicity.eu/v0/assets/geo/search?city=london\", function(layers) {\n\n  $(layers).each(function(key, data) {\n    $(layers[key].features).each(function(key, data) {\n      console.log(data);\n      assetsLayer.addData(data);\n    });\n  });\n\n   myMap.fitBounds(assetsLayer.getBounds());\n\n});",
            "title": "Spatial queries: GeoJson and Leaflet"
        },
        {
            "location": "/AssetDiscoveryService/#incremental-search-angularjs-and-material",
            "text": "By using the  Asset Discovery Incremental Search  method we can quickly search an asset by providing key words incrementally. This allows to quickly build search and filter functionalities with tools as  Angular Material  The API method  GET https://discovery.organicity.eu/v0/assets/metadata/search?query=some+text  The code example  Look at the complete example in  Codepen.io  (function() {\n  'use strict';\n  angular\n    .module('MyApp')\n    .controller('IncrementalSearch', IncrementalSearch);\n\n  function IncrementalSearch($q, $log, $filter, $http) {\n    var vm = this;\n\n    vm.simulateQuery = true;\n    vm.querySearch = querySearch;\n    vm.selectedItemChange = selectedItemChange;\n    vm.assetsSelectedRemove = assetsSelectedRemove;\n    vm.assetsSelected = [];\n    vm.assetsLoaded = [];\n    vm.deferred = null;\n\n    function querySearch(query) {\n      vm.deferred = $q.defer();\n      var jsonquery = \"\";\n      if (query !== null && query !== \"\")\n        jsonquery = \"&query=\" + query.replace(/\\s/g,\"+\");\n      $http({\n        method: 'GET',\n        url: 'https://discovery.organicity.eu/v0/assets/metadata/search?' + jsonquery\n      }).then(\n        function successCallback(response) {\n          vm.deferred.resolve(vm.assetsLoaded = response.data);\n        },\n        function errorCallback(response) {});\n      return vm.deferred.promise;\n    }\n\n    function selectedItemChange(item) {\n      if (item) {\n        //check if item is already selected\n        if ($filter('filter')(vm.assetsSelected, function(d) {\n            return d.id === item.id;\n          })[0]) {} else {\n          //add id to object\n          vm.assetsSelected.push(item);\n        }\n        // clear search field\n        vm.searchText = '';\n        vm.selectedItem = undefined;\n\n        //somehow blur the autocomplete focus\n        $mdAutocompleteCtrl.blur();\n      }\n    }\n\n    function assetsSelectedRemove(item) {\n      var index = vm.assetsSelected.indexOf(item);\n      vm.assetsSelected.splice(index, 1);\n    }\n  }\n})();  <div ng-controller=\"IncrementalSearch as searchAssets\" layout=\"column\" ng-cloak=\"\" ng-app=\"MyApp\">\n  <md-content class=\"md-padding\">\n    <p ng-repeat=\"asset in searchAssets.assetsSelected\">{{asset.id}}\n      <md-button class=\"md-raised md-warn\" ng-click=\"searchAssets.assetsSelectedRemove(asset)\">Remove</md-button>\n    </p>\n    <form ng-submit=\"$event.preventDefault()\">\n      <md-autocomplete md-min-length=\"3\" md-selected-item=\"searchAssets.selectedItem\" md-search-text=\"searchAssets.searchText\" md-selected-item-change=\"searchAssets.selectedItemChange(item)\" md-items=\"item in searchAssets.querySearch(searchAssets.searchText)\" md-item-text=\"item.id\" md-min-length=\"0\"\n        md-no-cache=\"true\" placeholder=\"Search assets...\">\n        <md-item-template>\n          <strong md-highlight-text=\"searchAssets.searchText\" md-highlight-flags=\"^i\">{{item.id}}\n          </strong>\n        </md-item-template>\n        <md-not-found>\n          No asset matching \"{{searchAssets.searchText}}\" was found.\n        </md-not-found>\n      </md-autocomplete>\n    </form>\n  </md-content>\n</div>",
            "title": "Incremental search: AngularJS and Material"
        },
        {
            "location": "/AssetDiscoveryService/#sites-and-assets-d3js-treeview",
            "text": "By using the  Asset Discovery Site Filter  method we can quickly retrieve assets from an specific site. This allows to quickly build exploration tools for an specific site using tools as  D3.js  The API method  GET https://discovery.organicity.eu/v0/assets/sites/london?per=10000  The code example  Look at the complete example in  Codepen.io  var margin = {\n    top: 40,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n  width = 960 - margin.left - margin.right,\n  height = 500 - margin.top - margin.bottom;\n\nvar color = d3.scale.category20c();\n\nvar treemap = d3.layout.treemap()\n  .size([width, height])\n  .sticky(true)\n  .value(function(d) {\n    return d.size;\n  });\n\nvar div = d3.select(\"body\").append(\"div\")\n  .style(\"position\", \"relative\")\n  .style(\"width\", (width + margin.left + margin.right) + \"px\")\n  .style(\"height\", (height + margin.top + margin.bottom) + \"px\")\n  .style(\"left\", margin.left + \"px\")\n  .style(\"top\", margin.top + \"px\");\n\nd3.json(\"https://discovery.organicity.eu/v0/assets/sites/london?per=100\", function(error, data) {\n  if (error) throw error;\n  var assetTypes = [];\n  data.forEach(function(asset) {\n    assetTypes.push(asset.type);\n  })\n  assetTypes = new Set(assetTypes);\n  var newAssets = {\n    name: \"london\",\n    children: []\n  };\n  assetTypes.forEach(function(type) {\n    var typeChilds = {\n      name: type,\n      children: []\n    }\n    data.forEach(function(asset) {\n      if (asset.type == type)\n        typeChilds.children.push({\n          name: asset.id,\n          size: asset.context.last_updated_at\n        });\n    })\n    newAssets.children.push(typeChilds);\n  })\n  console.log(newAssets);\n  var node = div.datum(newAssets).selectAll(\".node\")\n    .data(treemap.nodes)\n    .enter().append(\"div\")\n    .attr(\"class\", \"node\")\n    .call(position)\n    .style(\"background\", function(d) {\n      return d.children ? color(d.name) : null;\n    })\n    .html(function(d) {\n      return d.children ? null : '<a target=\"_blank\" href=\"https://discovery.organicity.eu/v0/assets/' + d.name + '\"/>' + d.name + '</a>';\n    })\n    .on(\"mouseover\", function(d) {\n      d3.selectAll(\".name\").html(d.name)\n    })\n    .on(\"mouseout\", function(d) {\n      d3.selectAll(\".name\").html('No asset selected...')\n    });;\n\n  d3.selectAll(\"input\").on(\"change\", function change() {\n    var value = this.value === \"count\" ?\n\n      function() {\n        return 1;\n      } :\n      function(d) {\n        return d.size;\n      };\n\n    node\n      .data(treemap.value(value).nodes)\n      .transition()\n      .duration(1500)\n      .call(position);\n  });\n});\n\nfunction position() {\n  this.style(\"left\", function(d) {\n      return d.x + \"px\";\n    })\n    .style(\"top\", function(d) {\n      return d.y + \"px\";\n    })\n    .style(\"width\", function(d) {\n      return Math.max(0, d.dx - 1) + \"px\";\n    })\n    .style(\"height\", function(d) {\n      return Math.max(0, d.dy - 1) + \"px\";\n    });\n}  <div class=\"name\"></div>\n<form>\n  <label><input type=\"radio\" name=\"mode\" value=\"size\" checked> Last updated</label>\n  <label><input type=\"radio\" name=\"mode\" value=\"count\"> Count</label>\n</form>",
            "title": "Sites and assets: D3.js treeview"
        },
        {
            "location": "/AssetDiscoveryService/#status",
            "text": "",
            "title": "Status"
        },
        {
            "location": "/annotations/AssetAnnotationService/",
            "text": "Asset Annotation Service\n\n\n\nimg[src$=\"centerme\"] {\n  display:block;\n  margin: 0 auto;\n}\n\n\n\n\nThe \nAsset Annotation Service\n (\nAS\n) allows experimenters, site managers and users of the OrganiCity facility to add annotations on top of all assets of the platform. The annotation process follows the \ntagging\n scheme used in many social networks to indicate the characteristics of the assets identified. To do this, users can use either one of the available web interfaces available in the context of OrganiCity or the API of the service. The annotations added to all assets of OrganiCity are available through the API of the service for experimenters to use and through the interfaces of OrganiCity for the users to browse. \n\n\nAiming at enhancing the urban data sources with useful information, OrganiCity developed this service to enable collaborative data annotation in the smart city context. The utilized data model and annotation services are flexible enough to enable various types of labels from online resources on the Web, social media and references to rich multimedia content online (images, video, etc.)  to free-text labels or numeric values. A set of methods has been created for maintaining dynamic label categories, labels, and labeling of data.\n\n\nSince the UDO is the main view of OrganiCity it provides a starting point for exploration of urban data across different city environments based on their \nAnnotations\n and a perfect starting point for the generation of knowledge from the raw data streams.\n\n\nAccessing data stored in the \nAS\n can be limited to the OrganiCity Experiment level if needed. Additionally, OrganiCity Experimenters can access the generated annotations that are part of their experiment or all the data stored in the OrganiCity facility.\n\n\n\n\n\nReferences to the specification of the \nAS\n:\n\n\n\n\nAnnotation Service Endpoint\n\n\nAnnotation Service API Swagger\n\n\n\n\nData Model\n\n\nIn the rest of this section, we are going to present and describe the models used for annotating \nAssets\n in the context of OrganiCity.\n\n\nThe entities that are in involved in the creation of annotations are the following:\n\n\n\n\nAssets\n are the assets of the OrganiCity facility that can be annotated. \nAll Assets must exist beforehand in OrganiCity to be annotated using the \nAS\n.\n\n\nTagDomains\n represent collections of \nTags\n. Usually a \nTagDomain\n is associated with one or more \nServices\n or an \nExperiment\n to specify which \nTagDomains\n are used in their context.\n\n\nTags\n represent the actual labels to be used by end-user to annotate an \nAsset\n\n\nServices\n represent utilities or urban services deployed by the OrganiCity sites. An example of a service might be \nGarbage Collection\n as site \nService\n or \nNoise Monitoring\n as a general context in the scope of OrganiCity. The basic usage of service entities is the organization and discovery of \nTag\n collections (e.g. what tags are usually used for characterizing the \nnoise level sensors\n)\n\n\nExperiments\n represent the \nTagDomain\n collections created by users during their OrganiCity \nExperiments\n. They can be used to limit access to the created \nTagDomains\n. \nExperiments\n are created automatically by the \nAS\n when \nExperiments\n are created from the \nExperimenter's Portal\n \n\n\n\n\n\n\nThe above image shows how 2 \nAssets\n of the OrganiCity facility are \nannotated\n with 2 \nTags\n of a single \nTagDomain\n describing traffic in an OrganiCity site. \n\n\n\n\nSimilarly, this image shows how a single \nExperiment\n uses a \nTagDomain\n provided by the OrganiCity facility that provides a simple and generic 3 level categorization \nhigh\n,\nmedium\n and \nlow\n.\n\n\n\n\nFinally, this image shows how a single \nTagDomain\n is used by two Sites in their basic Annotation Services (\nPatras\n and \nLondon\n). The \nTagDomain\n presented has 3 \nTags\n to describe the \nsun light levels\n in the city.\n\n\nBased on the roles of users in the OrganiCity facility a set of restrictions on accessing and using the \nAS\n apply and can be summed up in the following list:\n\n\n\n\nOC Admins (OC-A):\n\n\ncan create, read, update and delete (CRUD) \nService\n, \nTagDomain\n, \nTag\n, \nExperiments\n and \nAnnotations\n \n\n\n\n\n\n\nOC Experimenter (OC-E):\n\n\ncan only Read  \nServices\n, \nTagDomains\n, \nTags\n and \nAnnotations\n that are public\n\n\nCRUD the \nTagDomains\n, and \nTags\n that are involved in their experiment\n\n\ncan CRUD all annotations of the experiments managed\n\n\n\n\n\n\nOC Participant (OC-P):\n\n\ncan only Read \nService\n, \nTagDomain\n,  \nTag\n entities and \nAnnotations\n that are public\n\n\ncan CRUD the annotations created using their credentials\n\n\n\n\n\n\nOC Anonymous (OC-AN)\n\n\ncan only Read  \nServices\n, \nTagDomains\n, \nTags\n and \nAnnotations\n that are public\n\n\ncan only Create public \nAnnotations\n\n\n\n\n\n\n\n\nEntity Descriptions\n\n\nThe parameters of the entities described above are presented in the following subsections:\n\n\nTag\n\n\n{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"urn\": \"string\"\n}\n\n\n\n\nExample:\n\n\n{\n    id: 106,\n    urn: \"urn:tag:faulty\",\n    name: \"faulty reading\"\n}\n\n\n\n\nTagDomain\n\n\n{\n\"description\": \"string\",\n\"id\": 0,\n\"urn\": \"string\",\n\"services\": [\n    {\n        \"description\": \"string\",\n        \"id\": 0,\n        \"urn\": \"string\",\n              \"user\":\"string\"\n    }\n ],\n \"tags\": [\n    {\n    \"id\": 0,\n       \"name\": \"string\",\n       \"urn\": \"string\"\n    }\n ]\n}\n\n\n\n\nExample:\n\n\n  {\n  id: 104,\n  urn: \"urn:tagDomain:faultyReadings\",\n  description: \"This is tag domain to classify readings into faulty or normal\",\n  tags: [\n      {\n          id: 106,\n          urn: \"urn:tag:faulty\",\n          name: faulty reading\n      },\n      {\n          id: 105,\n          urn: \"urn:tag:normal\",\n          name: \"normal reading\"\n      }\n   ],\n  services: [\n      {\n          id: 107,\n          urn: \"urn:service:environmentalMonitoring\",\n          description: \"environmental monitoring\",\n          user:\"372f3a46-0596-41cf-a038-a2845f06eb24\"\n      }\n   ]\n  }\n\n\n\n\nService\n\n\n{\n    \"description\": \"string\",\n    \"id\": 0,\n    \"urn\": \"string\",\n    \"user\":\"string\"\n}\n\n\n\n\nExample:\n\n\n{\n    id: 107,\n    urn: \"urn:service:environmentalMonitoring\",\n    description: \"environmental monitoring\",\n    user:\"372f3a46-0596-41cf-a038-a2845f06eb24\"\n}\n\n\n\n\nExperiment\n\n\n{\n    \"description\": \"string\",\n    \"id\": 0,\n    \"tagDomains\": [\n        {\n          \"description\": \"string\",\n          \"id\": 0,\n          \"services\": [\n            {\n              \"description\": \"string\",\n              \"id\": 0,\n              \"urn\": \"string\",\n              \"user\": \"string\"\n            }\n          ],\n          \"tags\": [\n            {\n              \"id\": 0,\n              \"name\": \"string\",\n              \"urn\": \"string\",\n              \"user\": \"string\"\n            }\n          ],\n          \"urn\": \"string\",\n          \"user\": \"string\"\n        }\n      ],\n    \"urn\": \"string\",\n    \"user\": \"string\"\n}\n\n\n\n\nAnnotation\n\n\n{\n    \"annotationId\": 0,\n    \"application\": \"string\",\n    \"assetUrn\": \"string\",\n    \"datetime\": \"string\",\n    \"numericValue\": 0,\n    \"tagUrn\": \"string\",\n    \"textValue\": \"string\",\n    \"user\": \"string\"\n}\n\n\n\n\nExample:\n\n\n{\n    \"annotationId\": 0,\n    \"application\": \"57eab2c2ad0302ad0b5c92c6\",\n    \"assetUrn\": \"urn:oc:entity:london:enableiot:fixed:98-4F-EE-00-0F-76\",\n    \"datetime\": \"2016-10-21 09:01:12:123\",\n    \"numericValue\": 0,\n    \"tagUrn\": \"urn:tag:faulty\",\n    \"textValue\": \"string\",\n    \"user\": \"86d7edce-5092-44c0-bed8-da4beaa3fbc6\"\n}\n\n\n\n\nTutorials\n\n\nFor more information about how to interact with the \nAsset Annotation Service\n you can check out the following tutorials:\n\n\n\n\nHow to Create Annotation Tags\n\n\nHow To Annotate An Asset",
            "title": "Asset Annotation Service"
        },
        {
            "location": "/annotations/AssetAnnotationService/#asset-annotation-service",
            "text": "img[src$=\"centerme\"] {\n  display:block;\n  margin: 0 auto;\n}  The  Asset Annotation Service  ( AS ) allows experimenters, site managers and users of the OrganiCity facility to add annotations on top of all assets of the platform. The annotation process follows the  tagging  scheme used in many social networks to indicate the characteristics of the assets identified. To do this, users can use either one of the available web interfaces available in the context of OrganiCity or the API of the service. The annotations added to all assets of OrganiCity are available through the API of the service for experimenters to use and through the interfaces of OrganiCity for the users to browse.   Aiming at enhancing the urban data sources with useful information, OrganiCity developed this service to enable collaborative data annotation in the smart city context. The utilized data model and annotation services are flexible enough to enable various types of labels from online resources on the Web, social media and references to rich multimedia content online (images, video, etc.)  to free-text labels or numeric values. A set of methods has been created for maintaining dynamic label categories, labels, and labeling of data.  Since the UDO is the main view of OrganiCity it provides a starting point for exploration of urban data across different city environments based on their  Annotations  and a perfect starting point for the generation of knowledge from the raw data streams.  Accessing data stored in the  AS  can be limited to the OrganiCity Experiment level if needed. Additionally, OrganiCity Experimenters can access the generated annotations that are part of their experiment or all the data stored in the OrganiCity facility.   References to the specification of the  AS :   Annotation Service Endpoint  Annotation Service API Swagger",
            "title": "Asset Annotation Service"
        },
        {
            "location": "/annotations/AssetAnnotationService/#data-model",
            "text": "In the rest of this section, we are going to present and describe the models used for annotating  Assets  in the context of OrganiCity.  The entities that are in involved in the creation of annotations are the following:   Assets  are the assets of the OrganiCity facility that can be annotated.  All Assets must exist beforehand in OrganiCity to be annotated using the  AS .  TagDomains  represent collections of  Tags . Usually a  TagDomain  is associated with one or more  Services  or an  Experiment  to specify which  TagDomains  are used in their context.  Tags  represent the actual labels to be used by end-user to annotate an  Asset  Services  represent utilities or urban services deployed by the OrganiCity sites. An example of a service might be  Garbage Collection  as site  Service  or  Noise Monitoring  as a general context in the scope of OrganiCity. The basic usage of service entities is the organization and discovery of  Tag  collections (e.g. what tags are usually used for characterizing the  noise level sensors )  Experiments  represent the  TagDomain  collections created by users during their OrganiCity  Experiments . They can be used to limit access to the created  TagDomains .  Experiments  are created automatically by the  AS  when  Experiments  are created from the  Experimenter's Portal      The above image shows how 2  Assets  of the OrganiCity facility are  annotated  with 2  Tags  of a single  TagDomain  describing traffic in an OrganiCity site.    Similarly, this image shows how a single  Experiment  uses a  TagDomain  provided by the OrganiCity facility that provides a simple and generic 3 level categorization  high , medium  and  low .   Finally, this image shows how a single  TagDomain  is used by two Sites in their basic Annotation Services ( Patras  and  London ). The  TagDomain  presented has 3  Tags  to describe the  sun light levels  in the city.  Based on the roles of users in the OrganiCity facility a set of restrictions on accessing and using the  AS  apply and can be summed up in the following list:   OC Admins (OC-A):  can create, read, update and delete (CRUD)  Service ,  TagDomain ,  Tag ,  Experiments  and  Annotations      OC Experimenter (OC-E):  can only Read   Services ,  TagDomains ,  Tags  and  Annotations  that are public  CRUD the  TagDomains , and  Tags  that are involved in their experiment  can CRUD all annotations of the experiments managed    OC Participant (OC-P):  can only Read  Service ,  TagDomain ,   Tag  entities and  Annotations  that are public  can CRUD the annotations created using their credentials    OC Anonymous (OC-AN)  can only Read   Services ,  TagDomains ,  Tags  and  Annotations  that are public  can only Create public  Annotations",
            "title": "Data Model"
        },
        {
            "location": "/annotations/AssetAnnotationService/#entity-descriptions",
            "text": "The parameters of the entities described above are presented in the following subsections:",
            "title": "Entity Descriptions"
        },
        {
            "location": "/annotations/AssetAnnotationService/#tag",
            "text": "{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"urn\": \"string\"\n}  Example:  {\n    id: 106,\n    urn: \"urn:tag:faulty\",\n    name: \"faulty reading\"\n}",
            "title": "Tag"
        },
        {
            "location": "/annotations/AssetAnnotationService/#tagdomain",
            "text": "{\n\"description\": \"string\",\n\"id\": 0,\n\"urn\": \"string\",\n\"services\": [\n    {\n        \"description\": \"string\",\n        \"id\": 0,\n        \"urn\": \"string\",\n              \"user\":\"string\"\n    }\n ],\n \"tags\": [\n    {\n    \"id\": 0,\n       \"name\": \"string\",\n       \"urn\": \"string\"\n    }\n ]\n}  Example:    {\n  id: 104,\n  urn: \"urn:tagDomain:faultyReadings\",\n  description: \"This is tag domain to classify readings into faulty or normal\",\n  tags: [\n      {\n          id: 106,\n          urn: \"urn:tag:faulty\",\n          name: faulty reading\n      },\n      {\n          id: 105,\n          urn: \"urn:tag:normal\",\n          name: \"normal reading\"\n      }\n   ],\n  services: [\n      {\n          id: 107,\n          urn: \"urn:service:environmentalMonitoring\",\n          description: \"environmental monitoring\",\n          user:\"372f3a46-0596-41cf-a038-a2845f06eb24\"\n      }\n   ]\n  }",
            "title": "TagDomain"
        },
        {
            "location": "/annotations/AssetAnnotationService/#service",
            "text": "{\n    \"description\": \"string\",\n    \"id\": 0,\n    \"urn\": \"string\",\n    \"user\":\"string\"\n}  Example:  {\n    id: 107,\n    urn: \"urn:service:environmentalMonitoring\",\n    description: \"environmental monitoring\",\n    user:\"372f3a46-0596-41cf-a038-a2845f06eb24\"\n}",
            "title": "Service"
        },
        {
            "location": "/annotations/AssetAnnotationService/#experiment",
            "text": "{\n    \"description\": \"string\",\n    \"id\": 0,\n    \"tagDomains\": [\n        {\n          \"description\": \"string\",\n          \"id\": 0,\n          \"services\": [\n            {\n              \"description\": \"string\",\n              \"id\": 0,\n              \"urn\": \"string\",\n              \"user\": \"string\"\n            }\n          ],\n          \"tags\": [\n            {\n              \"id\": 0,\n              \"name\": \"string\",\n              \"urn\": \"string\",\n              \"user\": \"string\"\n            }\n          ],\n          \"urn\": \"string\",\n          \"user\": \"string\"\n        }\n      ],\n    \"urn\": \"string\",\n    \"user\": \"string\"\n}",
            "title": "Experiment"
        },
        {
            "location": "/annotations/AssetAnnotationService/#annotation",
            "text": "{\n    \"annotationId\": 0,\n    \"application\": \"string\",\n    \"assetUrn\": \"string\",\n    \"datetime\": \"string\",\n    \"numericValue\": 0,\n    \"tagUrn\": \"string\",\n    \"textValue\": \"string\",\n    \"user\": \"string\"\n}  Example:  {\n    \"annotationId\": 0,\n    \"application\": \"57eab2c2ad0302ad0b5c92c6\",\n    \"assetUrn\": \"urn:oc:entity:london:enableiot:fixed:98-4F-EE-00-0F-76\",\n    \"datetime\": \"2016-10-21 09:01:12:123\",\n    \"numericValue\": 0,\n    \"tagUrn\": \"urn:tag:faulty\",\n    \"textValue\": \"string\",\n    \"user\": \"86d7edce-5092-44c0-bed8-da4beaa3fbc6\"\n}",
            "title": "Annotation"
        },
        {
            "location": "/annotations/AssetAnnotationService/#tutorials",
            "text": "For more information about how to interact with the  Asset Annotation Service  you can check out the following tutorials:   How to Create Annotation Tags  How To Annotate An Asset",
            "title": "Tutorials"
        },
        {
            "location": "/services/experimenter-portal/",
            "text": "Experimenter Portal\n\n\nThe Experimenter Portal provides a common interface for the experimenters to carry out experiment management and to start the interaction of your experiment with different services (e.g. annotations, authorization, etc.). An experiment can be seen as a entity that allows you to interact with the Organicity facility. Besides, within an experiment you can defined a number of applications, also entities, so that when you create assets you have to indicate which application of which experiment has created it. It is worth highlighting that an Organicity application refers just to the entity (an identifier), that will be afterwards used in \nreal\n applications (such as smartphone applications) to enable the interaction with Organicity,\n\n\nIn the following the features of the Experimenter Portal are desbried in a comprehensive way.\n\n\nFirst you need to log into the the portal (http://experimenters.organicity.eu/). In case you do not manage to perform the login, contact the facility managers through \nhelpdesk@organicity.eu\n to obtain proper credentials.\n\n\nWhen you enter the portal for the same time, you will find an empty table and a button to create a new experiment. Besides, from the header you may navigate to different services and tools of Organicity; we do not detail each service and tool here, go \nHome\n for more information. Once you have created experiments, you will see something similar to Figure 1, when the experiment name, descriptions and current state is indicated.\n\n\n\n\nFigure 1:\n Main view of the Experimenter Portal\n\n\nBefore going step-by-step for the creation of experiments, we are listing the different features of the experiment that can be managed through the experimenter portal, that will be afterwards explained in detail in the following sections. When you enter the experiement, by clicking it, you will see something similar to Figure 2. First you can see a set of identifiers:\n\n\n\n\nMain experiment ID: it is the identifier of the experimenter who created the experiment. You will need it to create assets as described in \nHow To Push An Asset To The Experimenters Site\n\n\nCurrent experimenter ID: it is your ID as experimenter, if you created the experiment is will be the same as the previous one\n\n\nExperiment ID: it is the identifier of your experiment. Again, you will need it to create assets, see \nHow To Push An Asset To The Experimenters Site\n\n\n\n\nAfterwards, you can see your experiment name, description and the options to make the experiment assets public, more about this in section \nCreate and edit experiments\n. Finally you can see the list of features to be managed: \n\n\n\n\nFigure 2:\n Overall experiment view: experiment features managed through the Experimenter Portal\n\n\n\n\nExperiment Credentials: this allows to get the experiment to obtain and manage permissions to interact with Organicity from your experiment.\n\n\nApplications: as mentioned before, Organicity applications are entities (identifiers) that map onto real applications, so that you can identifify how the applications interact with Organicity.\n\n\nAssets: these are the pieces of information created by your experiment (by their applications)\n\n\nAnnotations: you annotate you assets, by defining tags, in order to enrich their information\n\n\nExperiment Team: you can add other experimenters to your experiment, so that they will see the same as you.\n\n\nParticipants: this feature allows you to contact people registered within Organicity to engage them into your experiment\n\n\n\n\n[A] Create and edit experiments\n\n\nAs can be seen in the figure below, an experiment can be created by just defining:\n\n\n\n\nName: Name of the experiment\n\n\nDescription: meaningful and catchy description of the experiment. This description will be used if you decide to invite people to participate in your experiment\n\n\nAssets privacy: choose whether or not you want your asstes to be public or private. Note that by doing them private only your experiment will be able to access their data.\n\n\n\n\nBesides, if it is necessary you may also define the experiment area, by clinking \nEXPERIMENT AREA\n. The area is made of regions, that in turn is defined as a polygon with a name, as depicted belor. You can define as many regions you want for your experiment.\n\n\nOnce you are done, click \nFINISH\n to complete the experiment creation.\n\n\n\n\nFigure 3:\n Form to create a new experiment\n\n\nYou can also edit the experiment information from the view of the experiment (Figure 2), by simple modifying the name or description and clicking \nUPDATE\n.\n\n\n[B] Experiment Credentials\n\n\nWhen you create an experiment a new \nclient\n is created for that experiment under the hood. \nYou may use that client to implement authorization in the applications within the experiment, see \nHow To Authenticate An User\n.\n\n\n\n\nFigure 4:\n Experiment credentials view\n\n\nFrom that client, you can define and edit \nredirect_uris\n as you need.\n\n\n[C] Create and edit applications\n\n\nAs mentioned before, to create assets, an experiment does not suffice, but the assets are created by application within your experiment. T\nTo create an applciation just go to the \nApplications\n section of you experiment, as shown in Figure 5. It moves you to the view of applications of your experiment. \nAs you can see in Figure 6, the applications view resembles the experiments view in Figure 1, and you can have as many applications as you need within your experiment.\n\n\n\n\nFigure 5:\n Applications menu from main experiment view\n\n\n\n\nFigure 6:\n Experiment applications view\n\n\nIf you click \nNEW APPLICATION\n, you will get a view as shown in Figure 7, in which you have to fill in a form for the application very much like the one to create \nan experiment. Remember that you can click the blue information buttons for guidance.\n\n\n\n\nFigure 7:\n New application form\n\n\n[D] Manage assets\n\n\nBased on the interface provided by the \nAssetDiscoveryService\n, through Experimenter Portal you can see the list of assets created within \nyour experiment, as depicted in Figure 8. You can also create new assets using its graphical editor or even modify existing ones.\n\n\n\n\nFigure 8:\n Main view of assets management\n\n\nIf you click \nADD ASSET\n you will see a graphical editor to edit the JSON of your asset with some minimal information pre-filled. You can obtain more information\nregarding the asset data model \nHERE\n, you can also edit existing assets by just clicking over them in the table shows in Figure 8. \nKeep in mind that this editor is just a minimal tool that uses \nHowToPushAnAssetToTheExperimenterSite\n and \n\nHowToUpdateDeteleAnAsset\n\n\n[E] Annotations\n\n\nExperimenter Portal interacts with Annotation Service to simplify the creation of tags. \nThe explanation of this feature can be found \nhere\n. From the annotations section of your experiment you can both\ncreate specific tag domains for your experiment or select existing generic domains to be used by your experiment. For the tag domains you create, you can define your \nown tags. Besides, when you enter this section just after creating the experiment, you will notice that a default experiment tag domain has been created.\n\n\n\n\nFigure 9:\n View of assets annotations\n\n\n[F] Experiment area\n\n\nAt any time, you can define or edit the area of your experiment by adding, deleting or modifying the experiment regions. It is fairly intuitive and the blue \ninformation symbols will guide you.\n\n\n\n\nFigure 10:\n Main view of the Experimenter Portal\n\n\n[G] Experiment team\n\n\nAs simple as it looks, you can add experimenter to your experiment team by selecting them and clicking \nUPDATE TEAM\n. \nThe table will show the user names of all the experimenters registered in Organicity. \nNote that once an experimenter is part of the experiment team they get access so identifiers and credentials, so ensure that you are inviting the right person.\n\n\n\n\nFigure 11:\n Experiment team\n\n\n[H] Participants\n\n\nTo be completed.",
            "title": "Experimenter Portal"
        },
        {
            "location": "/services/experimenter-portal/#experimenter-portal",
            "text": "The Experimenter Portal provides a common interface for the experimenters to carry out experiment management and to start the interaction of your experiment with different services (e.g. annotations, authorization, etc.). An experiment can be seen as a entity that allows you to interact with the Organicity facility. Besides, within an experiment you can defined a number of applications, also entities, so that when you create assets you have to indicate which application of which experiment has created it. It is worth highlighting that an Organicity application refers just to the entity (an identifier), that will be afterwards used in  real  applications (such as smartphone applications) to enable the interaction with Organicity,  In the following the features of the Experimenter Portal are desbried in a comprehensive way.  First you need to log into the the portal (http://experimenters.organicity.eu/). In case you do not manage to perform the login, contact the facility managers through  helpdesk@organicity.eu  to obtain proper credentials.  When you enter the portal for the same time, you will find an empty table and a button to create a new experiment. Besides, from the header you may navigate to different services and tools of Organicity; we do not detail each service and tool here, go  Home  for more information. Once you have created experiments, you will see something similar to Figure 1, when the experiment name, descriptions and current state is indicated.   Figure 1:  Main view of the Experimenter Portal  Before going step-by-step for the creation of experiments, we are listing the different features of the experiment that can be managed through the experimenter portal, that will be afterwards explained in detail in the following sections. When you enter the experiement, by clicking it, you will see something similar to Figure 2. First you can see a set of identifiers:   Main experiment ID: it is the identifier of the experimenter who created the experiment. You will need it to create assets as described in  How To Push An Asset To The Experimenters Site  Current experimenter ID: it is your ID as experimenter, if you created the experiment is will be the same as the previous one  Experiment ID: it is the identifier of your experiment. Again, you will need it to create assets, see  How To Push An Asset To The Experimenters Site   Afterwards, you can see your experiment name, description and the options to make the experiment assets public, more about this in section  Create and edit experiments . Finally you can see the list of features to be managed:    Figure 2:  Overall experiment view: experiment features managed through the Experimenter Portal   Experiment Credentials: this allows to get the experiment to obtain and manage permissions to interact with Organicity from your experiment.  Applications: as mentioned before, Organicity applications are entities (identifiers) that map onto real applications, so that you can identifify how the applications interact with Organicity.  Assets: these are the pieces of information created by your experiment (by their applications)  Annotations: you annotate you assets, by defining tags, in order to enrich their information  Experiment Team: you can add other experimenters to your experiment, so that they will see the same as you.  Participants: this feature allows you to contact people registered within Organicity to engage them into your experiment",
            "title": "Experimenter Portal"
        },
        {
            "location": "/services/experimenter-portal/#a-create-and-edit-experiments",
            "text": "As can be seen in the figure below, an experiment can be created by just defining:   Name: Name of the experiment  Description: meaningful and catchy description of the experiment. This description will be used if you decide to invite people to participate in your experiment  Assets privacy: choose whether or not you want your asstes to be public or private. Note that by doing them private only your experiment will be able to access their data.   Besides, if it is necessary you may also define the experiment area, by clinking  EXPERIMENT AREA . The area is made of regions, that in turn is defined as a polygon with a name, as depicted belor. You can define as many regions you want for your experiment.  Once you are done, click  FINISH  to complete the experiment creation.   Figure 3:  Form to create a new experiment  You can also edit the experiment information from the view of the experiment (Figure 2), by simple modifying the name or description and clicking  UPDATE .",
            "title": "[A] Create and edit experiments"
        },
        {
            "location": "/services/experimenter-portal/#b-experiment-credentials",
            "text": "When you create an experiment a new  client  is created for that experiment under the hood. \nYou may use that client to implement authorization in the applications within the experiment, see  How To Authenticate An User .   Figure 4:  Experiment credentials view  From that client, you can define and edit  redirect_uris  as you need.",
            "title": "[B] Experiment Credentials"
        },
        {
            "location": "/services/experimenter-portal/#c-create-and-edit-applications",
            "text": "As mentioned before, to create assets, an experiment does not suffice, but the assets are created by application within your experiment. T\nTo create an applciation just go to the  Applications  section of you experiment, as shown in Figure 5. It moves you to the view of applications of your experiment. \nAs you can see in Figure 6, the applications view resembles the experiments view in Figure 1, and you can have as many applications as you need within your experiment.   Figure 5:  Applications menu from main experiment view   Figure 6:  Experiment applications view  If you click  NEW APPLICATION , you will get a view as shown in Figure 7, in which you have to fill in a form for the application very much like the one to create \nan experiment. Remember that you can click the blue information buttons for guidance.   Figure 7:  New application form",
            "title": "[C] Create and edit applications"
        },
        {
            "location": "/services/experimenter-portal/#d-manage-assets",
            "text": "Based on the interface provided by the  AssetDiscoveryService , through Experimenter Portal you can see the list of assets created within \nyour experiment, as depicted in Figure 8. You can also create new assets using its graphical editor or even modify existing ones.   Figure 8:  Main view of assets management  If you click  ADD ASSET  you will see a graphical editor to edit the JSON of your asset with some minimal information pre-filled. You can obtain more information\nregarding the asset data model  HERE , you can also edit existing assets by just clicking over them in the table shows in Figure 8. \nKeep in mind that this editor is just a minimal tool that uses  HowToPushAnAssetToTheExperimenterSite  and  HowToUpdateDeteleAnAsset",
            "title": "[D] Manage assets"
        },
        {
            "location": "/services/experimenter-portal/#e-annotations",
            "text": "Experimenter Portal interacts with Annotation Service to simplify the creation of tags. \nThe explanation of this feature can be found  here . From the annotations section of your experiment you can both\ncreate specific tag domains for your experiment or select existing generic domains to be used by your experiment. For the tag domains you create, you can define your \nown tags. Besides, when you enter this section just after creating the experiment, you will notice that a default experiment tag domain has been created.   Figure 9:  View of assets annotations",
            "title": "[E] Annotations"
        },
        {
            "location": "/services/experimenter-portal/#f-experiment-area",
            "text": "At any time, you can define or edit the area of your experiment by adding, deleting or modifying the experiment regions. It is fairly intuitive and the blue \ninformation symbols will guide you.   Figure 10:  Main view of the Experimenter Portal",
            "title": "[F] Experiment area"
        },
        {
            "location": "/services/experimenter-portal/#g-experiment-team",
            "text": "As simple as it looks, you can add experimenter to your experiment team by selecting them and clicking  UPDATE TEAM . \nThe table will show the user names of all the experimenters registered in Organicity. \nNote that once an experimenter is part of the experiment team they get access so identifiers and credentials, so ensure that you are inviting the right person.   Figure 11:  Experiment team",
            "title": "[G] Experiment team"
        },
        {
            "location": "/services/experimenter-portal/#h-participants",
            "text": "To be completed.",
            "title": "[H] Participants"
        },
        {
            "location": "/UrbanDataObservatory/",
            "text": "Urban Data Observatory\n\n\nThe \nUrban Data Observatory\n is the main entry point to the OrganiCity platform assets.\n\n\n\nPlease notice some features might be under development at the time.\n\n\n\n\n\n\nIt provides data exploration functionalities across three main interface modules: the navigation modules, involving the spatial and filter views, the text search and the assets visualization. The three modules together are designed to perform as an integrated ecosystem, supporting users on the search and understanding of useful and valuable data assets\n\n\nNavigation\n\n\nThe map interface provides geographical exploration of assets at multiple scales. In order to maintain a low entry barrier the interface is modelled on other existing map services the users might be familiar as Google Maps. This includes the following key features:\n- Manually navigating the map by standard zoom and pan actions.\n- Browsing the map by clicking at specific assets.\n- Incremental search featuring simple places search.\n- Client geolocation in order to center the map on to the user location.\n\n\n\n\nSearch\n\n\nThe top search bar allows to search for assets name and metadata with auto-complete features. Results are returned based on the recommendation engine. The search offers a simplified list of the available resources that users can quickly access without any intermediate process.\n\n\nOn the upcoming relases this will be completed by the \nAdvanced search\n. This allowd using information related to assets metadata, such as provider, typology or update time. The result is then shown in a permanent list format allowing users to browser the obtained results in detail.\n\n\n\n\nAssets Visualization\n\n\nThe Assets Visualization is designed following a system of horizontal blocks. The anatomy of the assets views contains the following sections:\n\n\n\n\n[A] Data Location:\n\n\nThis module shows the geographical location of a resource on the map as described on the previous section. OC Assets always include location information as a common metadata. This can come in the form of:\n\n\n\n\nPoint:\n Assets specifically geolocated as a single spot. This is indicated on the map using traditional markers.\n17\n\n\nRegion:\n Assets geolocated as a closed collection of points defining an area. This is indicated by using an overlay shape.\n\n\nPath:\n Assets geolocated as an open collection of points. This is indicated as an open stroke connecting all the points.\n\n\n\n\n[B] and [C] Data Visualization:\n\n\nThis module is designed to support users on assets data exploration:\n\n\n\n\nLatest data module:\n This is designed as a carousel view displaying the latests data values of multiple attributes. It can work in conjunction with other data views or on its own if just latest data is available for an asset.\n\n\n\n\nData insights module:\n This module provides historical visualization of the data by using the Data Sources API. Different view modules are developed in order to fit the visualization requirements of each datasource.\n\n\n\n\n\n\nSeries chart module:\n This is designed as a chart view capable of dealing with numeric data representation over time as the one coming from many IoT resources. The module includes date navigation options as date pickers in order to access the historical data based on its time frame. It also features the possibility of comparing two metrics simultaneously.\n\n\n\n\n\n\nStatic data module:\n This is designed as a simple, more informative view capable of dealing with unstructured resources where data cannot be processed. It offers basic information about the asset and allows the user to download the original source as a file. The file type might vary depending on the asset and support for multiple formats is planned.\n\n\n\n\n\n\n\n\n\n\n[D] Assets details and metadata:\n\n\nThis supplies a detailed insight on the asset metadata. It provides information about the resource such as the provider, the service or the asset type, and thus supports users in getting a clear understanding about the data they are seeing.\n\n\n[E] Provider details:\n\n\nThis module provides in-depth information about the provider of the asset. It is designed to give advance users as experimenters a clearer understanding of what asset they are browsing..\n\n\n[F] Recommendations:\n\n\nThe recommendation section suggests four similar assets. Similarity is understood as: asset A and B are concidered similar if most users who previously viewed asset A also viewed asset B. A machine learning algorithm is handling this in the background, and the idea is that user will get suggestions on relevant alternative or supplementary assets to take into account when traversing available data sources in the OrganiCity facility.\n\n\nUnder the hood\n\n\nThe asset recommender is implemented leveraging Prediction.io (http://predictionio.incubator.apache.org), and we have used this recommender template: http://predictionio.incubator.apache.org/templates/similarproduct/quickstart/.\n\n\nWhen an end user clicks on a specific asset in the UDO, a \"view event\" is send to the Predition.io core machine learning platform. The event sends information on which user clickes on the asset (only the userid), what asset was clicked (only asset id), and a timestamp for when the event happened. This behavior is shown with the \"Event Data\" arrow in the diagram below.\n\n\n\n\nAs a parallel action we are asking the recommender engine for recommendations that relate to the clicked asset. This is illustrated with the two arrows \"Query via REST\" and \"Predicted Result\" in the above diagram. Since all communication is happening between the browser (client) and a remote server, these actions can be delayed a few seconds. A consequense is that the end user might not see recommendations until a few seconds after they clicked a specific asset in the UDO. This action is happening asynchroniously, so there will be no sensation of the website being slow.\n\n\nOver time we will get a huge amount of usage data, which will only make the recommendations better. This is due to the fact that machine learning algorithms need to be trained regularly in order to interpret input and produce a relevant output. In the case of the recommender engine, we train it once every night (around midnight) in order to keep recommendations as update as possible without slowing the recommendation engine down, thereby keeping a good end user experiencing.\n\n\n[G] Comments:\n\n\nThis module allows users to comment on an asset.",
            "title": "Urban Data Observatory"
        },
        {
            "location": "/UrbanDataObservatory/#urban-data-observatory",
            "text": "The  Urban Data Observatory  is the main entry point to the OrganiCity platform assets.  \nPlease notice some features might be under development at the time.   It provides data exploration functionalities across three main interface modules: the navigation modules, involving the spatial and filter views, the text search and the assets visualization. The three modules together are designed to perform as an integrated ecosystem, supporting users on the search and understanding of useful and valuable data assets",
            "title": "Urban Data Observatory"
        },
        {
            "location": "/UrbanDataObservatory/#navigation",
            "text": "The map interface provides geographical exploration of assets at multiple scales. In order to maintain a low entry barrier the interface is modelled on other existing map services the users might be familiar as Google Maps. This includes the following key features:\n- Manually navigating the map by standard zoom and pan actions.\n- Browsing the map by clicking at specific assets.\n- Incremental search featuring simple places search.\n- Client geolocation in order to center the map on to the user location.",
            "title": "Navigation"
        },
        {
            "location": "/UrbanDataObservatory/#search",
            "text": "The top search bar allows to search for assets name and metadata with auto-complete features. Results are returned based on the recommendation engine. The search offers a simplified list of the available resources that users can quickly access without any intermediate process.  On the upcoming relases this will be completed by the  Advanced search . This allowd using information related to assets metadata, such as provider, typology or update time. The result is then shown in a permanent list format allowing users to browser the obtained results in detail.",
            "title": "Search"
        },
        {
            "location": "/UrbanDataObservatory/#assets-visualization",
            "text": "The Assets Visualization is designed following a system of horizontal blocks. The anatomy of the assets views contains the following sections:",
            "title": "Assets Visualization"
        },
        {
            "location": "/UrbanDataObservatory/#a-data-location",
            "text": "This module shows the geographical location of a resource on the map as described on the previous section. OC Assets always include location information as a common metadata. This can come in the form of:   Point:  Assets specifically geolocated as a single spot. This is indicated on the map using traditional markers.\n17  Region:  Assets geolocated as a closed collection of points defining an area. This is indicated by using an overlay shape.  Path:  Assets geolocated as an open collection of points. This is indicated as an open stroke connecting all the points.",
            "title": "[A] Data Location:"
        },
        {
            "location": "/UrbanDataObservatory/#b-and-c-data-visualization",
            "text": "This module is designed to support users on assets data exploration:   Latest data module:  This is designed as a carousel view displaying the latests data values of multiple attributes. It can work in conjunction with other data views or on its own if just latest data is available for an asset.   Data insights module:  This module provides historical visualization of the data by using the Data Sources API. Different view modules are developed in order to fit the visualization requirements of each datasource.    Series chart module:  This is designed as a chart view capable of dealing with numeric data representation over time as the one coming from many IoT resources. The module includes date navigation options as date pickers in order to access the historical data based on its time frame. It also features the possibility of comparing two metrics simultaneously.    Static data module:  This is designed as a simple, more informative view capable of dealing with unstructured resources where data cannot be processed. It offers basic information about the asset and allows the user to download the original source as a file. The file type might vary depending on the asset and support for multiple formats is planned.",
            "title": "[B] and [C] Data Visualization:"
        },
        {
            "location": "/UrbanDataObservatory/#d-assets-details-and-metadata",
            "text": "This supplies a detailed insight on the asset metadata. It provides information about the resource such as the provider, the service or the asset type, and thus supports users in getting a clear understanding about the data they are seeing.",
            "title": "[D] Assets details and metadata:"
        },
        {
            "location": "/UrbanDataObservatory/#e-provider-details",
            "text": "This module provides in-depth information about the provider of the asset. It is designed to give advance users as experimenters a clearer understanding of what asset they are browsing..",
            "title": "[E] Provider details:"
        },
        {
            "location": "/UrbanDataObservatory/#f-recommendations",
            "text": "The recommendation section suggests four similar assets. Similarity is understood as: asset A and B are concidered similar if most users who previously viewed asset A also viewed asset B. A machine learning algorithm is handling this in the background, and the idea is that user will get suggestions on relevant alternative or supplementary assets to take into account when traversing available data sources in the OrganiCity facility.",
            "title": "[F] Recommendations:"
        },
        {
            "location": "/UrbanDataObservatory/#under-the-hood",
            "text": "The asset recommender is implemented leveraging Prediction.io (http://predictionio.incubator.apache.org), and we have used this recommender template: http://predictionio.incubator.apache.org/templates/similarproduct/quickstart/.  When an end user clicks on a specific asset in the UDO, a \"view event\" is send to the Predition.io core machine learning platform. The event sends information on which user clickes on the asset (only the userid), what asset was clicked (only asset id), and a timestamp for when the event happened. This behavior is shown with the \"Event Data\" arrow in the diagram below.   As a parallel action we are asking the recommender engine for recommendations that relate to the clicked asset. This is illustrated with the two arrows \"Query via REST\" and \"Predicted Result\" in the above diagram. Since all communication is happening between the browser (client) and a remote server, these actions can be delayed a few seconds. A consequense is that the end user might not see recommendations until a few seconds after they clicked a specific asset in the UDO. This action is happening asynchroniously, so there will be no sensation of the website being slow.  Over time we will get a huge amount of usage data, which will only make the recommendations better. This is due to the fact that machine learning algorithms need to be trained regularly in order to interpret input and produce a relevant output. In the case of the recommender engine, we train it once every night (around midnight) in order to keep recommendations as update as possible without slowing the recommendation engine down, thereby keeping a good end user experiencing.",
            "title": "Under the hood"
        },
        {
            "location": "/UrbanDataObservatory/#g-comments",
            "text": "This module allows users to comment on an asset.",
            "title": "[G] Comments:"
        },
        {
            "location": "/services/facility-manager/",
            "text": "Facility Manager\n\n\nIntroduction\n\n\nIn the OC Platform, all the assets belong to sites. Some of them are federated OC Sites (Aarhus, London, Santander, and more to come), and some others are related to more logical aggregate. For example, the OC Experimenters Site manages data generated during experiments and the OC Provider Site manages the data provided by OrganiCitizens themselves.\n\n\n\n\nA Service represents utility/urban services (e.g. Garbage Collection, Noise Monitoring, etc.). It always belongs to one and only one OC Site.\n\n\nFacility Manager website\n\n\nA dedicated website is available for creating, removing and editing sites and services. It's available with the following URL: \nhttps://facilitymanager.organicity.eu\n \n\n\nUnder the site section, a webpage lists all the available sites. If you are a platform administrator, a green button is displayed for creating a new site.\n\n\n\n\nFor each site, a dedicated webpage gives advanced informations.\n\n\n\n\nIf you are a platform administrator or an administrator for the considered site, you can also:\n\n\n\n\nedit the site information\n\n\nedit/create/remove the services \n\n\nsee the site credentials and services credentials\n\n\n\n\n\n\nAPI\n\n\nFor integrating site informations into another application, an API is available. It's described in a swagger document available at \nhttps://facilitymanager.organicity.eu/api/index.html",
            "title": "Facility Manager"
        },
        {
            "location": "/services/facility-manager/#facility-manager",
            "text": "",
            "title": "Facility Manager"
        },
        {
            "location": "/services/facility-manager/#introduction",
            "text": "In the OC Platform, all the assets belong to sites. Some of them are federated OC Sites (Aarhus, London, Santander, and more to come), and some others are related to more logical aggregate. For example, the OC Experimenters Site manages data generated during experiments and the OC Provider Site manages the data provided by OrganiCitizens themselves.   A Service represents utility/urban services (e.g. Garbage Collection, Noise Monitoring, etc.). It always belongs to one and only one OC Site.",
            "title": "Introduction"
        },
        {
            "location": "/services/facility-manager/#facility-manager-website",
            "text": "A dedicated website is available for creating, removing and editing sites and services. It's available with the following URL:  https://facilitymanager.organicity.eu    Under the site section, a webpage lists all the available sites. If you are a platform administrator, a green button is displayed for creating a new site.   For each site, a dedicated webpage gives advanced informations.   If you are a platform administrator or an administrator for the considered site, you can also:   edit the site information  edit/create/remove the services   see the site credentials and services credentials",
            "title": "Facility Manager website"
        },
        {
            "location": "/services/facility-manager/#api",
            "text": "For integrating site informations into another application, an API is available. It's described in a swagger document available at  https://facilitymanager.organicity.eu/api/index.html",
            "title": "API"
        },
        {
            "location": "/services/community-management/",
            "text": "Community Management\n\n\nOrganiCity defines several types of users depending on the role assigned to them during the registration process on the OrganiCity platform. One of those roles is \nparticipant\n, which are users interested in using the experiments created by other users with experimenter role.\n\n\nDuring the registration process on the OrganiCity platform, the participant is required to provide personal information such as date of birth, country where participant is located, gender, topics in which it is interested, etc. Using this information, the experimenter can select participants to create administrative groups called \ncommunities\n. The communities provide several functionalities, which make the interaction easier with participants.\n\n\nEntering the communities\n\n\nIn general, it can be accessed different types of communities depending on the roles assigned to the user. During the log in process, the Community Management detects the roles that user has and shows only the types of communities that correspond to him. In the case shown in \nFigure 1\n, the user has the roles of Experimenter, Site Manager and Facility Manager, so the communities corresponding to those roles are shown.\n\n\n\n\nFigure 1.\n Main view of Community Management\n\n\nThis documentation aims to provide support to experimenters in the use of Community Management, for that reason, the following sections will only describe the aspects of this service related to the experimenter (see \nFigure 2\n).\n\n\nThe communities created by experimenter will be used in the \nExperimenter Portal\n to send invitations to participants in order to encourage them to get involved in the experiments.\n\n\n\n\nFigure 2.\n Experimenter Community\n\n\nAfter clicking the GO TO COMMUNITIES button, a table with the set of communities that have been created previously is shown (see \nFigure 3\n). Details of each community, such as the name, brief description, creation date, and the number of users that belong to the community are shown. Moreover, the experimenter can view more information about the community using the SHOW button, or remove it using the REMOVE button.\n\n\n\n\nFigure 3.\n Detail of experimenter communities\n\n\nCreating new communities\n\n\nUsing the NEW COMMUNITY button, the experimenter can access to the view that enable to create new communities (see \nFigure 4\n). \n\n\n\n\nFigure 4.\n Creating new communities\n\n\nFirst, it is needed to specify the name of the community and a brief description of the purpose for which the community is created. Then, it must select the participants that belong to the community. Using the on/off button, you can obtain all the participants that are registered in the platform or obtain only those that meet the criteria specified by the boxes of \nAge range\n and/or \nInterests\n. Participants obtained by any of the above methods will be shown in the table below, in which all or some of them may be selected using the selection box located on the left side of each row. Once all fields are filled in, the CREATE button will be automatically enabled to allow the creation of the community.",
            "title": "Community Management"
        },
        {
            "location": "/services/community-management/#community-management",
            "text": "OrganiCity defines several types of users depending on the role assigned to them during the registration process on the OrganiCity platform. One of those roles is  participant , which are users interested in using the experiments created by other users with experimenter role.  During the registration process on the OrganiCity platform, the participant is required to provide personal information such as date of birth, country where participant is located, gender, topics in which it is interested, etc. Using this information, the experimenter can select participants to create administrative groups called  communities . The communities provide several functionalities, which make the interaction easier with participants.",
            "title": "Community Management"
        },
        {
            "location": "/services/community-management/#entering-the-communities",
            "text": "In general, it can be accessed different types of communities depending on the roles assigned to the user. During the log in process, the Community Management detects the roles that user has and shows only the types of communities that correspond to him. In the case shown in  Figure 1 , the user has the roles of Experimenter, Site Manager and Facility Manager, so the communities corresponding to those roles are shown.   Figure 1.  Main view of Community Management  This documentation aims to provide support to experimenters in the use of Community Management, for that reason, the following sections will only describe the aspects of this service related to the experimenter (see  Figure 2 ).  The communities created by experimenter will be used in the  Experimenter Portal  to send invitations to participants in order to encourage them to get involved in the experiments.   Figure 2.  Experimenter Community  After clicking the GO TO COMMUNITIES button, a table with the set of communities that have been created previously is shown (see  Figure 3 ). Details of each community, such as the name, brief description, creation date, and the number of users that belong to the community are shown. Moreover, the experimenter can view more information about the community using the SHOW button, or remove it using the REMOVE button.   Figure 3.  Detail of experimenter communities",
            "title": "Entering the communities"
        },
        {
            "location": "/services/community-management/#creating-new-communities",
            "text": "Using the NEW COMMUNITY button, the experimenter can access to the view that enable to create new communities (see  Figure 4 ).    Figure 4.  Creating new communities  First, it is needed to specify the name of the community and a brief description of the purpose for which the community is created. Then, it must select the participants that belong to the community. Using the on/off button, you can obtain all the participants that are registered in the platform or obtain only those that meet the criteria specified by the boxes of  Age range  and/or  Interests . Participants obtained by any of the above methods will be shown in the table below, in which all or some of them may be selected using the selection box located on the left side of each row. Once all fields are filled in, the CREATE button will be automatically enabled to allow the creation of the community.",
            "title": "Creating new communities"
        },
        {
            "location": "/services/ReputationService/",
            "text": "Reputation Service\n\n\nAn important job of the Urban Data Observatory Services is helping users navigate the many assets available from the OrganiCity platform. The Assets Reputation Service is responsible for calculating the reputation of the various assets available on the OrganiCity platform. Reputation (what is generally said or believed about an asset\u2019s reliability) captures a combined measure of reliability inferred from feedback by a community of end-users. In a stricter and personalized way, reputation can be conceived as trust, by modeling the degree the trust an end-user assigns to each specific assets they used. In our case, we focus on the generic notion of reputation that is public and combined and not on the personal and subjective one. By modelling reputation of assets, OrganiCity enables users and asset/service providers to differentiate among the assets based on how well these assets behaved in the history. This facilitates end-users and decision makers to distinguish good assets from bad ones based on user's feedbacks.\n\n\nArchitecture\n\n\nThe Reputation is embedded to Urban Discovery Observatory while uses statistical data from Data Annotation Service.\n\n\n\n\nInitially, the reputation score for new assets is unavailable. In order to initiate the scoring for an asset, a user has to either create an annotation for the specific asset or to rate it. This information is sent from Urban Data Observatory to Data Annotation Service, which updates the statistics accordingly. Then, the next time a user selects an asset, Urban Data Observatory requests the statistics from Data Annotation Service and calculates the reputation score based on the algorithm in the \u201cReputation Model\u201d section. \nThis architecture is more efficient than the existence of a stand-alone service that periodically retrieves all the assets and their annotations and then calculates the reputation score. Furthermore, the overhead due to the update and retrieval of the statistics is negligible because Urban Data Observatory communicates with Data Annotation Service to create or retrieve annotations at the same time respectively. Therefore, this process is piggy-backed to the normal operation of the system.\n\n\nReputation Model\n\n\nFor modelling the reputation of OC Assets, we rely on techniques for modelling reputation on internet and especially for web services. There is a quite exhaustive literature background in this field tackling the problem with various alternative techniques: feedback only based models, statistical models, fuzzy-logic models, data mining models or game theoretic models. In our case, we employ a statistical based model due to its simplicity, small computational requirements and the extendibility by easily integrating new parameters.  The reputation model is be based on a statistical model that integrates both subjective and objective parameters of assets, such as:\n\n Direct opinion in the form of 5-star rating.\n\n Usage of Statistics/Popularity, like:\n   * How many times an Asset has been annotated by OC users\n   * How many times an Asset has been rated by different OC users\n*   Time of the most recent action, like:\n     * What was the last time that an Asset has been annotated\n\n\nBased on the aforementioned sources, the final trust value is calculated as the weighted average of the various metrics.\n\n\nChallenges\n\n\nThere are several challenges in defining an integrated reputation model that we investigated:\nInclude multiple Quality metrics (a set of asset characteristics that express how bad or well the asset performs e.g. how accurate are the data): The OC Asset data model can be flexible enough to integrate various assets types like IoT devices, Smartphone devices, city boroughs, traffic and congestion, transportation lines. Due to the fact that different asset types have different quality characteristics makes the comparison challenging.\nSubjective/Objective perspectives: Integrate both subjective (feedbacks from users) and objective (Quality metrics monitored by OC platform) perspectives for quality metrics.\nTime domain: Taking into account the time of the last action, the reputation of the assets is dynamic by allowing freshly created asset to compete with already existed ones.\nCredibility of raters: Incorporate credibility of users to avoid dishonest ratings.",
            "title": "Reputation Service"
        },
        {
            "location": "/services/ReputationService/#reputation-service",
            "text": "An important job of the Urban Data Observatory Services is helping users navigate the many assets available from the OrganiCity platform. The Assets Reputation Service is responsible for calculating the reputation of the various assets available on the OrganiCity platform. Reputation (what is generally said or believed about an asset\u2019s reliability) captures a combined measure of reliability inferred from feedback by a community of end-users. In a stricter and personalized way, reputation can be conceived as trust, by modeling the degree the trust an end-user assigns to each specific assets they used. In our case, we focus on the generic notion of reputation that is public and combined and not on the personal and subjective one. By modelling reputation of assets, OrganiCity enables users and asset/service providers to differentiate among the assets based on how well these assets behaved in the history. This facilitates end-users and decision makers to distinguish good assets from bad ones based on user's feedbacks.",
            "title": "Reputation Service"
        },
        {
            "location": "/services/ReputationService/#architecture",
            "text": "The Reputation is embedded to Urban Discovery Observatory while uses statistical data from Data Annotation Service.   Initially, the reputation score for new assets is unavailable. In order to initiate the scoring for an asset, a user has to either create an annotation for the specific asset or to rate it. This information is sent from Urban Data Observatory to Data Annotation Service, which updates the statistics accordingly. Then, the next time a user selects an asset, Urban Data Observatory requests the statistics from Data Annotation Service and calculates the reputation score based on the algorithm in the \u201cReputation Model\u201d section. \nThis architecture is more efficient than the existence of a stand-alone service that periodically retrieves all the assets and their annotations and then calculates the reputation score. Furthermore, the overhead due to the update and retrieval of the statistics is negligible because Urban Data Observatory communicates with Data Annotation Service to create or retrieve annotations at the same time respectively. Therefore, this process is piggy-backed to the normal operation of the system.",
            "title": "Architecture"
        },
        {
            "location": "/services/ReputationService/#reputation-model",
            "text": "For modelling the reputation of OC Assets, we rely on techniques for modelling reputation on internet and especially for web services. There is a quite exhaustive literature background in this field tackling the problem with various alternative techniques: feedback only based models, statistical models, fuzzy-logic models, data mining models or game theoretic models. In our case, we employ a statistical based model due to its simplicity, small computational requirements and the extendibility by easily integrating new parameters.  The reputation model is be based on a statistical model that integrates both subjective and objective parameters of assets, such as:  Direct opinion in the form of 5-star rating.  Usage of Statistics/Popularity, like:\n   * How many times an Asset has been annotated by OC users\n   * How many times an Asset has been rated by different OC users\n*   Time of the most recent action, like:\n     * What was the last time that an Asset has been annotated  Based on the aforementioned sources, the final trust value is calculated as the weighted average of the various metrics.",
            "title": "Reputation Model"
        },
        {
            "location": "/services/ReputationService/#challenges",
            "text": "There are several challenges in defining an integrated reputation model that we investigated:\nInclude multiple Quality metrics (a set of asset characteristics that express how bad or well the asset performs e.g. how accurate are the data): The OC Asset data model can be flexible enough to integrate various assets types like IoT devices, Smartphone devices, city boroughs, traffic and congestion, transportation lines. Due to the fact that different asset types have different quality characteristics makes the comparison challenging.\nSubjective/Objective perspectives: Integrate both subjective (feedbacks from users) and objective (Quality metrics monitored by OC platform) perspectives for quality metrics.\nTime domain: Taking into account the time of the last action, the reputation of the assets is dynamic by allowing freshly created asset to compete with already existed ones.\nCredibility of raters: Incorporate credibility of users to avoid dishonest ratings.",
            "title": "Challenges"
        },
        {
            "location": "/HowToAccessToken/",
            "text": "Tutorial: How to Access Token\n\n\nAccess Tokens issued by Organicity Accounts are \nvalid for 5 minutes\n. They can be used in the backend or in the frontend of the web-application.\nThe Access Tokens are not just a random tokens, Organicity Accounts returns \nOpenID Connect Tokens\n.\nThe \nOpenID Connect Protocol\n is an extention for OAuth2.\n\n\nOpenID Connect Tokens + JSON Web Tokens\n\n\nOpenID Connect Tokens are represented as \nJSON Web Tokens\n (JWT).\nA JWT is represented as a sequence of BASE64-encoded parts, separated by a dot. An example:\n\n\n<PART_1>.<PART_2>.<PART_3>\n\n\n\n\n\n\n<PART_1>\n is the MAC in JSON, which is used by the server to sign the JWT (usually SHA-256)\n\n\n<PART_2>\n contains a set of claims in JSON\n\n\n<PART_3>\n contains the signature as \nJSON WebSignature\n (JWS)\n\n\n\n\nWe will focus on the \n<PART_2>\n: contains a set of claims in JSON, as they are specified by the\n\nOpen ID connect specification\n. Some examples:\n\n\n\n\nsub\n: The \nSubject Identifier\n, which is the unique ID of the user\n\n\naud\n: The \nAudience\n, that this ID Token is intended for (e.g., your \nclient_id\n)\n\n\nexp\n: Expiration time on or after which the ID Token MUST NOT be accepted for processing\n\n\n\n\nAdditonally, it contains the \nroles\n of the user, and some informations about the user.\n\n\nAn example:\n\n\n{\n  \"jti\": \"01c68b6a-e3ec-4472-9a80-9f53ba266104\",\n  \"exp\": 1475225200,\n  ...\n  \"iss\": \"https://accounts.organicity.eu/realms/organicity\",\n  \"aud\": \"example\",\n  \"sub\": \"cf2c1723-3369-4123-8b32-49abe71c0e57\",\n  \"typ\": \"Bearer\",\n  ...\n  \"realm_access\": {\n    \"roles\": [\n      \"offline_access\",\n      \"experimenter\"\n    ]\n  },\n  ...\n  \"name\": \"Dennis Boldt\",\n  \"preferred_username\": \"boldt\",\n  \"given_name\": \"Dennis\",\n  \"family_name\": \"Boldt\",\n  \"email\": \"boldt@itm.uni-luebeck.de\"\n}\n\n\n\n\nYou're application can decode and verify the JWT and use that informations.\n\n\nVerify Access Tokens\n\n\njwt.io\n\n\nAccess Tokens can be verified by using http://jwt.io during the development. Check, if the JSON attribute \npreferred_username\n equals your \nusername\n. Thus, the application performs \nactions in name of the user\n (e.g., you).\n\n\nLibraries\n\n\nIf you have to work with the Access Tokens within your code, there are some nice JWT libraries:\n\n\n\n\nNode: \njsonwebtoken\n\n\nJava/Android: \njjwt\n\n\nBased on this, we already created a simple tool, which \ncan be found here\n.\n\n\n\n\n\n\nPHP: \nphp-jwt\n\n\n\n\nTo verirfy the token, you need the public certificate, which is \navailable here\n.\n\n\nOrganicity APIs\n\n\nThese \nAccess Tokens\n can be used as Bearer Token to call different \nOrganicity APIs\n, e.g., to\n\npush an Assets to the Organicity Experimenter Site\n. An HTTP header example:\n\n\nAuthorization: Bearer <ACCCESS_TOKEN>",
            "title": "How To Access Token"
        },
        {
            "location": "/HowToAccessToken/#tutorial-how-to-access-token",
            "text": "Access Tokens issued by Organicity Accounts are  valid for 5 minutes . They can be used in the backend or in the frontend of the web-application.\nThe Access Tokens are not just a random tokens, Organicity Accounts returns  OpenID Connect Tokens .\nThe  OpenID Connect Protocol  is an extention for OAuth2.",
            "title": "Tutorial: How to Access Token"
        },
        {
            "location": "/HowToAccessToken/#openid-connect-tokens-json-web-tokens",
            "text": "OpenID Connect Tokens are represented as  JSON Web Tokens  (JWT).\nA JWT is represented as a sequence of BASE64-encoded parts, separated by a dot. An example:  <PART_1>.<PART_2>.<PART_3>   <PART_1>  is the MAC in JSON, which is used by the server to sign the JWT (usually SHA-256)  <PART_2>  contains a set of claims in JSON  <PART_3>  contains the signature as  JSON WebSignature  (JWS)   We will focus on the  <PART_2> : contains a set of claims in JSON, as they are specified by the Open ID connect specification . Some examples:   sub : The  Subject Identifier , which is the unique ID of the user  aud : The  Audience , that this ID Token is intended for (e.g., your  client_id )  exp : Expiration time on or after which the ID Token MUST NOT be accepted for processing   Additonally, it contains the  roles  of the user, and some informations about the user.  An example:  {\n  \"jti\": \"01c68b6a-e3ec-4472-9a80-9f53ba266104\",\n  \"exp\": 1475225200,\n  ...\n  \"iss\": \"https://accounts.organicity.eu/realms/organicity\",\n  \"aud\": \"example\",\n  \"sub\": \"cf2c1723-3369-4123-8b32-49abe71c0e57\",\n  \"typ\": \"Bearer\",\n  ...\n  \"realm_access\": {\n    \"roles\": [\n      \"offline_access\",\n      \"experimenter\"\n    ]\n  },\n  ...\n  \"name\": \"Dennis Boldt\",\n  \"preferred_username\": \"boldt\",\n  \"given_name\": \"Dennis\",\n  \"family_name\": \"Boldt\",\n  \"email\": \"boldt@itm.uni-luebeck.de\"\n}  You're application can decode and verify the JWT and use that informations.",
            "title": "OpenID Connect Tokens + JSON Web Tokens"
        },
        {
            "location": "/HowToAccessToken/#verify-access-tokens",
            "text": "",
            "title": "Verify Access Tokens"
        },
        {
            "location": "/HowToAccessToken/#jwtio",
            "text": "Access Tokens can be verified by using http://jwt.io during the development. Check, if the JSON attribute  preferred_username  equals your  username . Thus, the application performs  actions in name of the user  (e.g., you).",
            "title": "jwt.io"
        },
        {
            "location": "/HowToAccessToken/#libraries",
            "text": "If you have to work with the Access Tokens within your code, there are some nice JWT libraries:   Node:  jsonwebtoken  Java/Android:  jjwt  Based on this, we already created a simple tool, which  can be found here .    PHP:  php-jwt   To verirfy the token, you need the public certificate, which is  available here .",
            "title": "Libraries"
        },
        {
            "location": "/HowToAccessToken/#organicity-apis",
            "text": "These  Access Tokens  can be used as Bearer Token to call different  Organicity APIs , e.g., to push an Assets to the Organicity Experimenter Site . An HTTP header example:  Authorization: Bearer <ACCCESS_TOKEN>",
            "title": "Organicity APIs"
        },
        {
            "location": "/HowToAuthenticateAnUser/",
            "text": "Tutorial: How to Authenticate a User for your Application\n\n\nGoal of this tutorial\n:\n\n\n\n\nAuthenticate a user for your own application with \nOrganicity Accounts\n.\n\n\n\n\nPreconditions\n:\n\n To be able to authenticate users for your application, you must have the role \nexperimenter\n assigned.\n\n You created an experiment within the \nOrganicity Experimenter Portal\n.\n* The Experimenter Portal provides you a \nclient_id\n and a \nclient_secret\n, both is needed in this tutorial.\n\n\nOrganicity Accounts\n provides unified user management to the whole Organicity platform. Of course, a unified experience requires all Organicity components to properly talk to Organicity Accounts. This document guides through the process of setting your component up.\n\n\nOAuth2 Grants\n\n\nOrganicity Accounts\n is an \nOAuth2 server\n, which provides a Single Sign-On (SSO) service. Thus, you can login to\nall Organicity Components by using one single account. In case of web-applications, you even just need to login once.\nProbably you know this from Google: To use gmail, youtube or the calendar, you use the same account.\n\n\n\n\n\nClient ID + Client Secret\n\n\nAfter creating your experiment within the \nExperimenter Portal\n, you will receive a \nclient_id\n and a \nclient_secret\n:\n\n\n\n\nThe \nclient_id\n is public, so it can be added to the source code, which is uses it to build a login URL finally.\n\n\nThe \nclient_secret\n is private and must be kept confidential!\n\n\n\n\nGrant Types\n\n\nThe OAuth2 specification\n provides several \nGrant Types\n for different types of applications:\n\n\n\n\nAuthorization Code Grant\n: Used for web-applications with a server-side component, which can keep the \nclient_id\n confidential.\n\n\nImplicit Grant\n: Used for browser-based applications (e.g., JavaScript-only applications without a server-side component) or mobile apps.\n\n\n\n\nIn this two grants, after a successful login, the applications will act \nin name of the user\n. There is one more important grant:\n\n\n\n\nClient Credential Grant\n: Only used for application, which \nact on their own\n.\n\n\n\n\nPer default, this grant ist not enabled for experiments.\n\n\nEndpoints\n\n\nThe following endpointd are needed by the grants described below:\n\n\n\n\nAuthorization Endpoint\n: https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth\n\n\nToken Endpoint\n: https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/token\n\n\n\n\nAuthorization Code Grant\n\n\nAs said before, this grant is used for applications running on a web server. Thus, the source code of the web-application\nkeeps the \nclient_secret\n confidential. This grant is divided in two flows:\n\n\nFor the \nfirst flow\n, you must extend the authorization endpoint with the following\nquery parameters:\n\n\n\n\nresponse_type=code\n: Here, the response type must be \ncode\n\n\nclient_id=<CLIENT_ID>\n: Here, you must include your \nclient_id\n, which is provided by the Experimenter Portal\n\n\nredirect_uri=<REDIRECT_URI>\n: Within the Experimenter Portal, you can configure Redirect URIs. After a successful login, the user is redirected to that URI.\n\n\n\n\nHINT\n: Make sure, that you're web-application, and thus the \nredirect_uri\n, runs on HTTPS. This ensures, that the exchanged data cannot be intercepted during the login process.\n\n\nThus, the full authorization URL looks as follows:\n\n\n https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=code&client_id=<CLIENT_ID>&redirect_uri=<REDIRECT_URI>\n\n\n\n\nAn example:\n\n\n https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=code&client_id=example&redirect_uri=https://example.com/callback \n\n\n\n\nCalling this URL, the users must login with their credentials. If the login is successful, the user is redirected back to the configured redirect URI.\nOAuth2 appends one parameter to the URL:\n\n\n\n\ncode\n: This is the so called \nauthorization_code\n, which is needed in the next step.\n\n\n\n\nThus, the full callback URL looks as follows:\n\n\n<REDIRECT_URI>?code=<CODE>\n\n\n\n\nAn example:\n\n\nhttps://example.com/callback?code=0123456789\n\n\n\n\nNow, the \nsecond flow\n starts. You're web-application takes this \ncode\n and must send an HTTP POST request to the\n\ntoken endpoint\n, with the following parameters:\n\n\n\n\nclient_id=<CLIENT_ID>\n: Here, you must include your \nclient_id\n, which is provided by the Experimenter Portal\n\n\ngrant_type=authorization_code\n: The \ngrant_type\n must be \nauthorization_code\n. Here you see, where the name comes from.\n\n\nredirect_uri=<REDIRECT_URI>\n: The same URI as before\n\n\ncode=<CODE>\n: The code from the callback URL\n\n\nclient_secret=<CLIENT_SECRET>\n: Here, you must include your \nclient_secret\n, which is provided by the Experimenter Portal\n\n\n\n\nHINT\n: Make sure, that this call is done from the web-application in the background, thus the \nclient_secret\n stays confidential!\n\n\nOption A (\nclient_id\n and \nclient_secret\n in the header):\n\n\nPOST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nAuthorization: Basic <BASE64_ENCODE(<CLIENT_ID>:<CLIENT_SECRET>)>\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&code=<CODE>&rediret_uri=<REDIRECT_URI>\n\n\n\n\nThe Authorization header contains your \nclient_id\n and \nclient_secret\n encoded with HTTP basic authentication. For details on how to create this field, \nsee here\n.\n\n\nOption B (\nclient_id\n and \nclient_secret\n in the body):\n\n\nPOST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&code=<CODE>&rediret_uri=<REDIRECT_URI>&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>\n\n\n\n\nCalling this URL, the server verifies your credentials and the code. If successful, the server returns a JSON, which contains the following attributes:\n\n\n\n\ntoken_type\n: This is usually \nBearer\n\n\naccess_token\n: this is the \nAccess Token\n in JSON\n\n\nexpires_in\n: a number in seconds, how long the Access Token is valid\n\n\n\n\nAn example:\n\n\n{\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 300,\n}\n\n\n\n\nSee here for further details on the Access Tokens\n.\n\n\nImplicit Grant\n\n\nHINT\n:\n\n\nThis grant is used for browser-based applications (e.g., JavaScript-only applications without a server-side component) or mobile apps.\nThese kind of applications cannot keep the \nclient_secret\n confidential. The Implicit Grant has just one flow, which returns\nthe Access Token directly. The Grant is called \nimplicit\n, as no intermediate credentials (such as an authorization code) are issued.\n\n\nFor this grant, you must extend the authorization endpoint with the following query parameters:\n\n\n\n\nresponse_type=token\n: Here, the response type must be \ntoken\n (becaue you'll get an Access Token immediately)\n\n\nclient_id=<CLIENT_ID>\n: Here, you must include your \nclient_id\n, which is provided by the Experimenter Portal\n\n\nredirect_uri=<REDIRECT_URI>\n: Within the Experimenter Portal, you can configure Redirect URIs. After a successful login, the user is redirected to that URI.\n\n\n\n\nHINT\n: Make sure, that you're web-application, and thus the \nredirect_uri\n, runs on HTTPS. This ensures, that the exchanged data cannot be intercepted during the login process.\n\n\nThus, the full authorization URL looks as follows:\n\n\n https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=token&client_id=<CLIENT_ID>&redirect_uri=<REDIRECT_URI>\n\n\n\n\nAn example:\n\n\n https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=token&client_id=example&redirect_uri=https://example.com/callback\n\n\n\n\nCalling this URL, the users must login with their credentials. If the login is successful, the user is redirected back to the configured redirect URI.\nOAuth2 appends one parameter to the URL:\n\n\n\n\ntoken\n: This is the Access Token in JSON\n\n\n\n\nThe JSON contains the following attributes (similar to the \nAuthorization Code Flow\n):\n\n\n\n\ntoken_type\n: This is usually \nBearer\n\n\naccess_token\n: this is the \nAccess Token\n itself\n\n\nexpires_in\n: a number in seconds, how long the Access Token is valid\n\n\n\n\nAn example:\n\n\n{\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 300,\n}\n\n\n\n\nSee here for further details on the Access Tokens\n.\n\n\nClient Credential Grant\n\n\nHINT:\n The \nClient Credential Grant\n is used for applications (e.g, clients), which \nact on their own\n.\n\n\nTo authorize a client, you perform a simple HTTPS request with your \nclient_id\n and \nclient_secret\n, which will return an \nAccess Token\n.\n\n\nOption A: \nclient_id\n and \nclient_secret\n in the header\n\n\nPOST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nAuthorization: Basic <BASE64_ENCODE(<CLIENT_ID>:<CLIENT_SECRET>)> \nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials\n\n\n\n\nThe Authorization header contains your \nclient_id\n and \nclient_secret\n encoded with HTTP basic authentication. For details on how to create this field, \nsee here\n.\n\n\nOption B: \nclient_id\n and \nclient_secret\n in the body\n\n\nPOST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>\n\n\n\n\nAnswer for Option A and Option B\n\n\nThe request returns a JSON record, which contains the following attributes:\n\n\n\n\ntoken_type\n: This is usually \nBearer\n\n\naccess_token\n: this is the \nAccess Token\n itself\n\n\nexpires_in\n: a number in seconds, how long the Access Token is valid\n\n\n\n\nAn example:\n\n\n{\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 300,\n}\n\n\n\n\nLibraries\n\n\nOf course, you do not have to write you're own OAuth2 adapter. You can use well-tested existing librabries, like the following:\n\n\n\n\nNode.js with Passport: \npassport-oauth2\n\n\nPHP: \noauth2-client\n\n\n\n\nFor these two, we created two minimal working examples:\n\n\n\n\nNode.js with Passport:  \naccounts-demo-passport\n\n\nPHP: \naccounts-demo-php\n\n\n\n\nIn order to talk to Organicity Accounts, your component needs to talk to the Accounts Server using any of the above mentioned grants.\n\n\nSources on OAuth2\n\n\n\n\nhttps://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2\n\n\nhttps://alexbilbie.com/guide-to-oauth-2-grants/\n\n\nhttps://aaronparecki.com/2012/07/29/2/oauth2-simplified",
            "title": "How To Authenticate An User"
        },
        {
            "location": "/HowToAuthenticateAnUser/#tutorial-how-to-authenticate-a-user-for-your-application",
            "text": "Goal of this tutorial :   Authenticate a user for your own application with  Organicity Accounts .   Preconditions :  To be able to authenticate users for your application, you must have the role  experimenter  assigned.  You created an experiment within the  Organicity Experimenter Portal .\n* The Experimenter Portal provides you a  client_id  and a  client_secret , both is needed in this tutorial.  Organicity Accounts  provides unified user management to the whole Organicity platform. Of course, a unified experience requires all Organicity components to properly talk to Organicity Accounts. This document guides through the process of setting your component up.",
            "title": "Tutorial: How to Authenticate a User for your Application"
        },
        {
            "location": "/HowToAuthenticateAnUser/#oauth2-grants",
            "text": "Organicity Accounts  is an  OAuth2 server , which provides a Single Sign-On (SSO) service. Thus, you can login to\nall Organicity Components by using one single account. In case of web-applications, you even just need to login once.\nProbably you know this from Google: To use gmail, youtube or the calendar, you use the same account.",
            "title": "OAuth2 Grants"
        },
        {
            "location": "/HowToAuthenticateAnUser/#client-id-client-secret",
            "text": "After creating your experiment within the  Experimenter Portal , you will receive a  client_id  and a  client_secret :   The  client_id  is public, so it can be added to the source code, which is uses it to build a login URL finally.  The  client_secret  is private and must be kept confidential!",
            "title": "Client ID + Client Secret"
        },
        {
            "location": "/HowToAuthenticateAnUser/#grant-types",
            "text": "The OAuth2 specification  provides several  Grant Types  for different types of applications:   Authorization Code Grant : Used for web-applications with a server-side component, which can keep the  client_id  confidential.  Implicit Grant : Used for browser-based applications (e.g., JavaScript-only applications without a server-side component) or mobile apps.   In this two grants, after a successful login, the applications will act  in name of the user . There is one more important grant:   Client Credential Grant : Only used for application, which  act on their own .   Per default, this grant ist not enabled for experiments.",
            "title": "Grant Types"
        },
        {
            "location": "/HowToAuthenticateAnUser/#endpoints",
            "text": "The following endpointd are needed by the grants described below:   Authorization Endpoint : https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth  Token Endpoint : https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/token",
            "title": "Endpoints"
        },
        {
            "location": "/HowToAuthenticateAnUser/#authorization-code-grant",
            "text": "As said before, this grant is used for applications running on a web server. Thus, the source code of the web-application\nkeeps the  client_secret  confidential. This grant is divided in two flows:  For the  first flow , you must extend the authorization endpoint with the following\nquery parameters:   response_type=code : Here, the response type must be  code  client_id=<CLIENT_ID> : Here, you must include your  client_id , which is provided by the Experimenter Portal  redirect_uri=<REDIRECT_URI> : Within the Experimenter Portal, you can configure Redirect URIs. After a successful login, the user is redirected to that URI.   HINT : Make sure, that you're web-application, and thus the  redirect_uri , runs on HTTPS. This ensures, that the exchanged data cannot be intercepted during the login process.  Thus, the full authorization URL looks as follows:   https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=code&client_id=<CLIENT_ID>&redirect_uri=<REDIRECT_URI>  An example:   https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=code&client_id=example&redirect_uri=https://example.com/callback   Calling this URL, the users must login with their credentials. If the login is successful, the user is redirected back to the configured redirect URI.\nOAuth2 appends one parameter to the URL:   code : This is the so called  authorization_code , which is needed in the next step.   Thus, the full callback URL looks as follows:  <REDIRECT_URI>?code=<CODE>  An example:  https://example.com/callback?code=0123456789  Now, the  second flow  starts. You're web-application takes this  code  and must send an HTTP POST request to the token endpoint , with the following parameters:   client_id=<CLIENT_ID> : Here, you must include your  client_id , which is provided by the Experimenter Portal  grant_type=authorization_code : The  grant_type  must be  authorization_code . Here you see, where the name comes from.  redirect_uri=<REDIRECT_URI> : The same URI as before  code=<CODE> : The code from the callback URL  client_secret=<CLIENT_SECRET> : Here, you must include your  client_secret , which is provided by the Experimenter Portal   HINT : Make sure, that this call is done from the web-application in the background, thus the  client_secret  stays confidential!  Option A ( client_id  and  client_secret  in the header):  POST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nAuthorization: Basic <BASE64_ENCODE(<CLIENT_ID>:<CLIENT_SECRET>)>\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&code=<CODE>&rediret_uri=<REDIRECT_URI>  The Authorization header contains your  client_id  and  client_secret  encoded with HTTP basic authentication. For details on how to create this field,  see here .  Option B ( client_id  and  client_secret  in the body):  POST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&code=<CODE>&rediret_uri=<REDIRECT_URI>&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>  Calling this URL, the server verifies your credentials and the code. If successful, the server returns a JSON, which contains the following attributes:   token_type : This is usually  Bearer  access_token : this is the  Access Token  in JSON  expires_in : a number in seconds, how long the Access Token is valid   An example:  {\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 300,\n}  See here for further details on the Access Tokens .",
            "title": "Authorization Code Grant"
        },
        {
            "location": "/HowToAuthenticateAnUser/#implicit-grant",
            "text": "HINT :  This grant is used for browser-based applications (e.g., JavaScript-only applications without a server-side component) or mobile apps.\nThese kind of applications cannot keep the  client_secret  confidential. The Implicit Grant has just one flow, which returns\nthe Access Token directly. The Grant is called  implicit , as no intermediate credentials (such as an authorization code) are issued.  For this grant, you must extend the authorization endpoint with the following query parameters:   response_type=token : Here, the response type must be  token  (becaue you'll get an Access Token immediately)  client_id=<CLIENT_ID> : Here, you must include your  client_id , which is provided by the Experimenter Portal  redirect_uri=<REDIRECT_URI> : Within the Experimenter Portal, you can configure Redirect URIs. After a successful login, the user is redirected to that URI.   HINT : Make sure, that you're web-application, and thus the  redirect_uri , runs on HTTPS. This ensures, that the exchanged data cannot be intercepted during the login process.  Thus, the full authorization URL looks as follows:   https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=token&client_id=<CLIENT_ID>&redirect_uri=<REDIRECT_URI>  An example:   https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=token&client_id=example&redirect_uri=https://example.com/callback  Calling this URL, the users must login with their credentials. If the login is successful, the user is redirected back to the configured redirect URI.\nOAuth2 appends one parameter to the URL:   token : This is the Access Token in JSON   The JSON contains the following attributes (similar to the  Authorization Code Flow ):   token_type : This is usually  Bearer  access_token : this is the  Access Token  itself  expires_in : a number in seconds, how long the Access Token is valid   An example:  {\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 300,\n}  See here for further details on the Access Tokens .",
            "title": "Implicit Grant"
        },
        {
            "location": "/HowToAuthenticateAnUser/#client-credential-grant",
            "text": "HINT:  The  Client Credential Grant  is used for applications (e.g, clients), which  act on their own .  To authorize a client, you perform a simple HTTPS request with your  client_id  and  client_secret , which will return an  Access Token .",
            "title": "Client Credential Grant"
        },
        {
            "location": "/HowToAuthenticateAnUser/#option-a-client_id-and-client_secret-in-the-header",
            "text": "POST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nAuthorization: Basic <BASE64_ENCODE(<CLIENT_ID>:<CLIENT_SECRET>)> \nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials  The Authorization header contains your  client_id  and  client_secret  encoded with HTTP basic authentication. For details on how to create this field,  see here .",
            "title": "Option A: client_id and client_secret in the header"
        },
        {
            "location": "/HowToAuthenticateAnUser/#option-b-client_id-and-client_secret-in-the-body",
            "text": "POST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>",
            "title": "Option B: client_id and client_secret in the body"
        },
        {
            "location": "/HowToAuthenticateAnUser/#answer-for-option-a-and-option-b",
            "text": "The request returns a JSON record, which contains the following attributes:   token_type : This is usually  Bearer  access_token : this is the  Access Token  itself  expires_in : a number in seconds, how long the Access Token is valid   An example:  {\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 300,\n}",
            "title": "Answer for Option A and Option B"
        },
        {
            "location": "/HowToAuthenticateAnUser/#libraries",
            "text": "Of course, you do not have to write you're own OAuth2 adapter. You can use well-tested existing librabries, like the following:   Node.js with Passport:  passport-oauth2  PHP:  oauth2-client   For these two, we created two minimal working examples:   Node.js with Passport:   accounts-demo-passport  PHP:  accounts-demo-php   In order to talk to Organicity Accounts, your component needs to talk to the Accounts Server using any of the above mentioned grants.",
            "title": "Libraries"
        },
        {
            "location": "/HowToAuthenticateAnUser/#sources-on-oauth2",
            "text": "https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2  https://alexbilbie.com/guide-to-oauth-2-grants/  https://aaronparecki.com/2012/07/29/2/oauth2-simplified",
            "title": "Sources on OAuth2"
        },
        {
            "location": "/HowToOcSite/",
            "text": "Tutorial: OC Site Federation - How to be an OC Site\n\n\nGoal of this tutorial\n:\n\n\n\n\nPush an asset (as OC Site) to the Organicity Central Orion.\n\n\n\n\nPrecondition\n:\n\n\n\n\nTo be able to push assets to the \nOrganicity Central Orion\n you need a \nclient_id\n and a \nclient_secret\n, which has the \nocsite\n role assigned.\n\n\n\n\nThe core component of the federation is the \nAsset-Subscription-Proxy\n, which subscribes itself at an Orion. Thus, the Orion notifies the Asset-Subscription-Proxy about new Assets. As soon the Asset-Subscription-Proxy gets notified, it forwards the asset to the Organicity Central Orion in am authorized way. This architecture can be seen below:\n\n\n\n\nSetup\n\n\nDocker\n\n\nUsing docker, it installs MongoDB, Orion and the Asset-Subscription-Proxy. We're using \ndocker-compose\n, thus install it first:\n\n\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.11.2/docker-compose-$(uname -s)-$(uname -m)\" -o /opt/docker-compose\nsudo chmod 755 /opt/docker-compose\n\n\n\n\nNext, get the config files\n\n\nsudo curl -L \"https://raw.githubusercontent.com/OrganicityEu/docker/master/mongo%2Borion%2Basset-subscription-proxy.yml\" -o /opt/mongo+orion+asset-subscription-proxy.yml\nsudo curl -L \"https://raw.githubusercontent.com/OrganicityEu-Platform/Asset-Subscription-Proxy/master/config.js.docker\" -o /opt/organicity-asset-subscription-proxy-config.js\n\n\n\n\nAdd your credentials (e.g., client-id and client secret) to the \n/opt/organicity-asset-subscription-proxy-config.js\n and run the following:\n\n\n/opt/docker-compose -f /opt/mongo+orion+asset-subscription-proxy.yml up\n\n\n\n\nThis installs and starts MongoDB, Orion and the Asset-Subscription-Proxy. If it was successful, you will see the subscription of the\nAsset-Subscription-Proxy at the Orion:\n\n\nSuccessful: /v2/subscriptions/57ea49394735cf79905858c0\n\n\n\n\nManually\n\n\nInstall the Asset-Subscription-Proxy\n\n\nTo push assets to the Organicity Central Orion, please clone the repository of the Asset-Subscription-Proxy\n and configure it:\n\n\ngit clone https://github.com/OrganicityEu-Platform/Asset-Subscription-Proxy.git\ncd Asset-Subscription-Proxy\ncp config.js.example config.js\n\n\n\n\nNext, install the Dependencies:\n\n\nnpm install\n\n\n\n\nConfigure the Asset-Subscription-Proxy\n\n\nEdit the \nconfig.js\n by applying your \nclient_id\n and \nclient_secret\n.\n\n\nFor the \nDev-Server\n, make sure the following configuration is used:\n\n\nconfig.asset_directory_host = 'orion.organicity.eu';\nconfig.asset_directory_port = '443';\nconfig.asset_directory_protocol = 'https'\n\n\n\n\nFor the \nProduction Server\n, make sure the following configuration is used:\n\n\n\n\nTODO\n\n\n\n\nAfterwards, you can start the proxy:\n\n\nnode server\n\n\n\n\nAdd Subscription to your local Orion\n\n\nEdit the \nconfig.js\n by applying your Orion configuration. In this tutorial we assume, that the Orion runs on \nlocalhost:1026\n:\n\n\nThus, use the following configuration:\n\n\nconfig.orion_host = 'localhost';\nconfig.orion_port = 1026;\nconfig.orion_protocol = 'http';\n\n\n\n\nThe default \nsubscription_url\n is \nhttp://localhost:9999\n. If this is wrong (e.g., Orion and Asset-Subscription-Proxy run on different machines), please modify the \nconfig.subscription_url\n.\n\n\nAfterwards, you can initiate the subscription:\n\n\nnode subscribe\n\n\n\n\nIf it was successful, you will see the subscription of the\nAsset-Subscription-Proxy at the Orion:\n\n\nSuccessful: /v2/subscriptions/57ea49394735cf79905858c0\n\n\n\n\n+\nHint\n: You can run this only once. Otherwise, you have multiple subscriptions.\n\n\nTo unsubscribe, run:\n\n\nnode unsubscribe\n\n\n\n\nVerify subscription at your local Orion\n\n\nNow you can verify your subscription:\n\n\nGET http://localhost:1026/v2/subscriptions/57ea49394735cf79905858c0\nAccept: application/json\nFiware-Service: organicity\n\n\n\n\nPush an Asset to your local Orion\n\n\nTest the federation. Keep the log of the Asset-Subscription-Proxy (or the docker log) open. Create an asset at your local orion, with:\n\n\n\n\nHTTP header \nFiware-Service: organicity\n\n\nThe AssetID must correspond to your Site, e.g., \nurn:oc:entity:ocsite-<SiteName>:<AssetID>\n\n\n\n\nAn example (client ID \nocsite-test\n):\n\n\nPOST http://{IP}:1026/v2/entities\nAccept: application/json\nContent-Type: application/json\nFiware-Service: organicity\n\n{\n  \"id\": \"urn:oc:entity:test:1\",\n  \"type\": \"urn:oc:entityType:demo\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  }\n}\n\n\n\n\nThe local Orion should send a notification to the Asset-Subscription-Proxy, which pushes the asset to the Organicity Central Orion. You should see messages like\n\n\n2017-04-18 15:11:43.547  - DEBUG: Organicity-subscription-proxy - ### Try to update asset\n2017-04-18 15:11:43.547  - INFO: Organicity-subscription-proxy - Asset updating: urn:oc:entity:test:1\n2017-04-18 15:11:44.231  - DEBUG: Organicity-subscription-proxy - Update failed.\n2017-04-18 15:11:44.231  - DEBUG: Organicity-subscription-proxy - ### Try to create asset\n2017-04-18 15:11:44.231  - INFO: Organicity-subscription-proxy - Asset creating: urn:oc:entity:test:1\n2017-04-18 15:11:44.907  - INFO: Organicity-subscription-proxy - Asset created: urn:oc:entity:test:1\n2017-04-18 15:11:44.907  - DEBUG: Organicity-subscription-proxy - All assets handled!\n\n\n\n\nHint\n: There are always two steps (update and create) required to create an asset.",
            "title": "How To Be An Oc Site"
        },
        {
            "location": "/HowToOcSite/#tutorial-oc-site-federation-how-to-be-an-oc-site",
            "text": "Goal of this tutorial :   Push an asset (as OC Site) to the Organicity Central Orion.   Precondition :   To be able to push assets to the  Organicity Central Orion  you need a  client_id  and a  client_secret , which has the  ocsite  role assigned.   The core component of the federation is the  Asset-Subscription-Proxy , which subscribes itself at an Orion. Thus, the Orion notifies the Asset-Subscription-Proxy about new Assets. As soon the Asset-Subscription-Proxy gets notified, it forwards the asset to the Organicity Central Orion in am authorized way. This architecture can be seen below:",
            "title": "Tutorial: OC Site Federation - How to be an OC Site"
        },
        {
            "location": "/HowToOcSite/#setup",
            "text": "",
            "title": "Setup"
        },
        {
            "location": "/HowToOcSite/#docker",
            "text": "Using docker, it installs MongoDB, Orion and the Asset-Subscription-Proxy. We're using  docker-compose , thus install it first:  sudo curl -L \"https://github.com/docker/compose/releases/download/1.11.2/docker-compose-$(uname -s)-$(uname -m)\" -o /opt/docker-compose\nsudo chmod 755 /opt/docker-compose  Next, get the config files  sudo curl -L \"https://raw.githubusercontent.com/OrganicityEu/docker/master/mongo%2Borion%2Basset-subscription-proxy.yml\" -o /opt/mongo+orion+asset-subscription-proxy.yml\nsudo curl -L \"https://raw.githubusercontent.com/OrganicityEu-Platform/Asset-Subscription-Proxy/master/config.js.docker\" -o /opt/organicity-asset-subscription-proxy-config.js  Add your credentials (e.g., client-id and client secret) to the  /opt/organicity-asset-subscription-proxy-config.js  and run the following:  /opt/docker-compose -f /opt/mongo+orion+asset-subscription-proxy.yml up  This installs and starts MongoDB, Orion and the Asset-Subscription-Proxy. If it was successful, you will see the subscription of the\nAsset-Subscription-Proxy at the Orion:  Successful: /v2/subscriptions/57ea49394735cf79905858c0",
            "title": "Docker"
        },
        {
            "location": "/HowToOcSite/#manually",
            "text": "",
            "title": "Manually"
        },
        {
            "location": "/HowToOcSite/#install-the-asset-subscription-proxy",
            "text": "To push assets to the Organicity Central Orion, please clone the repository of the Asset-Subscription-Proxy\n and configure it:  git clone https://github.com/OrganicityEu-Platform/Asset-Subscription-Proxy.git\ncd Asset-Subscription-Proxy\ncp config.js.example config.js  Next, install the Dependencies:  npm install",
            "title": "Install the Asset-Subscription-Proxy"
        },
        {
            "location": "/HowToOcSite/#configure-the-asset-subscription-proxy",
            "text": "Edit the  config.js  by applying your  client_id  and  client_secret .  For the  Dev-Server , make sure the following configuration is used:  config.asset_directory_host = 'orion.organicity.eu';\nconfig.asset_directory_port = '443';\nconfig.asset_directory_protocol = 'https'  For the  Production Server , make sure the following configuration is used:   TODO   Afterwards, you can start the proxy:  node server",
            "title": "Configure the Asset-Subscription-Proxy"
        },
        {
            "location": "/HowToOcSite/#add-subscription-to-your-local-orion",
            "text": "Edit the  config.js  by applying your Orion configuration. In this tutorial we assume, that the Orion runs on  localhost:1026 :  Thus, use the following configuration:  config.orion_host = 'localhost';\nconfig.orion_port = 1026;\nconfig.orion_protocol = 'http';  The default  subscription_url  is  http://localhost:9999 . If this is wrong (e.g., Orion and Asset-Subscription-Proxy run on different machines), please modify the  config.subscription_url .  Afterwards, you can initiate the subscription:  node subscribe  If it was successful, you will see the subscription of the\nAsset-Subscription-Proxy at the Orion:  Successful: /v2/subscriptions/57ea49394735cf79905858c0  + Hint : You can run this only once. Otherwise, you have multiple subscriptions.  To unsubscribe, run:  node unsubscribe",
            "title": "Add Subscription to your local Orion"
        },
        {
            "location": "/HowToOcSite/#verify-subscription-at-your-local-orion",
            "text": "Now you can verify your subscription:  GET http://localhost:1026/v2/subscriptions/57ea49394735cf79905858c0\nAccept: application/json\nFiware-Service: organicity",
            "title": "Verify subscription at your local Orion"
        },
        {
            "location": "/HowToOcSite/#push-an-asset-to-your-local-orion",
            "text": "Test the federation. Keep the log of the Asset-Subscription-Proxy (or the docker log) open. Create an asset at your local orion, with:   HTTP header  Fiware-Service: organicity  The AssetID must correspond to your Site, e.g.,  urn:oc:entity:ocsite-<SiteName>:<AssetID>   An example (client ID  ocsite-test ):  POST http://{IP}:1026/v2/entities\nAccept: application/json\nContent-Type: application/json\nFiware-Service: organicity\n\n{\n  \"id\": \"urn:oc:entity:test:1\",\n  \"type\": \"urn:oc:entityType:demo\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  }\n}  The local Orion should send a notification to the Asset-Subscription-Proxy, which pushes the asset to the Organicity Central Orion. You should see messages like  2017-04-18 15:11:43.547  - DEBUG: Organicity-subscription-proxy - ### Try to update asset\n2017-04-18 15:11:43.547  - INFO: Organicity-subscription-proxy - Asset updating: urn:oc:entity:test:1\n2017-04-18 15:11:44.231  - DEBUG: Organicity-subscription-proxy - Update failed.\n2017-04-18 15:11:44.231  - DEBUG: Organicity-subscription-proxy - ### Try to create asset\n2017-04-18 15:11:44.231  - INFO: Organicity-subscription-proxy - Asset creating: urn:oc:entity:test:1\n2017-04-18 15:11:44.907  - INFO: Organicity-subscription-proxy - Asset created: urn:oc:entity:test:1\n2017-04-18 15:11:44.907  - DEBUG: Organicity-subscription-proxy - All assets handled!  Hint : There are always two steps (update and create) required to create an asset.",
            "title": "Push an Asset to your local Orion"
        },
        {
            "location": "/HowToPushAnAsset/",
            "text": "Tutorial: How to push an Assets to the Organicity Facility\n\n\nYou can push Assets to two different OC Sites: \n\n\n\n\nIf you're an experimenter, please follow the \nTutorial: How to push an Assets to the Organicity Experimenter Site\n.\n\n\nIf you're a citizen or an organization owining IoT devices and you want to provide the data, please follow the \nTutorial: How to push an Assets to the Organicity Provider Site\n.",
            "title": "How To Push An Asset"
        },
        {
            "location": "/HowToPushAnAsset/#tutorial-how-to-push-an-assets-to-the-organicity-facility",
            "text": "You can push Assets to two different OC Sites:    If you're an experimenter, please follow the  Tutorial: How to push an Assets to the Organicity Experimenter Site .  If you're a citizen or an organization owining IoT devices and you want to provide the data, please follow the  Tutorial: How to push an Assets to the Organicity Provider Site .",
            "title": "Tutorial: How to push an Assets to the Organicity Facility"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/",
            "text": "Tutorial: How to push an Assets to the Organicity Experimenter Site\n\n\nPrecondition\n\n\nTo be able to push an asset to the Organicity Experimenter Site (OC-Exp. Site), you need the \nexperimenter\n role. This will be assigned to you by the Organicity team.\n\n\nPostman\n\n\nWe created a postman file\n, which contains all steps from this guide.\n\n\nCreate an Experiment and an Application\n\n\nFirst of all, you must create an experiment within the \nExperimenter Portal\n. \nPlease log in and click on \n[NEW EXPERIMENT]\n and follow the instructions.\nAfter you created an experiment, select the experiment and click on \n[Experiment Credentials]\n. You will find two parts, for example:\n\n\n\n\nClient ID: \nexperiment-59f9d6a7a58622c52afcd885\n\n\nClient Secret: \n96a4bddf-25e6-49b0-b47b-37f9dc0c9eea\n\n\n\n\nAfterwards you must create an application. Please select the experiment and click on \n[applications]\n.\nAfter you created the application, please select that application. On top, you will find three IDs, for example:\n\n\n\n\nExperimenter ID\n: \ncf2c1723-3369-4123-8b32-49abe71c0e57\n\n\nExperiment ID\n: \n57e127c010590cb31ca82aa4\n\n\nApplication ID\n: \n57e1285a10590cb31ca82aa7\n\n\n\n\nGo back to the overview and makre sure, that the experiment shows the state \nRUNNING\n. \nYou can stop it, by clicking on \nRUNNING\n in the state column. The state is \nSTOPPED\n afterwards.\nIf an experiment is not running, you're not able to push assets.\n\n\nAuthorizaton\n\n\nAll HTTP requests require the \nAuthorization\n header. Please \nfollow the 'Client Credential Grant'\n to get an Access Token.\n\n\nPush a new asset\n\n\nThe Asset endpoint is located under \nhttps://exp.orion.organicity.eu/v2/entities\n.\n\n\nHTTP headers\n\n\nTo create a new asset, please do an HTTP POST on https://exp.orion.organicity.eu/v2/entities with the following HTTP headers:\n\n\nAuthorization: Bearer <AccessToken>\nX-Organicity-Application: <ApplicationID>\nX-Organicity-Experiment: <ExperimentID>\nContent-Type: application/json\nAccept: application/json\n\n<Asset in JSON>\n\n\n\n\nHere, you must use an \nAccess Token\n which is \nissued for you\n.\n\n\nFor the above IDs it looks like this:\n\n\nPOST https://exp.orion.organicity.eu/v2/entities\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: 57e1285a10590cb31ca82aa7\nX-Organicity-Experiment: 57e127c010590cb31ca82aa4\n\n<Asset in JSON>\n\n\n\n\nHTTP body\n\n\nThe HTTP body is an asset in JSON format \nas described here\n. Important for the creation is the correct Asset ID. An Asset ID has the form:\n\n\nurn:oc:entity:experimenters:<ExperimenterId>:<ExperimentId>:<AssetId>\n\n\n\n\nThe \n<ExperimenterId>\n and \n<ExpeirmentID>\n are the one from above. The \n<assetID>\n is application specifc. Thus, you decide how they look like. In our example, we wil just use an \n1\n as the Asset ID. In our example, it looks as follows:\n\n\nurn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1\n\n\n\n\nA simple valid asset could be:\n\n\n{\n    \"id\": \"urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1\",\n    \"type\": \"urn:oc:entityType:demo\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  },\n \"location\": {\n    \"type\": \"geo:point\",\n    \"value\": \"53.83404, 10.704197\"\n }\n}\n\n\n\n\nHint: the attribute \nTimeInstant\n is required. \nThe locaion attribute is optional, but needed if the assets should be shown in the \nUrban Data Observatory\n.\n\n\nFurther infomations about the attributes can be found in the \nAsset Data Model\n.\n\n\nWiring everything together\n\n\nNext, we wire everthing together: The HTTP headers and the asset:\n\n\nPOST https://exp.orion.organicity.eu/v2/entities\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: 57e1285a10590cb31ca82aa7\nX-Organicity-Experiment: 57e127c010590cb31ca82aa4\n\n{\n    \"id\": \"urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1\",\n    \"type\": \"urn:oc:entityType:demo\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  },\n \"location\": {\n    \"type\": \"geo:point\",\n    \"value\": \"53.83404, 10.704197\"\n }\n}\n\n\n\n\nThe response is a \n201 Created\n, which includes a \nlocation\n and a \nX-remainingQuota\n header:\n\n\nStatus Code: 201 Created\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT\n...\nLocation: /v2/entities/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1?type=urn:oc:entityType:demo\nX-remainingQuota: 999946\n...\n\n\n\n\nThe URL in the \nlocation\n header always links to the \nAssets Discovery API\n.\nThe \nX-remainingQuota\n header tells you, how many assets you can push until the quota is reached.\n\n\nValidate, that the asset was created successfully with the Asset Discovery API\n\n\nTo verify, that the asset was created in the Organicity Central Site, you must use the \nAsset Discovery API\n.\nYou can simply do an HTTP GET on the \nlocation\n header returnd by the creation:\n\n\nGET https://discovery.organicity.eu/v0/assets/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1\n\n\n\n\nValidate, that the asset was created successfully with the Urban Data Obervatory\n\n\nTo validate , that the asset was created successfully with the Urban Data Obervatory, just use your \nassetID\n and open the follwoing URL in the browser:\n\n\nGET https://observatory.organicity.eu/assets/{assetID}\n\n\n\n\nThat means for the above \nassetID\n:\n\n\nGET https://observatory.organicity.eu/assets/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1\n\n\n\n\nHint\n: Your assets needs the \nlocation\n attribute to be usable in the Urban Data Obervatory\n\n\nPush as an Participant\n\n\nTo push an asset as an participant, the participant must be part of you experiment. A participant can be invited\nwith the \nExperimenter Portal\n. If a participant logs in to your application,\nthe \nparticipant\n role will be assigned. The pushing itself works as abobe.\n\n\nHINTS\n:\n\n In the Asset ID, you keep the \n<ExperimenterId>\n!\n\n A participant can just create or read assets. Update and delete is not supported for participants.\n\n\nDelete and update assets\n\n\nSee How to \nDelete or Update an asset\n.\n\n\nDemo\n\n\nPush a new asset\n\n\nAn XMLHTTPRequest-based example can be found here: https://organicityeu.github.io/demo/pushAsset.html\n\n\nTODO in this documentation\n\n\n\n\nPublic/Private",
            "title": "How To Push An Asset To The Experimenter Site"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#tutorial-how-to-push-an-assets-to-the-organicity-experimenter-site",
            "text": "",
            "title": "Tutorial: How to push an Assets to the Organicity Experimenter Site"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#precondition",
            "text": "To be able to push an asset to the Organicity Experimenter Site (OC-Exp. Site), you need the  experimenter  role. This will be assigned to you by the Organicity team.",
            "title": "Precondition"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#postman",
            "text": "We created a postman file , which contains all steps from this guide.",
            "title": "Postman"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#create-an-experiment-and-an-application",
            "text": "First of all, you must create an experiment within the  Experimenter Portal . \nPlease log in and click on  [NEW EXPERIMENT]  and follow the instructions.\nAfter you created an experiment, select the experiment and click on  [Experiment Credentials] . You will find two parts, for example:   Client ID:  experiment-59f9d6a7a58622c52afcd885  Client Secret:  96a4bddf-25e6-49b0-b47b-37f9dc0c9eea   Afterwards you must create an application. Please select the experiment and click on  [applications] .\nAfter you created the application, please select that application. On top, you will find three IDs, for example:   Experimenter ID :  cf2c1723-3369-4123-8b32-49abe71c0e57  Experiment ID :  57e127c010590cb31ca82aa4  Application ID :  57e1285a10590cb31ca82aa7   Go back to the overview and makre sure, that the experiment shows the state  RUNNING . \nYou can stop it, by clicking on  RUNNING  in the state column. The state is  STOPPED  afterwards.\nIf an experiment is not running, you're not able to push assets.",
            "title": "Create an Experiment and an Application"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#authorizaton",
            "text": "All HTTP requests require the  Authorization  header. Please  follow the 'Client Credential Grant'  to get an Access Token.",
            "title": "Authorizaton"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#push-a-new-asset",
            "text": "The Asset endpoint is located under  https://exp.orion.organicity.eu/v2/entities .",
            "title": "Push a new asset"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#http-headers",
            "text": "To create a new asset, please do an HTTP POST on https://exp.orion.organicity.eu/v2/entities with the following HTTP headers:  Authorization: Bearer <AccessToken>\nX-Organicity-Application: <ApplicationID>\nX-Organicity-Experiment: <ExperimentID>\nContent-Type: application/json\nAccept: application/json\n\n<Asset in JSON>  Here, you must use an  Access Token  which is  issued for you .  For the above IDs it looks like this:  POST https://exp.orion.organicity.eu/v2/entities\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: 57e1285a10590cb31ca82aa7\nX-Organicity-Experiment: 57e127c010590cb31ca82aa4\n\n<Asset in JSON>",
            "title": "HTTP headers"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#http-body",
            "text": "The HTTP body is an asset in JSON format  as described here . Important for the creation is the correct Asset ID. An Asset ID has the form:  urn:oc:entity:experimenters:<ExperimenterId>:<ExperimentId>:<AssetId>  The  <ExperimenterId>  and  <ExpeirmentID>  are the one from above. The  <assetID>  is application specifc. Thus, you decide how they look like. In our example, we wil just use an  1  as the Asset ID. In our example, it looks as follows:  urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1  A simple valid asset could be:  {\n    \"id\": \"urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1\",\n    \"type\": \"urn:oc:entityType:demo\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  },\n \"location\": {\n    \"type\": \"geo:point\",\n    \"value\": \"53.83404, 10.704197\"\n }\n}  Hint: the attribute  TimeInstant  is required. \nThe locaion attribute is optional, but needed if the assets should be shown in the  Urban Data Observatory .  Further infomations about the attributes can be found in the  Asset Data Model .",
            "title": "HTTP body"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#wiring-everything-together",
            "text": "Next, we wire everthing together: The HTTP headers and the asset:  POST https://exp.orion.organicity.eu/v2/entities\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: 57e1285a10590cb31ca82aa7\nX-Organicity-Experiment: 57e127c010590cb31ca82aa4\n\n{\n    \"id\": \"urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1\",\n    \"type\": \"urn:oc:entityType:demo\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  },\n \"location\": {\n    \"type\": \"geo:point\",\n    \"value\": \"53.83404, 10.704197\"\n }\n}  The response is a  201 Created , which includes a  location  and a  X-remainingQuota  header:  Status Code: 201 Created\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT\n...\nLocation: /v2/entities/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1?type=urn:oc:entityType:demo\nX-remainingQuota: 999946\n...  The URL in the  location  header always links to the  Assets Discovery API .\nThe  X-remainingQuota  header tells you, how many assets you can push until the quota is reached.",
            "title": "Wiring everything together"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#validate-that-the-asset-was-created-successfully-with-the-asset-discovery-api",
            "text": "To verify, that the asset was created in the Organicity Central Site, you must use the  Asset Discovery API .\nYou can simply do an HTTP GET on the  location  header returnd by the creation:  GET https://discovery.organicity.eu/v0/assets/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1",
            "title": "Validate, that the asset was created successfully with the Asset Discovery API"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#validate-that-the-asset-was-created-successfully-with-the-urban-data-obervatory",
            "text": "To validate , that the asset was created successfully with the Urban Data Obervatory, just use your  assetID  and open the follwoing URL in the browser:  GET https://observatory.organicity.eu/assets/{assetID}  That means for the above  assetID :  GET https://observatory.organicity.eu/assets/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1  Hint : Your assets needs the  location  attribute to be usable in the Urban Data Obervatory",
            "title": "Validate, that the asset was created successfully with the Urban Data Obervatory"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#push-as-an-participant",
            "text": "To push an asset as an participant, the participant must be part of you experiment. A participant can be invited\nwith the  Experimenter Portal . If a participant logs in to your application,\nthe  participant  role will be assigned. The pushing itself works as abobe.  HINTS :  In the Asset ID, you keep the  <ExperimenterId> !  A participant can just create or read assets. Update and delete is not supported for participants.",
            "title": "Push as an Participant"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#delete-and-update-assets",
            "text": "See How to  Delete or Update an asset .",
            "title": "Delete and update assets"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#demo",
            "text": "",
            "title": "Demo"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#push-a-new-asset_1",
            "text": "An XMLHTTPRequest-based example can be found here: https://organicityeu.github.io/demo/pushAsset.html",
            "title": "Push a new asset"
        },
        {
            "location": "/HowToPushAnAssetToTheExperimenterSite/#todo-in-this-documentation",
            "text": "Public/Private",
            "title": "TODO in this documentation"
        },
        {
            "location": "/HowToPushAnAssetToTheProviderSite/",
            "text": "Tutorial: How to push an Assets to the Organicity Provider Site\n\n\nTODO",
            "title": "How To Push An Asset To The Provider Site"
        },
        {
            "location": "/HowToPushAnAssetToTheProviderSite/#tutorial-how-to-push-an-assets-to-the-organicity-provider-site",
            "text": "TODO",
            "title": "Tutorial: How to push an Assets to the Organicity Provider Site"
        },
        {
            "location": "/HowToRefreshToken/",
            "text": "Tutorial: How to Refresh Tokens\n\n\nGoal of this tutorial\n:\n\n\n\n\nRefresh the token of a user for your own application with \nOrganicity Accounts\n (Offline Tokens).\n\n\n\n\nPreconditions\n:\n\n\n\n\nYou created an experiment within the \nOrganicity Experimenter Portal\n.\n\n\nThe Experimenter Portal provides you a \nclient_id\n and a \nclient_secret\n, both is needed in this tutorial.\n\n\nAdditionally, you're experiment needs the role \noffline_access\n to get Refresh Tokens. This will be assigned to your experiment by the Organicity team.\n\n\n\n\nAuthentication in Organicity is activity-centere: Users acquire \nAccess Tokens\n to perform an action with them in the next minutes. Access Tokens invalidate after 5 minutes, and have to be renewed with Refresh Tokens.\n\n\nWhile this is good for security, it is unusable for long-term applications that run without supervision, like environmentally deployed sensor nodes.\nAs these nodes still need to contact Organicity, for example to post measured data, they need a way to authenticate. This is facilitated by Refresh Tokens.\n\n\nPlease note\n: In order to generate Offline Tokens, a user needs to have the required role \noffline_access\n. Usually, every user gets this role when they sign up.\n\n\nAcquire Refresh Tokens\n\n\nTo acquire Refresh Tokens, you just need to append the additional query parameter \nscope=offline_access\n to your Authorization Endpoint.\n\n\nAuthorization Code Grant\n\n\nThe flow is the same as \ndescribed here\n, just with the additional query parameter \nscope=offline_access\n.\n\n\nThe full authorization URL looks as follows:\n\n\n https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=code&client_id=<CLIENT_ID>&redirect_uri=<REDIRECT_URI>&scope=offline_access\n\n\n\n\nAs in the Authorization Code Grant, it returns an \nAuthorization Code\n which must be converted into an Access Token.\n\n\nIf successful, the server returns a JSON, which contains the following attributes:\n\n\n\n\ntoken_type\n: This is usually \nBearer\n\n\naccess_token\n: this is the \nAccess Token\n in JSON\n\n\nexpires_in\n: a number in seconds, how long the Access Token is valid\n\n\nrefresh_token\n: this is the \nRefresh Token\n\n\ntyp\n: The type is \u00e0lways \nOffline\n\n\nrefresh_expires_in\n: this is usually \n0\n, because the Refresh Token never exipres\n\n\n\n\nAn example:\n\n\n{\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 300,\n    \"refresh_token\": <REFRESH_TOKEN>,\n    \"typ\": Offline\",\n    \"refresh_expires_in\": 0\n}\n\n\n\n\nImplicit Grant\n\n\nThis grant cannot return a refresh token, because the application cannot keep the \nclient_secret\n confidential (see below).\n\n\nClient Credential Grant\n\n\nThis grant cannot return a refresh token, because this grant directly returns the Access Token.\n\n\nRefresh Token Grant\n\n\nTo use a the \nRefresh Token Grant\n, you perform a simple HTTPS call, which will return a new suitable Access Token.\n\n\nOption A (\nclient_id\n and \nclient_secret\n in the header):\n\n\nPOST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nAuthorization: Basic <BASE64_ENCODE(<CLIENT_ID>:<CLIENT_SECRET>)> \nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&refresh_token=<REFRESH_TOKEN>\n\n\n\n\nThe Authorization header contains your \nclient_id\n and \nclient_secret\n encoded with HTTP basic authentication. For details on how to create this field, \nsee here\n.\n\n\nOption B (\nclient_id\n and \nclient_secret\n in the body):\n\n\nPOST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&refresh_token=<REFRESH_TOKEN>&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>\n\n\n\n\nPlease note, that the same \nclient_id\n and \nclient_secret\n is needed to refresh the token.\n\n\nThe server verifies your credentials and the refresh token.\nIf successful, the server returns a JSON record as described above.\n\n\nPlease note\n\n\n\n\nRefresh Tokens are valid indefinitely, thus Refresh Tokens will remain valid from call to call, so each renewal can be performed with \nthe same initial Refresh Token\n! This means, there is no reason to store the refresh Token from the response. Thus, Offline-Tokens can be used by embedded devices like IoT devices.\n\n\nThis is normal \nAccess Token\n, which can be used a Bearer Token for all Organicity APIs\n\n\nThe \nAccess Token is valid for 5 Minutes\n, thus a refresh is needed after 5 minutes.\n\n\nAn Access Token needs to be refreshed at least \nevery 30 days\n, as otherwise the Refresh Token will invalidate, and a new Refresh Token needs to be generated.\n\n\n\n\nCode Sample\n\n\nNext we will describe a way, how you get Offline Tokens with the node.js tool \naccounts-demo-passport\n.\n\n\nTo get the initial Refresh Token, please install the tool as described in the README. Change the file \nserver/auth/oauth2.js\n by adding your \nclient_id\n and \nclient_secret\n and run the application. The application runs on port 3000 by default. Set the environment variable PORT to another if needed (e.g., \nPORT=4000\n). Make sure, that you configure the following callback URL in the \nExperimenter Portal\n:\n\n\n\n\nhttp://localhost:3000/auth/oauth2/callback\n\n\n\n\nAfterwards, open the application within your browser:\n\n\n\n\nhttp://localhost:3000\n\n\n\n\nPlease login with your username and password (or social login) and open the profile page. There you find two tokens: an Access Token and a Refresh Token.",
            "title": "How To Refresh Token"
        },
        {
            "location": "/HowToRefreshToken/#tutorial-how-to-refresh-tokens",
            "text": "Goal of this tutorial :   Refresh the token of a user for your own application with  Organicity Accounts  (Offline Tokens).   Preconditions :   You created an experiment within the  Organicity Experimenter Portal .  The Experimenter Portal provides you a  client_id  and a  client_secret , both is needed in this tutorial.  Additionally, you're experiment needs the role  offline_access  to get Refresh Tokens. This will be assigned to your experiment by the Organicity team.   Authentication in Organicity is activity-centere: Users acquire  Access Tokens  to perform an action with them in the next minutes. Access Tokens invalidate after 5 minutes, and have to be renewed with Refresh Tokens.  While this is good for security, it is unusable for long-term applications that run without supervision, like environmentally deployed sensor nodes.\nAs these nodes still need to contact Organicity, for example to post measured data, they need a way to authenticate. This is facilitated by Refresh Tokens.  Please note : In order to generate Offline Tokens, a user needs to have the required role  offline_access . Usually, every user gets this role when they sign up.",
            "title": "Tutorial: How to Refresh Tokens"
        },
        {
            "location": "/HowToRefreshToken/#acquire-refresh-tokens",
            "text": "To acquire Refresh Tokens, you just need to append the additional query parameter  scope=offline_access  to your Authorization Endpoint.",
            "title": "Acquire Refresh Tokens"
        },
        {
            "location": "/HowToRefreshToken/#authorization-code-grant",
            "text": "The flow is the same as  described here , just with the additional query parameter  scope=offline_access .  The full authorization URL looks as follows:   https://accounts.organicity.eu/realms/organicity/protocol/openid-connect/auth?response_type=code&client_id=<CLIENT_ID>&redirect_uri=<REDIRECT_URI>&scope=offline_access  As in the Authorization Code Grant, it returns an  Authorization Code  which must be converted into an Access Token.  If successful, the server returns a JSON, which contains the following attributes:   token_type : This is usually  Bearer  access_token : this is the  Access Token  in JSON  expires_in : a number in seconds, how long the Access Token is valid  refresh_token : this is the  Refresh Token  typ : The type is \u00e0lways  Offline  refresh_expires_in : this is usually  0 , because the Refresh Token never exipres   An example:  {\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 300,\n    \"refresh_token\": <REFRESH_TOKEN>,\n    \"typ\": Offline\",\n    \"refresh_expires_in\": 0\n}",
            "title": "Authorization Code Grant"
        },
        {
            "location": "/HowToRefreshToken/#implicit-grant",
            "text": "This grant cannot return a refresh token, because the application cannot keep the  client_secret  confidential (see below).",
            "title": "Implicit Grant"
        },
        {
            "location": "/HowToRefreshToken/#client-credential-grant",
            "text": "This grant cannot return a refresh token, because this grant directly returns the Access Token.",
            "title": "Client Credential Grant"
        },
        {
            "location": "/HowToRefreshToken/#refresh-token-grant",
            "text": "To use a the  Refresh Token Grant , you perform a simple HTTPS call, which will return a new suitable Access Token.  Option A ( client_id  and  client_secret  in the header):  POST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nAuthorization: Basic <BASE64_ENCODE(<CLIENT_ID>:<CLIENT_SECRET>)> \nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&refresh_token=<REFRESH_TOKEN>  The Authorization header contains your  client_id  and  client_secret  encoded with HTTP basic authentication. For details on how to create this field,  see here .  Option B ( client_id  and  client_secret  in the body):  POST /realms/organicity/protocol/openid-connect/token HTTP/1.1\nHost: accounts.organicity.eu\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&refresh_token=<REFRESH_TOKEN>&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>  Please note, that the same  client_id  and  client_secret  is needed to refresh the token.  The server verifies your credentials and the refresh token.\nIf successful, the server returns a JSON record as described above.",
            "title": "Refresh Token Grant"
        },
        {
            "location": "/HowToRefreshToken/#please-note",
            "text": "Refresh Tokens are valid indefinitely, thus Refresh Tokens will remain valid from call to call, so each renewal can be performed with  the same initial Refresh Token ! This means, there is no reason to store the refresh Token from the response. Thus, Offline-Tokens can be used by embedded devices like IoT devices.  This is normal  Access Token , which can be used a Bearer Token for all Organicity APIs  The  Access Token is valid for 5 Minutes , thus a refresh is needed after 5 minutes.  An Access Token needs to be refreshed at least  every 30 days , as otherwise the Refresh Token will invalidate, and a new Refresh Token needs to be generated.",
            "title": "Please note"
        },
        {
            "location": "/HowToRefreshToken/#code-sample",
            "text": "Next we will describe a way, how you get Offline Tokens with the node.js tool  accounts-demo-passport .  To get the initial Refresh Token, please install the tool as described in the README. Change the file  server/auth/oauth2.js  by adding your  client_id  and  client_secret  and run the application. The application runs on port 3000 by default. Set the environment variable PORT to another if needed (e.g.,  PORT=4000 ). Make sure, that you configure the following callback URL in the  Experimenter Portal :   http://localhost:3000/auth/oauth2/callback   Afterwards, open the application within your browser:   http://localhost:3000   Please login with your username and password (or social login) and open the profile page. There you find two tokens: an Access Token and a Refresh Token.",
            "title": "Code Sample"
        },
        {
            "location": "/HowToUpdateDeteleAnAsset/",
            "text": "Tutorial: How to update or delete an Assets to the Organicity Experimenter Site\n\n\nPrecondition\n:\n\n\n\n\nTo be able to update/delete an asset to the Organicity Experimenter Site (OC-Exp. Site), you need the \nexperimenter\n role. This will be assigned to you by the Organicity team.\n\n\nYou should know \nhow to push an Asset to the Organicity Platform\n.\n\n\n\n\nUpdate an asset\n\n\nThe update of an asset works similar to the creation (with some minor changes):\n\n\n\n\nTo update a new asset, please do an HTTP POST on \nhttps://exp.orion.organicity.eu/v2/entities/<AssetID>/attrs\n with the\n\nsame HTTP headers\n as in the creation step:\n\n\nAuthorization: Bearer <AccessToken>\nX-Organicity-Application: <ApplicationID>\nX-Organicity-Experiment: <ExperimentID>\nContent-Type: application/json\nAccept: application/json\n\n<Asset in JSON>\n\n\n\n\nHint\n: Be aware of the \n/attrs\n while updating an asset!\n\n\nAsset ID\n\n\nImportant for the update is, that the \nsame Asset ID\n is used as during the creation.\n\n\nHTTP body\n\n\nThe HTTP body is an asset in JSON format \nas described here\n. To update an asset, you're not allowed to use the JSON attributes\n\nid\n and \ntype\n.\n\n\nA simple valid asset for an update could be:\n\n\n{\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  },\n \"location\": {\n    \"type\": \"geo:point\",\n    \"value\": \"53.83404, 10.704197\"\n }\n}\n\n\n\n\nWiring everything together\n\n\nNext, we wire everthing together: The HTTP headers and the asset:\n\n\nPOST https://exp.orion.organicity.eu/v2/entities/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1/attrs\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: 57e1285a10590cb31ca82aa7\nX-Organicity-Experiment: 57e127c010590cb31ca82aa4\n\n{\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  },\n \"location\": {\n    \"type\": \"geo:point\",\n    \"value\": \"53.83404, 10.704197\"\n }\n}\n\n\n\n\nIf the asset was created before, you get a \n404 Not Found\n which tells you, that the asset does not exixts. Please make sure, that you \npushed the Asset to the Organicity Platform\n.\n\n\nIf the asset was created before, and everything else is correct, e.g, HTTP headers, asset format, etc., then the response is a \n204 No Content\n, which tells you that asset was updated:\n\n\nStatus Code: 204 No Content\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT\n...\nLocation: /v2/entities/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1?type=urn:oc:entityType:demo\nX-remainingQuota: 999946\n...\n\n\n\n\nAs for the creation, the headers \nlocation\n and \nX-remainingQuota\n will be provided.\n\n\nValidate, that the asset was updated successfully with the Urban Data Obervatory\n\n\nTo verify, that the asset was updated in Organicity Central Site, you must use the \nAsset Discovery Service\n.\nYou can simply do an HTTP GET on the \nlocation\n header returnd by the creation:\n\n\nGET https://discovery.organicity.eu/v0/assets/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1\n\n\n\n\nHint\n: This only works, if the privacy level of your asset is public.\n\n\nDelete an asset\n\n\nTo delete the asset, you must do an HTTP \nDELETE\n to the OC-Exp. Site. You must add the \nAuthorization\n,\n\nX-Organicity-Application\n and \nX-Organicity-Experiment\n headers as well:\n\n\nDELETE https://exp.orion.organicity.eu/v2/entities/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1?type=urn:oc:entityType:demo\n\nAuthorization: Bearer <AccessToken>\nAccept: application/json\nX-Organicity-Application: 57e1285a10590cb31ca82aa7\nX-Organicity-Experiment: 57e127c010590cb31ca82aa4\n\n\n\n\nThe response is a \n204 No Content\n, which tells you that asset was deleted:\n\n\nStatus Code: 204 No Content\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT\n...\nX-remainingQuota: 999946\n\n\n\n\nAs for the update, the header \nX-remainingQuota\n will be provided. It contains the new quota after deleting an asset.\n\n\nUpdate/Delete as an Participant\n\n\nThis is not supported.",
            "title": "How To Update Detele An Asset"
        },
        {
            "location": "/HowToUpdateDeteleAnAsset/#tutorial-how-to-update-or-delete-an-assets-to-the-organicity-experimenter-site",
            "text": "Precondition :   To be able to update/delete an asset to the Organicity Experimenter Site (OC-Exp. Site), you need the  experimenter  role. This will be assigned to you by the Organicity team.  You should know  how to push an Asset to the Organicity Platform .",
            "title": "Tutorial: How to update or delete an Assets to the Organicity Experimenter Site"
        },
        {
            "location": "/HowToUpdateDeteleAnAsset/#update-an-asset",
            "text": "The update of an asset works similar to the creation (with some minor changes):",
            "title": "Update an asset"
        },
        {
            "location": "/HowToUpdateDeteleAnAsset/#asset-id",
            "text": "Important for the update is, that the  same Asset ID  is used as during the creation.",
            "title": "Asset ID"
        },
        {
            "location": "/HowToUpdateDeteleAnAsset/#http-body",
            "text": "The HTTP body is an asset in JSON format  as described here . To update an asset, you're not allowed to use the JSON attributes id  and  type .  A simple valid asset for an update could be:  {\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  },\n \"location\": {\n    \"type\": \"geo:point\",\n    \"value\": \"53.83404, 10.704197\"\n }\n}",
            "title": "HTTP body"
        },
        {
            "location": "/HowToUpdateDeteleAnAsset/#wiring-everything-together",
            "text": "Next, we wire everthing together: The HTTP headers and the asset:  POST https://exp.orion.organicity.eu/v2/entities/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1/attrs\n\nAuthorization: Bearer <AccessToken>\nContent-Type: application/json\nAccept: application/json\nX-Organicity-Application: 57e1285a10590cb31ca82aa7\nX-Organicity-Experiment: 57e127c010590cb31ca82aa4\n\n{\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\"\n  },\n \"location\": {\n    \"type\": \"geo:point\",\n    \"value\": \"53.83404, 10.704197\"\n }\n}  If the asset was created before, you get a  404 Not Found  which tells you, that the asset does not exixts. Please make sure, that you  pushed the Asset to the Organicity Platform .  If the asset was created before, and everything else is correct, e.g, HTTP headers, asset format, etc., then the response is a  204 No Content , which tells you that asset was updated:  Status Code: 204 No Content\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT\n...\nLocation: /v2/entities/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1?type=urn:oc:entityType:demo\nX-remainingQuota: 999946\n...  As for the creation, the headers  location  and  X-remainingQuota  will be provided.",
            "title": "Wiring everything together"
        },
        {
            "location": "/HowToUpdateDeteleAnAsset/#validate-that-the-asset-was-updated-successfully-with-the-urban-data-obervatory",
            "text": "To verify, that the asset was updated in Organicity Central Site, you must use the  Asset Discovery Service .\nYou can simply do an HTTP GET on the  location  header returnd by the creation:  GET https://discovery.organicity.eu/v0/assets/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1  Hint : This only works, if the privacy level of your asset is public.",
            "title": "Validate, that the asset was updated successfully with the Urban Data Obervatory"
        },
        {
            "location": "/HowToUpdateDeteleAnAsset/#delete-an-asset",
            "text": "To delete the asset, you must do an HTTP  DELETE  to the OC-Exp. Site. You must add the  Authorization , X-Organicity-Application  and  X-Organicity-Experiment  headers as well:  DELETE https://exp.orion.organicity.eu/v2/entities/urn:oc:entity:experimenters:cf2c1723-3369-4123-8b32-49abe71c0e57:57e127c010590cb31ca82aa4:1?type=urn:oc:entityType:demo\n\nAuthorization: Bearer <AccessToken>\nAccept: application/json\nX-Organicity-Application: 57e1285a10590cb31ca82aa7\nX-Organicity-Experiment: 57e127c010590cb31ca82aa4  The response is a  204 No Content , which tells you that asset was deleted:  Status Code: 204 No Content\n...\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Tue, 20 Sep 2016 12:37:07 GMT\n...\nX-remainingQuota: 999946  As for the update, the header  X-remainingQuota  will be provided. It contains the new quota after deleting an asset.",
            "title": "Delete an asset"
        },
        {
            "location": "/HowToUpdateDeteleAnAsset/#updatedelete-as-an-participant",
            "text": "This is not supported.",
            "title": "Update/Delete as an Participant"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/",
            "text": "img[src$=\"centerme\"] {\n  display:block;\n  margin: 0 auto;\n}\n\n\n\n\nTutorial: How to Create Annotation Tags\n\n\nUsing the Experimenter's Portal\n\n\nExperimenters can create and manage the Tag Domains and Tags of their experiment using the Experimenter's portal \nAnnotation\n interface.\n\n\n\n\nIn more detail, each experiment created using the Experimenter's Portal automatically owns and is associated with a single \nTagDomain\n named after the Experiment. \n\n\n\n\nUsing this interface, experimenters can select and add more \nTagDomains\n to their experiment if needed, by clicking on the list of \"Predefined tag domains\" available.\n\n\n\n\nAlso it is possible for experimenters to create new \nTagDomains\n and add/remove \nTags\n to them using the following interface.\n\n\n\n\nUsing the API\n\n\nAlternatively, users can interact with the \nAnnotation Service\n using the provided Restful API. The full description of the API is available \nhere\n. \n\n\nCreation of a TagDomain\n\n\nTo create a \nTagDomain\n experimenters need to use the \ndomainCreate\n API call.\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n  \"description\": \"a tag domain for faulty noise level\",\n  \"tags\": [\n    {\n      \"id\": 123,\n      \"name\": \"faulty\",\n      \"urn\": \"urn:tag:faulty\"\n    },\n    {\n          \"id\": 132,\n          \"name\": \"normal\",\n          \"urn\": \"urn:tag:normal\"\n    }\n  ],\n  \"urn\": \"urn:tagDomain:86d7edce-5092-44c0-bed8-da4beaa3fbc6:malfunctioning\"\n}' 'https://annotations.organicity.eu/admin/tagDomains'\n\n\n\n\nRetrieval of a TagDomain\n\n\nTo retrieve the information of a \nTagDomain\n experimenters need to use the \ndomainFindByUrn\n API call.\n\n\ncurl -X GET --header 'Accept: application/json' 'https://annotations.organicity.eu/tagDomains/urn%3AtagDomain%3A86d7edce-5092-44c0-bed8-da4beaa3fbc6%3Amalfunctioning'\n\n\n\n\nListing of Tags of TagDomain\n\n\nTo retrieve the tags of a \nTagDomain\n experimenters need to use the \ndomainGetTags\n API call.\n\n\ncurl -X GET --header 'Accept: application/json' 'https://annotations.organicity.eu/tagDomains/urn%3AtagDomain%3A86d7edce-5092-44c0-bed8-da4beaa3fbc6%3Amalfunctioning/tags'\n\n\n\n\nAssociate Experiment with an Tag Domain\n\n\nTo add a \nTagDomain\n to the list of selected \nTagDomains\n of an \nExperiment\n experimenters need to use the \nexperimentAddTagDomains\n API call.\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' 'https://annotations.organicity.eu/admin/applications/urn%3Aapplication%3A86d7edce-5092-44c0-bed8-da4beaa3fbc6/tagDomains?tagDomainUrn=urn%3AtagDomain%3A86d7edce-5092-44c0-bed8-da4beaa3fbc6%3Amalfunctioning'\n\n\n\n\nUsing the Java Client\n\n\nAlso, users can interact with the \nAnnotation Service\n using the available JAVA and Android client for the \nAnnotation Service\n. The code of the Annotation Service Clients is available \nhere\n. \n\n\nUsing in Maven\n\n\nTo use the \nAnnotation Service Client\n in Java project you need to add the following dependency in you \npom.xml\n.\n\n\n<repositories>\n    <repository>\n        <id>organicity</id>\n        <url>https://maven.organicity.eu/content/repositories/snapshots</url>\n    </repository>\n</repositories>\n\n<dependencies>\n    <dependency>\n        <groupId>eu.organicity</groupId>\n        <artifactId>annotations-client</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </dependency> \n</dependencies> \n\n\n\n\nUsing in Gradle for Android\n\n\nTo use the \nAnnotation Service Android Client\n in Android application you need to add the following dependency in you \nbuild.gradle\n.\n\n\nrepositories {\n    mavenLocal()\n    mavenCentral()\n    maven { url 'https://maven.organicity.eu/content/repositories/snapshots' }\n}\n\ndependencies {\n    compile('eu.organicity:annotations-android-client:1.0-SNAPSHOT') {\n        exclude module: 'spring-boot-starter'\n        exclude module: 'spring-web'\n        exclude module: 'jackson-annotations'\n        exclude module: 'jackson-databind'\n        exclude module: 'spring-boot-starter-logging'\n        exclude module: 'jackson-mapper-asl'\n        exclude module: 'commons-logging'\n    }\n}\n\n\n\n\nCreation of a TagDomain\n\n\nfinal AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nfinal String TAG_DOMAIN = \"urn:oc:tagDomain:EmptyStation\";\nclient.addTagDomain(TAG_DOMAIN, \"Describes Emptiness\");\nclient.addTag(TAG_DOMAIN, \"urn:oc:tagDomain:EmptyStation:empty\", \"Empty\");\nclient.addTag(TAG_DOMAIN, \"urn:oc:tagDomain:EmptyStation:nonempty\", \"Non Empty\");\n\n\n\n\nRetrieval of a TagDomain\n\n\nfinal AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nTagDomainDTO dto = client.getTagDomain(\"urn:oc:tagDomain:AnomalyDetection\");\nSystem.out.println(dto);\n\n\n\n\nListing of Tags of TagDomain\n\n\nfinal AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nTagDTO[] tags = client.getTags(\"urn:oc:tagDomain:AnomalyDetection\");\nfor (TagDTO tag : tags) {\n    System.out.println(tag);\n}\n\n\n\n\nAssociate Experiment with an Tag Domain\n\n\nfinal AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nExperimentDTO dto = client.experimentAddTagDomains(\"expeirment\", \"urn:oc:tagDomain:AnomalyDetection\");\nSystem.out.println(dto);\n\n\n\n\nPost an Annotation\n\n\nfinal AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nAnnotationDTO dto = new AnnotationDTO();\ndto.setApplication(\"nameOftheApplication\");\ndto.setAssetUrn(\"urn:oc:entity:patras:easybike:bikestation:293:301\");\ndto.setUser(\"organcity sub of the user if available\");\ndto.setNumericValue(0.0);\ndto.setTagUrn(\"urn:oc:tagDomain:IndoorHumidityLevels:high\");\ndto.setTextValue(\"\");\ndto = client.postAnnotation(dto);\nSystem.out.println(dto);\n\n\n\n\nListing All Annotations\n\n\nfinal AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nAnnotationDTO[] annotations = client.getAnnotations();\nfor (AnnotationDTO annotation : annotations) {\n    System.out.println(annotation);\n}\n\n\n\n\nPosting Annotations\n\n\nNow lets jump to \nposting annotations\n.",
            "title": "How To Create Annotation Tags"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#tutorial-how-to-create-annotation-tags",
            "text": "",
            "title": "Tutorial: How to Create Annotation Tags"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#using-the-experimenters-portal",
            "text": "Experimenters can create and manage the Tag Domains and Tags of their experiment using the Experimenter's portal  Annotation  interface.   In more detail, each experiment created using the Experimenter's Portal automatically owns and is associated with a single  TagDomain  named after the Experiment.    Using this interface, experimenters can select and add more  TagDomains  to their experiment if needed, by clicking on the list of \"Predefined tag domains\" available.   Also it is possible for experimenters to create new  TagDomains  and add/remove  Tags  to them using the following interface.",
            "title": "Using the Experimenter's Portal"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#using-the-api",
            "text": "Alternatively, users can interact with the  Annotation Service  using the provided Restful API. The full description of the API is available  here .",
            "title": "Using the API"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#creation-of-a-tagdomain",
            "text": "To create a  TagDomain  experimenters need to use the  domainCreate  API call.  curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n  \"description\": \"a tag domain for faulty noise level\",\n  \"tags\": [\n    {\n      \"id\": 123,\n      \"name\": \"faulty\",\n      \"urn\": \"urn:tag:faulty\"\n    },\n    {\n          \"id\": 132,\n          \"name\": \"normal\",\n          \"urn\": \"urn:tag:normal\"\n    }\n  ],\n  \"urn\": \"urn:tagDomain:86d7edce-5092-44c0-bed8-da4beaa3fbc6:malfunctioning\"\n}' 'https://annotations.organicity.eu/admin/tagDomains'",
            "title": "Creation of a TagDomain"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#retrieval-of-a-tagdomain",
            "text": "To retrieve the information of a  TagDomain  experimenters need to use the  domainFindByUrn  API call.  curl -X GET --header 'Accept: application/json' 'https://annotations.organicity.eu/tagDomains/urn%3AtagDomain%3A86d7edce-5092-44c0-bed8-da4beaa3fbc6%3Amalfunctioning'",
            "title": "Retrieval of a TagDomain"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#listing-of-tags-of-tagdomain",
            "text": "To retrieve the tags of a  TagDomain  experimenters need to use the  domainGetTags  API call.  curl -X GET --header 'Accept: application/json' 'https://annotations.organicity.eu/tagDomains/urn%3AtagDomain%3A86d7edce-5092-44c0-bed8-da4beaa3fbc6%3Amalfunctioning/tags'",
            "title": "Listing of Tags of TagDomain"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#associate-experiment-with-an-tag-domain",
            "text": "To add a  TagDomain  to the list of selected  TagDomains  of an  Experiment  experimenters need to use the  experimentAddTagDomains  API call.  curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' 'https://annotations.organicity.eu/admin/applications/urn%3Aapplication%3A86d7edce-5092-44c0-bed8-da4beaa3fbc6/tagDomains?tagDomainUrn=urn%3AtagDomain%3A86d7edce-5092-44c0-bed8-da4beaa3fbc6%3Amalfunctioning'",
            "title": "Associate Experiment with an Tag Domain"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#using-the-java-client",
            "text": "Also, users can interact with the  Annotation Service  using the available JAVA and Android client for the  Annotation Service . The code of the Annotation Service Clients is available  here .",
            "title": "Using the Java Client"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#using-in-maven",
            "text": "To use the  Annotation Service Client  in Java project you need to add the following dependency in you  pom.xml .  <repositories>\n    <repository>\n        <id>organicity</id>\n        <url>https://maven.organicity.eu/content/repositories/snapshots</url>\n    </repository>\n</repositories>\n\n<dependencies>\n    <dependency>\n        <groupId>eu.organicity</groupId>\n        <artifactId>annotations-client</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </dependency> \n</dependencies>",
            "title": "Using in Maven"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#using-in-gradle-for-android",
            "text": "To use the  Annotation Service Android Client  in Android application you need to add the following dependency in you  build.gradle .  repositories {\n    mavenLocal()\n    mavenCentral()\n    maven { url 'https://maven.organicity.eu/content/repositories/snapshots' }\n}\n\ndependencies {\n    compile('eu.organicity:annotations-android-client:1.0-SNAPSHOT') {\n        exclude module: 'spring-boot-starter'\n        exclude module: 'spring-web'\n        exclude module: 'jackson-annotations'\n        exclude module: 'jackson-databind'\n        exclude module: 'spring-boot-starter-logging'\n        exclude module: 'jackson-mapper-asl'\n        exclude module: 'commons-logging'\n    }\n}",
            "title": "Using in Gradle for Android"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#creation-of-a-tagdomain_1",
            "text": "final AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nfinal String TAG_DOMAIN = \"urn:oc:tagDomain:EmptyStation\";\nclient.addTagDomain(TAG_DOMAIN, \"Describes Emptiness\");\nclient.addTag(TAG_DOMAIN, \"urn:oc:tagDomain:EmptyStation:empty\", \"Empty\");\nclient.addTag(TAG_DOMAIN, \"urn:oc:tagDomain:EmptyStation:nonempty\", \"Non Empty\");",
            "title": "Creation of a TagDomain"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#retrieval-of-a-tagdomain_1",
            "text": "final AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nTagDomainDTO dto = client.getTagDomain(\"urn:oc:tagDomain:AnomalyDetection\");\nSystem.out.println(dto);",
            "title": "Retrieval of a TagDomain"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#listing-of-tags-of-tagdomain_1",
            "text": "final AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nTagDTO[] tags = client.getTags(\"urn:oc:tagDomain:AnomalyDetection\");\nfor (TagDTO tag : tags) {\n    System.out.println(tag);\n}",
            "title": "Listing of Tags of TagDomain"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#associate-experiment-with-an-tag-domain_1",
            "text": "final AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nExperimentDTO dto = client.experimentAddTagDomains(\"expeirment\", \"urn:oc:tagDomain:AnomalyDetection\");\nSystem.out.println(dto);",
            "title": "Associate Experiment with an Tag Domain"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#post-an-annotation",
            "text": "final AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nAnnotationDTO dto = new AnnotationDTO();\ndto.setApplication(\"nameOftheApplication\");\ndto.setAssetUrn(\"urn:oc:entity:patras:easybike:bikestation:293:301\");\ndto.setUser(\"organcity sub of the user if available\");\ndto.setNumericValue(0.0);\ndto.setTagUrn(\"urn:oc:tagDomain:IndoorHumidityLevels:high\");\ndto.setTextValue(\"\");\ndto = client.postAnnotation(dto);\nSystem.out.println(dto);",
            "title": "Post an Annotation"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#listing-all-annotations",
            "text": "final AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nAnnotationDTO[] annotations = client.getAnnotations();\nfor (AnnotationDTO annotation : annotations) {\n    System.out.println(annotation);\n}",
            "title": "Listing All Annotations"
        },
        {
            "location": "/annotations/tutorials/HowToCreateAnnotationTags/#posting-annotations",
            "text": "Now lets jump to  posting annotations .",
            "title": "Posting Annotations"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/",
            "text": "img[src$=\"centerme\"] {\n  display:block;\n  margin: 0 auto;\n}\n\n\n\n\nTutorial: How to Annotate an Asset\n\n\n\n\n\nUsing the API\n\n\nUsers can interact with the \nAnnotation Service\n using the provided Restful API. The full description of the API is available \nhere\n. \n\n\nPost an Annotation\n\n\nTo retrieve the tags of a \nTagDomain\n experimenters need to use \ncreateAnnotation\n API call.\n\n\nThis api call requires the following json object to be provided in the post request's body:\n\n\n{\n  \"application\": \"nameOftheApplication\",\n  \"assetUrn\": \"urn:oc:entity:patras:easybike:bikestation:293:301\",\n  \"numericValue\": 0,\n  \"tagUrn\": \"urn:oc:tagDomain:IndoorHumidityLevels:high\",\n  \"textValue\": \"\",\n  \"user\": \"organcity sub of the user if available\"\n}\n\n\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n  \"application\": \"nameOftheApplication\",\n  \"assetUrn\": \"urn:oc:entity:patras:easybike:bikestation:293:301\",\n  \"numericValue\": 0,\n  \"tagUrn\": \"urn:oc:tagDomain:IndoorHumidityLevels:high\",\n  \"textValue\": \"\",\n  \"user\": \"organcity sub of the user if available\"\n}' 'https://annotations.organicity.eu/annotations/urn%3Aoc%3Aentity%3Apatras%3Aeasybike%3Abikestation%3A293%3A301'\n\n\n\n\nListing All Annotations\n\n\nTo retrieve the list of \nAnnotations\n experimenters need to use \ngetAnnotations_1\n API call.\n\n\ncurl -X GET --header 'Accept: application/json' 'https://annotations.organicity.eu/annotations/all'\n\n\n\n\nUsing the Java Client\n\n\nAlso, users can interact with the \nAnnotation Service\n using the available JAVA and Android client for the \nAnnotation Service\n. The code of the Annotation Service Clients is available \nhere\n. \n\n\nUsing in Maven\n\n\nTo use the \nAnnotation Service Client\n in Java project you need to add the following dependency in you \npom.xml\n.\n\n\n<repositories>\n    <repository>\n        <id>organicity</id>\n        <url>https://maven.organicity.eu/content/repositories/snapshots</url>\n    </repository>\n</repositories>\n\n<dependencies>\n    <dependency>\n        <groupId>eu.organicity</groupId>\n        <artifactId>annotations-client</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </dependency> \n</dependencies> \n\n\n\n\nUsing in Gradle for Android\n\n\nTo use the \nAnnotation Service Android Client\n in Android application you need to add the following dependency in you \nbuild.gradle\n.\n\n\nrepositories {\n    mavenLocal()\n    mavenCentral()\n    maven { url 'https://maven.organicity.eu/content/repositories/snapshots' }\n}\n\ndependencies {\n    compile('eu.organicity:annotations-android-client:1.0-SNAPSHOT') {\n        exclude module: 'spring-boot-starter'\n        exclude module: 'spring-web'\n        exclude module: 'jackson-annotations'\n        exclude module: 'jackson-databind'\n        exclude module: 'spring-boot-starter-logging'\n        exclude module: 'jackson-mapper-asl'\n        exclude module: 'commons-logging'\n    }\n}\n\n\n\n\nPost an Annotation\n\n\nfinal AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nAnnotationDTO dto = new AnnotationDTO();\ndto.setApplication(\"nameOftheApplication\");\ndto.setAssetUrn(\"urn:oc:entity:patras:easybike:bikestation:293:301\");\ndto.setUser(\"organcity sub of the user if available\");\ndto.setNumericValue(0.0);\ndto.setTagUrn(\"urn:oc:tagDomain:IndoorHumidityLevels:high\");\ndto.setTextValue(\"\");\ndto = client.postAnnotation(dto);\nSystem.out.println(dto);\n\n\n\n\nListing All Annotations\n\n\nfinal AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nAnnotationDTO[] annotations = client.getAnnotations();\nfor (AnnotationDTO annotation : annotations) {\n    System.out.println(annotation);\n}",
            "title": "How To Annotate An Asset"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/#tutorial-how-to-annotate-an-asset",
            "text": "",
            "title": "Tutorial: How to Annotate an Asset"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/#using-the-api",
            "text": "Users can interact with the  Annotation Service  using the provided Restful API. The full description of the API is available  here .",
            "title": "Using the API"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/#post-an-annotation",
            "text": "To retrieve the tags of a  TagDomain  experimenters need to use  createAnnotation  API call.  This api call requires the following json object to be provided in the post request's body:  {\n  \"application\": \"nameOftheApplication\",\n  \"assetUrn\": \"urn:oc:entity:patras:easybike:bikestation:293:301\",\n  \"numericValue\": 0,\n  \"tagUrn\": \"urn:oc:tagDomain:IndoorHumidityLevels:high\",\n  \"textValue\": \"\",\n  \"user\": \"organcity sub of the user if available\"\n}  curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n  \"application\": \"nameOftheApplication\",\n  \"assetUrn\": \"urn:oc:entity:patras:easybike:bikestation:293:301\",\n  \"numericValue\": 0,\n  \"tagUrn\": \"urn:oc:tagDomain:IndoorHumidityLevels:high\",\n  \"textValue\": \"\",\n  \"user\": \"organcity sub of the user if available\"\n}' 'https://annotations.organicity.eu/annotations/urn%3Aoc%3Aentity%3Apatras%3Aeasybike%3Abikestation%3A293%3A301'",
            "title": "Post an Annotation"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/#listing-all-annotations",
            "text": "To retrieve the list of  Annotations  experimenters need to use  getAnnotations_1  API call.  curl -X GET --header 'Accept: application/json' 'https://annotations.organicity.eu/annotations/all'",
            "title": "Listing All Annotations"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/#using-the-java-client",
            "text": "Also, users can interact with the  Annotation Service  using the available JAVA and Android client for the  Annotation Service . The code of the Annotation Service Clients is available  here .",
            "title": "Using the Java Client"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/#using-in-maven",
            "text": "To use the  Annotation Service Client  in Java project you need to add the following dependency in you  pom.xml .  <repositories>\n    <repository>\n        <id>organicity</id>\n        <url>https://maven.organicity.eu/content/repositories/snapshots</url>\n    </repository>\n</repositories>\n\n<dependencies>\n    <dependency>\n        <groupId>eu.organicity</groupId>\n        <artifactId>annotations-client</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </dependency> \n</dependencies>",
            "title": "Using in Maven"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/#using-in-gradle-for-android",
            "text": "To use the  Annotation Service Android Client  in Android application you need to add the following dependency in you  build.gradle .  repositories {\n    mavenLocal()\n    mavenCentral()\n    maven { url 'https://maven.organicity.eu/content/repositories/snapshots' }\n}\n\ndependencies {\n    compile('eu.organicity:annotations-android-client:1.0-SNAPSHOT') {\n        exclude module: 'spring-boot-starter'\n        exclude module: 'spring-web'\n        exclude module: 'jackson-annotations'\n        exclude module: 'jackson-databind'\n        exclude module: 'spring-boot-starter-logging'\n        exclude module: 'jackson-mapper-asl'\n        exclude module: 'commons-logging'\n    }\n}",
            "title": "Using in Gradle for Android"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/#post-an-annotation_1",
            "text": "final AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nAnnotationDTO dto = new AnnotationDTO();\ndto.setApplication(\"nameOftheApplication\");\ndto.setAssetUrn(\"urn:oc:entity:patras:easybike:bikestation:293:301\");\ndto.setUser(\"organcity sub of the user if available\");\ndto.setNumericValue(0.0);\ndto.setTagUrn(\"urn:oc:tagDomain:IndoorHumidityLevels:high\");\ndto.setTextValue(\"\");\ndto = client.postAnnotation(dto);\nSystem.out.println(dto);",
            "title": "Post an Annotation"
        },
        {
            "location": "/annotations/tutorials/HowToAnnotateAnAsset/#listing-all-annotations_1",
            "text": "final AnnotationServiceClient client =  new AnnotationServiceClient(\"client_id\", \"client_secret\", \"username\", \"password\");\nAnnotationDTO[] annotations = client.getAnnotations();\nfor (AnnotationDTO annotation : annotations) {\n    System.out.println(annotation);\n}",
            "title": "Listing All Annotations"
        },
        {
            "location": "/jamaica/tutorials/HowToAutomaticallyAnnotateAssets/",
            "text": "img[src$=\"centerme\"] {\n  display:block;\n  margin: 0 auto;\n}\n\n\n\n\nTutorial: How to automatically annotate Assets\n\n\nJAMAiCA is an OrganiCity tool that can automatically annotate data that arrive to the OrganiCity facility based on a predefined training data set and a given Annotation Tag Domain.\n\n\nIn this tutorial we are going to present how we can setup a Classification Job using JAMAiCA.\n\n\nStep 1: Login to JAMAiCA using OrganiCity\n\n\nVisit \nJAMAiCA\n to loging to jamaica.\n\n\n\n\nStep 2: Create a new Classification Job\n\n\nSelect the \nAdd New\n option from the tool's sidebar and fill in the details needed for the classification job.\n\n\n\n\ntypePat\n: the OrganiCity Asset type we are interested in. For this example we will use \nurn:oc:entityType:iotdevice\n.\n\n\nidPat\n: the OrganiCity Asset id pattern. Usually a prefix of all the assets we are interested in. For this example we will use \nurn:oc:entity:patras:greenmind:\n.\n\n\nattribute\n: the attribute of the OrganiCity Asset that is going to be classified. For this example we will use \nrelativeHumidity\n. Keep in mind that this is the name and not the full urn of the attribute.\n\n\ntags\n: select from the dropdown on of the available TagDomains from the OrganiCity Annotation Service. For this example we will use the one that \nDescribes Indoor Humidity Levels\n.\n\n\n\n\nOnce all parameters are added the grey boxes under the options are populated with a sample of the existing assets that verify the criteria added and the list of tags available for the selected Tag Domain.\n\n\nClick Add and the job will be created. Once this is complete we will be redirected to the Job View. The Job will also appear in the sidebar of the Tool for easy access.\n\n\n\n\nStep 3: Add Training Data\n\n\nThe next screen shows us all the parameters of the Classification Job, including the ones we set in the \nAdd new\n page and the controls to \nEnable/Disable\n, \nTrain\n, and \nRe-Subscribe\n the Classification Job.\nAlso in the botton of the screen we can see the Training Data available for the Classification Job. In the right hand of the page there is an form to add Training Data to the job.\n\n\nLets add some in the following format: \n\n\n\n\nadd the value \n0\n for the tag \nurn:oc:tagDomain:IndoorHumidityLevels:dry\n \n\n\nadd the value \n40\n for the tag \nurn:oc:tagDomain:IndoorHumidityLevels:normal\n \n\n\nadd the value \n60\n for the tag \nurn:oc:tagDomain:IndoorHumidityLevels:high\n \n\n\n\n\n\n\nOnce this is done the Training data will appear in the table on the left side of the page.\n\n\nTo add more training data we can use the API of the tool.\n\n\n\n\nStep 4: Enable and Subscribe the Job\n\n\nIn this step we need to \nEnable\n the Classification Job so that the service accepts data for classification.\n\n\nAlso since it is the first time that we are going to enable this job we can click on the \nSubscribe\n button to enable the service to receive updates from the OrganiCity Facility.\nThis needs to be done only once, as JAMAiCA will update the subscriptions automatically as the job runs.\n\n\nStep 5: Monitor the Results\n\n\nThe results are available via the \nView Results\n link  on the top of the page.\nAll Annotations are listed on the table with the \nvalue\n received the \ntime\n of the data point and the resulting \ntag\n.",
            "title": "How To Annotate An Asset using Machine Learning"
        },
        {
            "location": "/jamaica/tutorials/HowToAutomaticallyAnnotateAssets/#tutorial-how-to-automatically-annotate-assets",
            "text": "JAMAiCA is an OrganiCity tool that can automatically annotate data that arrive to the OrganiCity facility based on a predefined training data set and a given Annotation Tag Domain.  In this tutorial we are going to present how we can setup a Classification Job using JAMAiCA.",
            "title": "Tutorial: How to automatically annotate Assets"
        },
        {
            "location": "/jamaica/tutorials/HowToAutomaticallyAnnotateAssets/#step-1-login-to-jamaica-using-organicity",
            "text": "Visit  JAMAiCA  to loging to jamaica.",
            "title": "Step 1: Login to JAMAiCA using OrganiCity"
        },
        {
            "location": "/jamaica/tutorials/HowToAutomaticallyAnnotateAssets/#step-2-create-a-new-classification-job",
            "text": "Select the  Add New  option from the tool's sidebar and fill in the details needed for the classification job.   typePat : the OrganiCity Asset type we are interested in. For this example we will use  urn:oc:entityType:iotdevice .  idPat : the OrganiCity Asset id pattern. Usually a prefix of all the assets we are interested in. For this example we will use  urn:oc:entity:patras:greenmind: .  attribute : the attribute of the OrganiCity Asset that is going to be classified. For this example we will use  relativeHumidity . Keep in mind that this is the name and not the full urn of the attribute.  tags : select from the dropdown on of the available TagDomains from the OrganiCity Annotation Service. For this example we will use the one that  Describes Indoor Humidity Levels .   Once all parameters are added the grey boxes under the options are populated with a sample of the existing assets that verify the criteria added and the list of tags available for the selected Tag Domain.  Click Add and the job will be created. Once this is complete we will be redirected to the Job View. The Job will also appear in the sidebar of the Tool for easy access.",
            "title": "Step 2: Create a new Classification Job"
        },
        {
            "location": "/jamaica/tutorials/HowToAutomaticallyAnnotateAssets/#step-3-add-training-data",
            "text": "The next screen shows us all the parameters of the Classification Job, including the ones we set in the  Add new  page and the controls to  Enable/Disable ,  Train , and  Re-Subscribe  the Classification Job.\nAlso in the botton of the screen we can see the Training Data available for the Classification Job. In the right hand of the page there is an form to add Training Data to the job.  Lets add some in the following format:    add the value  0  for the tag  urn:oc:tagDomain:IndoorHumidityLevels:dry    add the value  40  for the tag  urn:oc:tagDomain:IndoorHumidityLevels:normal    add the value  60  for the tag  urn:oc:tagDomain:IndoorHumidityLevels:high      Once this is done the Training data will appear in the table on the left side of the page.  To add more training data we can use the API of the tool.",
            "title": "Step 3: Add Training Data"
        },
        {
            "location": "/jamaica/tutorials/HowToAutomaticallyAnnotateAssets/#step-4-enable-and-subscribe-the-job",
            "text": "In this step we need to  Enable  the Classification Job so that the service accepts data for classification.  Also since it is the first time that we are going to enable this job we can click on the  Subscribe  button to enable the service to receive updates from the OrganiCity Facility.\nThis needs to be done only once, as JAMAiCA will update the subscriptions automatically as the job runs.",
            "title": "Step 4: Enable and Subscribe the Job"
        },
        {
            "location": "/jamaica/tutorials/HowToAutomaticallyAnnotateAssets/#step-5-monitor-the-results",
            "text": "The results are available via the  View Results  link  on the top of the page.\nAll Annotations are listed on the table with the  value  received the  time  of the data point and the resulting  tag .",
            "title": "Step 5: Monitor the Results"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateASensor/",
            "text": "img[src$=\"centerme\"] {\n  display:block;\n  margin: 0 auto;\n}\n\n\n\n\nTutorial: How to create a new Sensing-on-the-Go Sensor\n\n\nIntroduction\n\n\nThis guide will go throught the basic setup and development process for creating a new Sensor Plugin for\nSensing-on-the-Go app.\n\n\nOrganiCity Sensors\n\n\nOrganiCity provides a set of common \nSensor Plugins\n to be used. You can find and install all provided \nSensors from the \nSensors\n tab or when installing an experiment.\n\n\n\n\nLocation Sensor\n\n\nWifi Sensor\n\n\nNoise Sensor\n\n\nBle Reader Sensor\n\n\nTemperature Sensor\n\n\n\n\nDevelopment Environement Setup\n\n\nTo setup a new Sensor Plugin you will need to follow these steps:\n\n\n\n\nDownload and install \nAndroid Studio\n\n\nClone the Sensing-on-the-Go repository and especially the \nExampleSensor located in the sensors directroy\n\n\nOpen the \nExampleSensor\n project with Android Studio and install any missing packages\n\n\n\n\nSetting up your own Sensor\n\n\nWhen you open the Example Plugin project, navigate and open \nExampleSensorService\n.\n\n\n\n\nAs you can see there are multiple \nTODO\n comments through out the code.\nBelow are listed the key methods you need to pay attention during the development:\n\n\nonCreate\n is called when your background service is first created (first call of \nstartService()\n). \nInitialize your variables and request permissions here. An example is shown below in comments\n\n\n\n\nonDestroy\n is called when your background service is going to be destroyed (call of \nstopService()\n). \nThis is the place to unregister receivers, disconnect from services, stop and destroy threads and callbacks.\n\nIf any object that is references elsewere is not destroyed the services may become a zombie service\n.\n\n\n\n\nhandleMessage\n is called whenever Sensing-on-the-Go app requested info from your Sensor Plugin.\nThis is the place to add your data to the dataJson and as shown in the example.\nFor example the Gps Plugin adds lontitude and latutide values:\n\n\ndataJson.put(CONTEXT_TYPE + \".Latitude\", location.getLatitude());\ndataJson.put(CONTEXT_TYPE + \".Longitude\", location.getLongitude());\n\n\n\n\nWhere \nCONTEXT_TYPE = eu.organicity.set.sensors.location\n.",
            "title": "How To Create A Sensing-on-the-Go Sensor"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateASensor/#tutorial-how-to-create-a-new-sensing-on-the-go-sensor",
            "text": "",
            "title": "Tutorial: How to create a new Sensing-on-the-Go Sensor"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateASensor/#introduction",
            "text": "This guide will go throught the basic setup and development process for creating a new Sensor Plugin for\nSensing-on-the-Go app.",
            "title": "Introduction"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateASensor/#organicity-sensors",
            "text": "OrganiCity provides a set of common  Sensor Plugins  to be used. You can find and install all provided \nSensors from the  Sensors  tab or when installing an experiment.   Location Sensor  Wifi Sensor  Noise Sensor  Ble Reader Sensor  Temperature Sensor",
            "title": "OrganiCity Sensors"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateASensor/#development-environement-setup",
            "text": "To setup a new Sensor Plugin you will need to follow these steps:   Download and install  Android Studio  Clone the Sensing-on-the-Go repository and especially the  ExampleSensor located in the sensors directroy  Open the  ExampleSensor  project with Android Studio and install any missing packages",
            "title": "Development Environement Setup"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateASensor/#setting-up-your-own-sensor",
            "text": "When you open the Example Plugin project, navigate and open  ExampleSensorService .   As you can see there are multiple  TODO  comments through out the code.\nBelow are listed the key methods you need to pay attention during the development:  onCreate  is called when your background service is first created (first call of  startService() ). \nInitialize your variables and request permissions here. An example is shown below in comments   onDestroy  is called when your background service is going to be destroyed (call of  stopService() ). \nThis is the place to unregister receivers, disconnect from services, stop and destroy threads and callbacks. If any object that is references elsewere is not destroyed the services may become a zombie service .   handleMessage  is called whenever Sensing-on-the-Go app requested info from your Sensor Plugin.\nThis is the place to add your data to the dataJson and as shown in the example.\nFor example the Gps Plugin adds lontitude and latutide values:  dataJson.put(CONTEXT_TYPE + \".Latitude\", location.getLatitude());\ndataJson.put(CONTEXT_TYPE + \".Longitude\", location.getLongitude());  Where  CONTEXT_TYPE = eu.organicity.set.sensors.location .",
            "title": "Setting up your own Sensor"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateAExperiment/",
            "text": "img[src$=\"centerme\"] {\n  display:block;\n  margin: 0 auto;\n}\n\n\n\n\nTutorial: How to create a new Sensing-on-the-Go Experiment\n\n\nIntroduction\n\n\nThis guide will go throught the basic setup and development process for creating a new Experiment Plugin for\nSensing-on-the-Go app.\n\n\nOrganiCity Experiments\n\n\nOrganiCity provides a set of common \nExperiment Plugins\n to be used. You can find and install all provided \nExperiments from the \nExperiments\n tab.\n\n\n\n\nWifi Scanner Experiment\n\n\nNoise Level Experiment\n\n\nBle Reader Experiment\n\n\nTemperature Experiment\n\n\n\n\nDevelopment Environement Setup\n\n\nTo setup a new Experiment Plugin you will need to follow these steps:\n\n\n\n\nDownload and install \nAndroid Studio\n\n\nClone the Sensing-on-the-Go repository and especially the \nExampleExperiment located in the experiments directroy\n\n\nOpen the \nExampleExperiment\n project with Android Studio and install any missing packages\n\n\n\n\nSetting up your own Experiment\n\n\nWhen you open the ExampleExperiment project, navigate and open \nExampleExperiment\n.\n\n\n\n\nAs you can see there are multiple \nTODO\n comments through out the code.\nBelow are listed the key methods you need to pay attention during the development:\n\n\ngetExperimentResult\n is called when Sensing-on-the-Go app requests result from your experiment.\nA description of the method's parameters is found below:\n\n\n\n\nbundle: a Bundle object containing data collected from all the Sensor Plugins running at that time.\n\n\njsonMessage1: a JsonMessage object that will be used to report the Experiment result back to Sensing-on-the-Go app.\n\n\n\n\nIn the screenshot below you can see a simple example of getting GPS and Noise data from Location Sensor and Noise Level Sensor, respectively, and then add that data to a JSONObject to be used as payload to our \njsonMessage1\n object. \n\n\n\n\nA list of the \nCONTEXT_TYPE\n provided by OrganiCity can be found below:\n\n\n\n\neu.organicity.set.sensors.location.LocationSensorService\n\n\neu.organicity.set.sensors.noise.NoiseSensorService\n\n\neu.organicity.set.sensors.wifi.WifiSensorService\n\n\neu.organicity.set.sensors.temperature.TemperatureSensorService\n\n\neu.organicity.set.sensors.ble.BleReaderSensorService",
            "title": "How To Create A Sensing-on-the-Go Experiment"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateAExperiment/#tutorial-how-to-create-a-new-sensing-on-the-go-experiment",
            "text": "",
            "title": "Tutorial: How to create a new Sensing-on-the-Go Experiment"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateAExperiment/#introduction",
            "text": "This guide will go throught the basic setup and development process for creating a new Experiment Plugin for\nSensing-on-the-Go app.",
            "title": "Introduction"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateAExperiment/#organicity-experiments",
            "text": "OrganiCity provides a set of common  Experiment Plugins  to be used. You can find and install all provided \nExperiments from the  Experiments  tab.   Wifi Scanner Experiment  Noise Level Experiment  Ble Reader Experiment  Temperature Experiment",
            "title": "OrganiCity Experiments"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateAExperiment/#development-environement-setup",
            "text": "To setup a new Experiment Plugin you will need to follow these steps:   Download and install  Android Studio  Clone the Sensing-on-the-Go repository and especially the  ExampleExperiment located in the experiments directroy  Open the  ExampleExperiment  project with Android Studio and install any missing packages",
            "title": "Development Environement Setup"
        },
        {
            "location": "/tools/set/tutorials/HowToCreateAExperiment/#setting-up-your-own-experiment",
            "text": "When you open the ExampleExperiment project, navigate and open  ExampleExperiment .   As you can see there are multiple  TODO  comments through out the code.\nBelow are listed the key methods you need to pay attention during the development:  getExperimentResult  is called when Sensing-on-the-Go app requests result from your experiment.\nA description of the method's parameters is found below:   bundle: a Bundle object containing data collected from all the Sensor Plugins running at that time.  jsonMessage1: a JsonMessage object that will be used to report the Experiment result back to Sensing-on-the-Go app.   In the screenshot below you can see a simple example of getting GPS and Noise data from Location Sensor and Noise Level Sensor, respectively, and then add that data to a JSONObject to be used as payload to our  jsonMessage1  object.    A list of the  CONTEXT_TYPE  provided by OrganiCity can be found below:   eu.organicity.set.sensors.location.LocationSensorService  eu.organicity.set.sensors.noise.NoiseSensorService  eu.organicity.set.sensors.wifi.WifiSensorService  eu.organicity.set.sensors.temperature.TemperatureSensorService  eu.organicity.set.sensors.ble.BleReaderSensorService",
            "title": "Setting up your own Experiment"
        },
        {
            "location": "/HowToCreateParticipantMetrics/",
            "text": "How to Create Participation Metrics\n\n\nIntroduction\n\n\nMany of the activities that the participant performs within the OrganiCity platform are being tracked. This means that each time the participant uses an element of the platform, e.g., create or read assets, create or read annotations, etc., a OrganiCity component records these interactions. Using this information the experimenter could know the level of activity that each participant has within the experiment.\n\n\nThe measurement of each activity can generate different range of values depending of the level of interaction of the participant with each OrganiCity element. That is, at any given time, a participant could have created 100 assets and read only 10. Therefore, it is necessary to define an evaluation mechanism that allows different types of activities to be included, but, in turn, enables to standardize the contribution produced by each one within the model of evaluation. For this reason, the concept of Engagement Metric is defined using the mathematical model called utility function. This model enable the experimenter to obtain the utility of each element based on the use that the participant makes of it. For example, if a participant creates very few assets, this would mean a little utility to the experimenter.\n\n\nMetric definition\n\n\nThe metric is the result of a weighted sum of utility functions.\n\n\nMetric = weight_1*function_1(parameter_1) + weight_2*function_2(parameter_2) + ...\n\n\n\n\nWeight\n: When the experimenter includes several utility functions in the metric, could use this value to provide a greater or lesser relevance to each utility function. The sum of all weights must be equal to 1.0. If the metric have only one utility function, then this value will be 1.0.\n\n\nUtility function\n: Model the utility that the experimenter wants to provide to an element of OrganiCity platform. The utility value will depend of the function assigned to each parameter by the experimenter but always will be in the range [0, 1]. \u201cUtility functions\u201d section describe more details about the functions that could be used.\n\n\nParameter\n: Represent the measurable element of OrganiCity platform. For now, these are the available parameters:\n\n\n\n\n#discov-read\n, number of assets read\n\n\n#discov-create\n, number of assets created\n\n\n#annot-read\n, number of annotations read\n\n\n#annot-create\n, number of annotations created\n\n\n\n\nMax\n: Specify the maximum value of each parameter involved in the metric. Only parameter values that are within the range [0, max] will be taken into count for the calculation of the utility.\n\n\nUtility functions\n\n\nFor each utility function, the X-axis corresponds to the normalized value of the parameter to be modeled. The normalized value is calculated as a percentage of the maximum value defined for that parameter. For example, an experimenter has decided to use the #annot-create (number of annotations created) parameter within a metric, and has considered evaluating the generated utilities for a maximum of 500 annotations created. If you want to evaluate the generated utility for 150 annotations created, then you would have to use the normalized parameter value 150/500 = 0.3\nThe value corresponding to the Y-axis will depend on the utility function that is used. As can be seen in Figure 1, since the values of X-axis is limited within the range [0, 1], then the values of the Y-axis are also within the same range.\n\n\n\n\nFigure 1.\n Utility functions\n\n\nThe functions that could be used to model the utility of each parameter are the following:\n\n\n\n\nHRstart\n (High Rate start) which is based on sqrt(x) function\n\n\nHRend\n (High Rate end) which is based on x^2 function\n\n\nLinear\n which is based on linear function (y=x)\n\n\n\n\nThese three types of functions have been defined to model utility because they have different properties that make it easier for the experimenter to model different scenarios.\n\n\nThe linear function is the simplest of them. It provides the same increase in the utility value for any increase in the parameter value (see blue arrows in Figure 1). On the contrary, the HRstart and HRend functions show very interesting features. For increments of the parameter value in the lower areas of the X-axis, HRstart provides a greater increase in utility compared to HRend (see green arrows in Figure 1). However, if you look at the higher areas of the X-axis, HRend offers a greater increase in utility compared to HRstart (see red arrows in Figure 1). Depending on the scenario in which the experimenter is involved, it may be convenient to model the utility with one or another function. Below are some examples of the criteria to follow to choose a certain utility function.\n\n\nExamples of metric creation\n\n\nLet's imagine that an experimenter wants to know who participants are which fed or consumed more data from OrganiCity platform when they have been using the experiment. To this end, the experimenter defines a metric using two parameters: the number of assets that each participant has created, and the number of assets consumed from the platform.\n\n\np1 = Number of assets created (#discov-create)\np2 = Number of assets consumed (#discov-read)\n\n\n\n\nAs part of the design criteria, the experimenter also decides to use linear functions (y = x) to model the utility of each parameter; in this way, an increase in the number of created or consumed assets will provide the same increase in the utility.\n\n\nf1(p1) = Linear function\nf2(p2) = Linear function\n\n\n\n\nDue to the characteristics of the experiment, the experimenter also decided to use different weights for both metrics, in such a way that the number of assets consumed are more relevant than those created. To do so, the experimenter assigns a higher weight to the function corresponding to the second parameter.\n\n\nw1 = 0.4\nw2 = 0.6\n\n\n\n\nFinally, taking into account the aforementioned design criteria, the metric would be defined as following:\n\n\nMetric = w1 * f1(p1) + w2 * f2(p2)\nMetric = 0.4 * LinearFunction(#discov-create) + 0.6 * LinearFunction(#discov-read)\n\n\n\n\nThe Experimenter Portal provides a panel for metrics creation. Picking up the appropriate options, the previous metric would be defined as shown in Figure 2.\n\n\n\n\nFigure 2.\n Metric creation in Experimenter Portal\n\n\nLet\u2019s now imagine the experimenter does not want to give more relevance to any of the utility functions corresponding to the parameters; i.e. w1 = w2 = 0.5. Instead, the experimenter decided to use different functions so that an increase in the number of assets created or consumed will generate different increases in the utility function.\n\n\nIn particular, the experimenter intends to encourage the participant to consume more assets, while not showing special interest in the creation of assets. For the case of the consumed assets, this means that a greater increase in the utility should be produced when the quantity of consumed assets is increasing. To accomplish this requirement, the HRend function would have to be used. On the other hand, in the case of the assets created, the increase in the utility must be the same for any value of asset created, so the linear function would have to be used.\n\n\nf1(p1) = Linear function\nf2(p2) = HRend function\n\n\n\n\nTherefore, the new metric would be defined as follows:\n\n\nMetric = 0.5 * LinearFunction(#discov-create) + 0.5 * HRendFunction(#discov-read)",
            "title": "How To Create Participation Metrics"
        },
        {
            "location": "/HowToCreateParticipantMetrics/#how-to-create-participation-metrics",
            "text": "",
            "title": "How to Create Participation Metrics"
        },
        {
            "location": "/HowToCreateParticipantMetrics/#introduction",
            "text": "Many of the activities that the participant performs within the OrganiCity platform are being tracked. This means that each time the participant uses an element of the platform, e.g., create or read assets, create or read annotations, etc., a OrganiCity component records these interactions. Using this information the experimenter could know the level of activity that each participant has within the experiment.  The measurement of each activity can generate different range of values depending of the level of interaction of the participant with each OrganiCity element. That is, at any given time, a participant could have created 100 assets and read only 10. Therefore, it is necessary to define an evaluation mechanism that allows different types of activities to be included, but, in turn, enables to standardize the contribution produced by each one within the model of evaluation. For this reason, the concept of Engagement Metric is defined using the mathematical model called utility function. This model enable the experimenter to obtain the utility of each element based on the use that the participant makes of it. For example, if a participant creates very few assets, this would mean a little utility to the experimenter.",
            "title": "Introduction"
        },
        {
            "location": "/HowToCreateParticipantMetrics/#metric-definition",
            "text": "The metric is the result of a weighted sum of utility functions.  Metric = weight_1*function_1(parameter_1) + weight_2*function_2(parameter_2) + ...  Weight : When the experimenter includes several utility functions in the metric, could use this value to provide a greater or lesser relevance to each utility function. The sum of all weights must be equal to 1.0. If the metric have only one utility function, then this value will be 1.0.  Utility function : Model the utility that the experimenter wants to provide to an element of OrganiCity platform. The utility value will depend of the function assigned to each parameter by the experimenter but always will be in the range [0, 1]. \u201cUtility functions\u201d section describe more details about the functions that could be used.  Parameter : Represent the measurable element of OrganiCity platform. For now, these are the available parameters:   #discov-read , number of assets read  #discov-create , number of assets created  #annot-read , number of annotations read  #annot-create , number of annotations created   Max : Specify the maximum value of each parameter involved in the metric. Only parameter values that are within the range [0, max] will be taken into count for the calculation of the utility.",
            "title": "Metric definition"
        },
        {
            "location": "/HowToCreateParticipantMetrics/#utility-functions",
            "text": "For each utility function, the X-axis corresponds to the normalized value of the parameter to be modeled. The normalized value is calculated as a percentage of the maximum value defined for that parameter. For example, an experimenter has decided to use the #annot-create (number of annotations created) parameter within a metric, and has considered evaluating the generated utilities for a maximum of 500 annotations created. If you want to evaluate the generated utility for 150 annotations created, then you would have to use the normalized parameter value 150/500 = 0.3\nThe value corresponding to the Y-axis will depend on the utility function that is used. As can be seen in Figure 1, since the values of X-axis is limited within the range [0, 1], then the values of the Y-axis are also within the same range.   Figure 1.  Utility functions  The functions that could be used to model the utility of each parameter are the following:   HRstart  (High Rate start) which is based on sqrt(x) function  HRend  (High Rate end) which is based on x^2 function  Linear  which is based on linear function (y=x)   These three types of functions have been defined to model utility because they have different properties that make it easier for the experimenter to model different scenarios.  The linear function is the simplest of them. It provides the same increase in the utility value for any increase in the parameter value (see blue arrows in Figure 1). On the contrary, the HRstart and HRend functions show very interesting features. For increments of the parameter value in the lower areas of the X-axis, HRstart provides a greater increase in utility compared to HRend (see green arrows in Figure 1). However, if you look at the higher areas of the X-axis, HRend offers a greater increase in utility compared to HRstart (see red arrows in Figure 1). Depending on the scenario in which the experimenter is involved, it may be convenient to model the utility with one or another function. Below are some examples of the criteria to follow to choose a certain utility function.",
            "title": "Utility functions"
        },
        {
            "location": "/HowToCreateParticipantMetrics/#examples-of-metric-creation",
            "text": "Let's imagine that an experimenter wants to know who participants are which fed or consumed more data from OrganiCity platform when they have been using the experiment. To this end, the experimenter defines a metric using two parameters: the number of assets that each participant has created, and the number of assets consumed from the platform.  p1 = Number of assets created (#discov-create)\np2 = Number of assets consumed (#discov-read)  As part of the design criteria, the experimenter also decides to use linear functions (y = x) to model the utility of each parameter; in this way, an increase in the number of created or consumed assets will provide the same increase in the utility.  f1(p1) = Linear function\nf2(p2) = Linear function  Due to the characteristics of the experiment, the experimenter also decided to use different weights for both metrics, in such a way that the number of assets consumed are more relevant than those created. To do so, the experimenter assigns a higher weight to the function corresponding to the second parameter.  w1 = 0.4\nw2 = 0.6  Finally, taking into account the aforementioned design criteria, the metric would be defined as following:  Metric = w1 * f1(p1) + w2 * f2(p2)\nMetric = 0.4 * LinearFunction(#discov-create) + 0.6 * LinearFunction(#discov-read)  The Experimenter Portal provides a panel for metrics creation. Picking up the appropriate options, the previous metric would be defined as shown in Figure 2.   Figure 2.  Metric creation in Experimenter Portal  Let\u2019s now imagine the experimenter does not want to give more relevance to any of the utility functions corresponding to the parameters; i.e. w1 = w2 = 0.5. Instead, the experimenter decided to use different functions so that an increase in the number of assets created or consumed will generate different increases in the utility function.  In particular, the experimenter intends to encourage the participant to consume more assets, while not showing special interest in the creation of assets. For the case of the consumed assets, this means that a greater increase in the utility should be produced when the quantity of consumed assets is increasing. To accomplish this requirement, the HRend function would have to be used. On the other hand, in the case of the assets created, the increase in the utility must be the same for any value of asset created, so the linear function would have to be used.  f1(p1) = Linear function\nf2(p2) = HRend function  Therefore, the new metric would be defined as follows:  Metric = 0.5 * LinearFunction(#discov-create) + 0.5 * HRendFunction(#discov-read)",
            "title": "Examples of metric creation"
        },
        {
            "location": "/OrganiCityTesterAPI/",
            "text": "OrganiCity API Tester Application\n\n\nOrganiCity API Tester application is a Windows application which provides the basic functionality and C# code examples of OrganiCity platform APIs. By using this application, experimenters become familiar with: \n\n Fundamental notions of Token, Client Id, Client Secret, Experimenter Id, Experiment Id, and Application Id. \n\n Data structure of JSON objects. \n\n Functionalities such as add, delete, update assets of a specific experiment. \n\n Assets retrieval from OrganiCity sites by using the EaaS API.\n\n\nRun the application\n\n\nThe necessary file to execute the application are located into the \nOrganiCityTesterAPI\n folder. To run the application, just double click on \"OrganiCityClient.exe\" file.\n\n\nUsing Tester\n\n\nThe following figures illustrates the functionalities of OrganiCity API Tester app. The application has three main screens/tabs: (a) post data to your experiment, (b) Learn OrganiCity data format, and (c) Get data from cities.\n\n\nIn the first tab, the user has to follow three main steps to post a new asset to a specific experiment. In the first step, the user is able to request and get an access token by providing Clientid, ClientSecret. Then, the user has to fill the details of the experiment (ExperimenterId, ExperimentId, ApplicationId). In the last step (i.e. step 3), the user can post a new asset to the specific experiment by pressing the \u201cPost Random Asset\u201d button.\n\n\n\n\nIn the second tab, the user can generate random assets by pressing the \u201cGenerate Random Asset\u201d button. The textbox below presents the structure of the attributes and the required information from the system.\n\n\n\n\nThe third tab illustrates the asset retrieval from EaaS API.\n\n\n\n\nNote: This application provides only examples of the OrganiCity APIs and it cannot be used as a tool to fulfil the requirements of an experiment.",
            "title": "OrganiCity API Tester Application"
        },
        {
            "location": "/OrganiCityTesterAPI/#organicity-api-tester-application",
            "text": "OrganiCity API Tester application is a Windows application which provides the basic functionality and C# code examples of OrganiCity platform APIs. By using this application, experimenters become familiar with:   Fundamental notions of Token, Client Id, Client Secret, Experimenter Id, Experiment Id, and Application Id.   Data structure of JSON objects.   Functionalities such as add, delete, update assets of a specific experiment.   Assets retrieval from OrganiCity sites by using the EaaS API.",
            "title": "OrganiCity API Tester Application"
        },
        {
            "location": "/OrganiCityTesterAPI/#run-the-application",
            "text": "The necessary file to execute the application are located into the  OrganiCityTesterAPI  folder. To run the application, just double click on \"OrganiCityClient.exe\" file.",
            "title": "Run the application"
        },
        {
            "location": "/OrganiCityTesterAPI/#using-tester",
            "text": "The following figures illustrates the functionalities of OrganiCity API Tester app. The application has three main screens/tabs: (a) post data to your experiment, (b) Learn OrganiCity data format, and (c) Get data from cities.  In the first tab, the user has to follow three main steps to post a new asset to a specific experiment. In the first step, the user is able to request and get an access token by providing Clientid, ClientSecret. Then, the user has to fill the details of the experiment (ExperimenterId, ExperimentId, ApplicationId). In the last step (i.e. step 3), the user can post a new asset to the specific experiment by pressing the \u201cPost Random Asset\u201d button.   In the second tab, the user can generate random assets by pressing the \u201cGenerate Random Asset\u201d button. The textbox below presents the structure of the attributes and the required information from the system.   The third tab illustrates the asset retrieval from EaaS API.   Note: This application provides only examples of the OrganiCity APIs and it cannot be used as a tool to fulfil the requirements of an experiment.",
            "title": "Using Tester"
        },
        {
            "location": "/tools/sensinact/",
            "text": "Eclipse sensiNact\n\n\nIMPORTANT\n This page may be outdated! Please browse \nthe documentation on Eclipse website\n.\n\n\nIntroduction\n\n\nEclipse sensiNact\n aims at helping coders working with data streams from deployed \u201cIoT\u201d devices without the need to complex API configuration.\n\n\nUsing Eclipse sensiNact, experimenters can find Internet of Things devices which are deployed in the city, and understand the data streams that they provide. The Eclipse sensiNact IDE allows the creation of applications using a scripting tool (with Code Assist functionality). These applications might set up alerts for when variables in the data streams reach certain levels, or can aggregate data from many devices, creating virtual devices which provide coarse data that might be more useful to an experiment.\n\n\nThe following schema summaries the way Eclipse sensiNact integrates with the OrganiCity Experimentation as a Service facility.\n\n\n\n\nThe Organicity EaaS facility collects and stores data from the federated sites (Santander, Aarhus and London, on this schema). Eclipse sensiNact Gateway is connected to this platform, and is notifed when IoT devices is added, removed, or when sensed data is updated. Eclipse sensiNact studio provides a graphical UI to the gateway. It ease discovering devices, and provides an editor to write applications using IoT devices.\n\n\nInstallation\n\n\nTo use Eclipse sensiNact, you need a gateway, and the studio. The easier solution is to install both on your onw computer (running Linux 64 bits) with the following procedure. \n\n\nFirst, you will need to add the Eclipse sensiNact repository to \n/etc/apt/sources.list\n configuration file.\n\n\necho \"deb http://debian.organicity.eu ./\" | sudo tee -a /etc/apt/sources.list\n\n\n\n\nThen, you can install both studio and gateway.\n\n\nsudo apt-get update --yes\nsudo apt-get install --yes --allow-unauthenticated sensinact\nsudo apt-get install --yes --allow-unauthenticated sensinact-studio\n\n\n\n\nConfiguration\n\n\nBecause Eclipse sensiNact is a modular runtime, you will need to choose the parts (bundles) you want to have up and running.\n\n\nFirst, you need to stop your Gateway: \nsudo service sensinact stop\n\n\nThen, you can select the bundles: \n/opt/sensinact/sensinact -c\n\n\nHere are the one to choose for discovering Eclispe sensiNact.\n\n\n\n\napplication (Application manager)\n\n\nhttp (HTTP stack)\n\n\norganicity (For connecting Organicity EaaS)\n\n\nrest (HTTP callbacks)\n\n\n\n\nNow, you just need to resttart the service : \nsudo service sensinact start\n\n\nOptional : If you want this service to be automaticaly launched at startup, execute the following command : \nsudo bash update-rc.d sensinact defaults\n\n\nEclipse sensiNact Studio\n\n\nTo start Eclipse sensiNact Studio, just run \nsensinact-studio\n.\n\n\nEclipse sensiNact Studio allows an easy interaction with the OrganiCity  devices and the creation of applications. The Studio is based on the Eclipse platform [Eclipse] and built as a rich client platform application. The Graphical User Interface (GUI) is developed using the views mechanism from Eclipse. Thus, it proposes views for browsing devices, locating devices on a map and interacting with them, i.e., getting value from sensors or performing actions on actuators. The Studio is also targeted to ease the creation of IoT application following the Event-Condition-Action (ECA) pattern.\n\n\n\n\nThe GUI includes different views: navigator, deployment, properties views, as well as a Domain Specific Language (DSL) editor.\n\n\nBrowsing devices\n\n\nBefore users can use the studio for managing devices and applications, they need to connect a Eclipse sensiNact gateway. This action is performed by clicking on the plus sign icon on the device navigator. Then, gateway information have to be provided. If you have installed the gateway locally, you can use the following configuration:\n\n\n\n\nAddress : localhost\n\n\nPort : 8080\n\n\nTimeout : 10000\n\n\n\n\n\n\nOnce the information have been provided and the dialog validated, the Gateway is added to the Navigator View. To display and browse the available devices imported by this gateway, connecting to it is needed. This action is performed using the connect button.\n\n\n\n\nThe device Navigator View is then populated, and pin points are displayed on the map. By clicking on attributes names, it is possible to get the current value for the considered attribute. It is also possible to see attributes values on the map, clicking on the pin points.\n\n\nApplication management\n\n\nApplication creation\n\n\nThe Eclipse sensiNact Studio allows the creation of applications to be executed on the gateway. Creating an application is performed by writing a script using a dedicated syntax, and deploying this script to the gateway.\n\n\n\n\nOn the figure above, a project has been created on the project explorer view (on the left). In this project, a script named \nspeed-limit.sna\n has been created, and is being edited. As the figures shows, the editor provides code highlighting (some keywords are displayed in a special font), code completion (with popups) and a syntax validator which displays red crosses on the script margin in case of error.\n\n\nThe dedicated syntax, a Domain Specific Language, is composed by the following blocks:\n\n\n\n\nThe shortcut block:\n each resource is accessible through a unique URI, which can be quite long. This block aims at creating shortcut for the next blocks.\n\n\nThe event block:\n the developer defines on which resources the application is triggered. When an event is thrown and is a valid trigger, the conditional block is executed.\n\n\nThe conditional block:\n once the application has been triggered, and before any action can be executed, the data from the resource has to satisfy the conditional block. The keyword for this block is if followed by the conditions to be validated.\n\n\nThe actions statements:\n if the conditional block is satisfied, actions are performed in the order that they are listed. The actions can be physical actions on actuators or virtual actions such as changing the format of a data using a mathematical function. The available actions, also named functions, are listed below:\n\n\nBasic functions:\n addition, subtraction, division, multiplication, modulo, string concatenation, substring, various operators (e.g., equals, greater than, lesser than, different), ACT and SET methods on Eclipse sensiNact resources.\n\n\nComplex Event Processing functions (using the Esper1 library):\n after, before, coincides, average, average deviation, count, max, min, median, standard deviation and sum.\n\n\n\n\nThe following table shows the basic structure for writing a script.\n\n\n\n\n\n  \n[resource \n]+\n\n  \nShortcut block, which must contains at least one statement.\n\n\n\n\n\n  \non \n+\n\n  \nThe event block, lists the events triggering the script. At least one event must be provided.\n\n\n\n\n\n  \n[if \n do]+\n[\n]+\n[else do]?\n[\n]?+\nend if;\n\n  \nThe conditional block, which lists actions to be performed based on conditions.\n\n\n\n\n\n\n\nApplication example\n\n\nFor this example, we are going to use simulated devices.\n\n\nLet's run a gateway with the simulated devices.\n\n\n\n\nsudo service sensinact stop\n stops the gateway\n\n\nwith \nsudo /opt/sensinact/sensinact -c\n add the simulation bundle\n\n\nrestart the gateway with \nsudo /opt/sensinact/sensinact\n It's important to run the gateway this way, and not using the service to have the simulated devices UI linked to your current graphical session. \n\n\n\n\nNow, in the project explorer view:\n\n\n\n\nnew project creation: \nFile > New > Project\n\n\nright click on the created folder in the Project Explorer View. \nNew > File\n. Choose a name with the ending with \n.sna\n\n\nAdd XText Nature to the project (a popup will automatically be displayed).\n\n\n\n\nYou can now edit your sna file with the following content:\n\n\nresource slider=[OrganiCity/slider/cursor/position]\nresource light_on = [OrganiCity/light/switch/turn_on]\nresource light_off = [OrganiCity/light/switch/turn_off]\n\non slider.subscribe()\n\nif slider.get() < 500 do\n  light_off.act()\nelse do\n  light_on.act()\nend if\n\n\n\n\nThis script will be triggered each time the slider position will be updated (\non slider.subscribe()\n statement). The light will be turned on or off depending on the slider position value.\n\n\nApplication deployment\n\n\nOnce the script has been written, it can be deployed to the gateway where it will be executed. This is performed using a right click on the script file.\n\n\n\n\nApplication monitoring\n\n\nAfter the application has been deployed, a new set of resources is automatically created under the AppManager device. You can browse those resources into the Device Navigator View.\n\n\n\n\nFirst of all, a new service is created with the name of the sna file (without the extension). In our example, it is \nspeed-limit\n. This service representing the application always contains a standard set of resources.\n\n\n\n\n\n  \n\n    \nResource\n\n    \nType\n\n    \nDescription\n\n  \n\n\n\n\n\n  \nautorestart\n\n  \nproperty\n\n  \nIn case of failure, decides if the application should be automatically started again\n\n\n\n\n\n  \ncontent\n\n  \nproperty\n\n  \nScript file content\n\n\n\n\n\n  \nEXCEPTION\n\n  \naction\n\n  \nDeprecated\n\n\n\n\n\n  \nlocation\n\n  \nproperty\n\n  \nGPS location which can be used if it makes sense \n\n\n\n\n\n  \nmaxinstances\n\n  \nproperty\n\n  \nNumber of parallel instances which should be started\n\n\n\n\n\n  \nresetOnStop\n\n  \nproperty\n\n  \nOn Stop, decides if the generated resources by the application should be destroyed or kept\n\n\n\n\n\n  \nSTART\n\n  \naction\n\n  \nStarts the application\n\n\n\n\n\n  \nstatus\n\n  \nstate variable\n\n  \nCurrent status of the application: START/STOP/...\n\n\n\n\n\n  \nSTOP\n\n  \naction\n\n  \nStops the application\n\n\n\n\n\n  \nUNINSTALL\n\n  \naction\n\n  \nRemoves the application\n\n\n\n\n\n\n\nTo start the application, simply double click on the \nSTART\n resource. This will launch the start action, which will run the script.\n\n\n\n\nThe figure shows that the application is up and running on the server. The studio can be used to check if the application has the expected behavior, by querying the resources. The studio can also be shutted down, since the applications are executed on the gateway. \n\n\nConclusion\n\n\nIn this section, we have presented the way Eclipse sensiNact Studio can gives an overview of the available devices in the OrganiCity  context. We have also shown the creation process of IoT application following the Event-Condition-Action (ECA) pattern.\n\n\nGateway\n\n\nIntroduction\n\n\nThe Eclipse sensiNact Gateway allows the interconnection of heterogeneous devices and services into a consistent model. This one is presented to the Eclipse sensiNact Studio which can monitor the devices ecosystem and design application to be executed on the gateway.\n\n\n\n\nMore precisely, the Eclipse sensiNact Gateway integrates with the OC Platform using the Asset Discovery Service. Thereby, the gateway is aware of the assets provided by the OC Platform. On the other hand, the gateway has dedicated interfaces to directly connect to third parties devices and API. As a result, the gateway can interact with a lot of resources, which can be local or remote.\n\n\nThe gateway architecture\n\n\nThe interactions between the gateway and other entities are performed through a set of northbound and southbound bridges. The goal of the bridges is to manage the communication with devices and services, which can be local or remote. On one hand, southbound bridges are in charge of collecting data from sensors and services, and to send orders which will be performed by actuators. On the other hand, northbound bridges are specialized in interacting with remote systems. Thanks to those bridges, it is possible to make third party systems aware of devices & virtual resources known by the gateway.\n\n\n\n\nIn terms of connectivity, on the southbound side the Eclipse sensiNact gateway allows to cope both with \u201cphysical device\u201d protocols and \u201cvirtual device\u201d ones, allowing a uniform and transparent access to an XBee network, or an HTTP Restful web service for example. Here's a non-exhaustive list of supported protocols:\n\n\n\n  \n**EnOcean [EnOcean],** energy harvesting wireless sensor technology (ultra-low-power radio technology for free wireless sensors), and protocols in use to interact with those sensors;\n\n  \n**Bluetooth Low Energy.** Part of the Bluetooth specification version 4 [Bluetooth4], it is a personal area network, low power protocol designed mainly for healthcare or entertainment type of applications;\n\n  \n**MQTT [MQTT],** which is a machine-to-machine protocol, lightweight publish/subscribe messaging transport, useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium;\n\n  \n**ZigBee [ZigBee]** based protocols (XBee for example);\n\n  \n**CoAP [RFC7252],** which is a REST application protocol, designed to be \u201cthe HTTP for constrained networks and devices\u201d whose concept originated from the idea that \"the Internet Protocol could and should be applied even to the smallest devices,\" and that low-power devices with limited processing capabilities should be able to participate in the Internet of Things; it is usually used on top of a 6LoWPAN network, but it may travel regular IP networks as well (it is used by the OMA LWM2M protocol, for instance).\n\n\n\n\n\nOn the northbound side the Eclipse sensiNact gateway provides both client/server and publish/subscribe access protocols: MQTT [MQTT], JSON-RPC (1.0 and 2.0) [JSON-RPC], HTTP RESTful, CDMI [CDMI].\n\n\nAll the communications of Eclipse sensiNact gateway are converging to a central piece: the core. This element is in charge of the overall coordination of information, involving two managers: the device manager and the application manager.\n\n\nThe device manager, with its associated database (the OSGi registry) stores all the information regarding devices. This include devices availability, and also devices properties, location, etc.\n\n\nThe application manager is a bit more complex. It manages the applications, following devices availability and updating applications life cycle. It offers a plug-in facility, to extend its behaviour. The two main plugins are the Event Condition Action plugin, and the Complex Event Processor plugin. The Event Condition Action plugin provides the basic structure for creating applications. It allows the triggering of rules, based on event. Then, a condition can be evaluated, and actions performed accordingly. Of course, events, conditions and actions are related to devices, using the device manager. Using the Esper Engine, the Complex Event Processor plugin is able to generate high level events based on low level ones. For example, it is possible to know that two events occur in a given time interval, with a given order. The events generated by the CEP plug-in can be used in the ECA plugin.\n\n\nEclipse sensiNact resource model\n\n\n\nIt is important to understand the internal model of the Eclipse sensiNact Gateway , since it is used everywhere in the Eclipse sensiNact ecosystem. That is why, a clear understanding of the concepts and relationships between them can even help using the Studio introduced previously.\n\n\nAll the devices and their related informations are represented using a standard resource model. It is structured around three main concepts: Service Provider, Service and Resource. A Service Provider repr\u00e9sents an entity, which can be a device or something more abstract such as an API endpoint. This Service Provider can have several Services, which are a meaningful aggregate of resources based on a common purpose. A resource is the place where information is stored. For example, on a weather station, a temperature sensor will be a resource providing the temperature.\n\n\n\n\nBased on its purpose, a resource can be a Property, a Sensor Data, a State Variable, or an Action. The differences among them is detailed in the following table.\n\n\n\n\n\n  \n\n    \nType\n\n    \nDescription\n\n  \n\n\n\n\n\n  \nProperty\n\n  \nProperty exposed by a service. This is information which is likely to be static (owner, model, vendor, static location, etc.). In some cases, this property can be allowed to be modified.\n\n\n\n\n\n  \nSensor Data\n\n  \nSensory data provided by a service. This is real-time information provided, for example, by the SmartObject that measures physical quantities.\n\n\n\n\n\n  \nState Variable\n\n  \nInformation representing a SmartObject state variable of the service. This variable is most likely to be modified by an action (turn on light modifies the light state, opening door changes the door state, etc.) but also to intrinsic conditions associated to the working procedure of the service.\n\n\n\n\n\n  \nAction\n\n  \nFunctionality provided by a service. This is mostly an actuation on the physical environment via an actuator SmartObject supporting this functionality (turn on light, open door, etc.) but can also be a request to do a virtual action (play a multimedia on a TV, make a parking space reservation, etc.)\n\n\n\n\n\n\n\nSince it is not possible to directly interact with resources, Eclipse sensiNact provides access methods. The access methods that can be associated to a resource depend on the resource type, for example, a GET method can only be associated to resources of type Property, State Variable and SensorData. A SET method can only be associated to State Variable and modifiable Property resources. An ACT method can only be associated to an Action resource. SUBSCRIBE and UNSUBSCRIBE methods can be associated to any resources.\n\n\n\n\n\n  \n\n    \nType\n\n    \nDescription\n\n  \n\n\n\n\n\n  \nGET\n\n  \nGets the value attribute of the resource.\n\n\n\n\n\n  \nSET\n\n  \nSets a given new value as the data value of the resource.\n\n\n\n\n\n  \nACT\n\n  \nInvokes the resource (method execution) with a set of defined parameters.\n\n\n\n\n\n  \nSUBSCRIBE\n\n  \nSubscribes to the resource with optional condition and periodicity.\n\n\n\n\n\n  \nUNSUBSCRIBE\n\n  \nRemove an existing subscription.\n\n\n\n\n\n\n\nConclusion\n\n\nWe have presented the architecture of the Eclipse sensiNact Gateway, and the way it is integrated into the OC Platform. We also have introduced its resource model, since it is used in the studio as well.\n\n\nTo help experimenters start easily using the Studio, we are providing \u201cGateways as a Service\u201d for the OrganiCity project. They are Gateways available in the cloud, and configured for interacting with OrganiCity devices.",
            "title": "Eclipse sensiNact"
        },
        {
            "location": "/tools/sensinact/#eclipse-sensinact",
            "text": "IMPORTANT  This page may be outdated! Please browse  the documentation on Eclipse website .",
            "title": "Eclipse sensiNact"
        },
        {
            "location": "/tools/sensinact/#introduction",
            "text": "Eclipse sensiNact  aims at helping coders working with data streams from deployed \u201cIoT\u201d devices without the need to complex API configuration.  Using Eclipse sensiNact, experimenters can find Internet of Things devices which are deployed in the city, and understand the data streams that they provide. The Eclipse sensiNact IDE allows the creation of applications using a scripting tool (with Code Assist functionality). These applications might set up alerts for when variables in the data streams reach certain levels, or can aggregate data from many devices, creating virtual devices which provide coarse data that might be more useful to an experiment.  The following schema summaries the way Eclipse sensiNact integrates with the OrganiCity Experimentation as a Service facility.   The Organicity EaaS facility collects and stores data from the federated sites (Santander, Aarhus and London, on this schema). Eclipse sensiNact Gateway is connected to this platform, and is notifed when IoT devices is added, removed, or when sensed data is updated. Eclipse sensiNact studio provides a graphical UI to the gateway. It ease discovering devices, and provides an editor to write applications using IoT devices.",
            "title": "Introduction"
        },
        {
            "location": "/tools/sensinact/#installation",
            "text": "To use Eclipse sensiNact, you need a gateway, and the studio. The easier solution is to install both on your onw computer (running Linux 64 bits) with the following procedure.   First, you will need to add the Eclipse sensiNact repository to  /etc/apt/sources.list  configuration file.  echo \"deb http://debian.organicity.eu ./\" | sudo tee -a /etc/apt/sources.list  Then, you can install both studio and gateway.  sudo apt-get update --yes\nsudo apt-get install --yes --allow-unauthenticated sensinact\nsudo apt-get install --yes --allow-unauthenticated sensinact-studio",
            "title": "Installation"
        },
        {
            "location": "/tools/sensinact/#configuration",
            "text": "Because Eclipse sensiNact is a modular runtime, you will need to choose the parts (bundles) you want to have up and running.  First, you need to stop your Gateway:  sudo service sensinact stop  Then, you can select the bundles:  /opt/sensinact/sensinact -c  Here are the one to choose for discovering Eclispe sensiNact.   application (Application manager)  http (HTTP stack)  organicity (For connecting Organicity EaaS)  rest (HTTP callbacks)   Now, you just need to resttart the service :  sudo service sensinact start  Optional : If you want this service to be automaticaly launched at startup, execute the following command :  sudo bash update-rc.d sensinact defaults",
            "title": "Configuration"
        },
        {
            "location": "/tools/sensinact/#eclipse-sensinact-studio",
            "text": "To start Eclipse sensiNact Studio, just run  sensinact-studio .  Eclipse sensiNact Studio allows an easy interaction with the OrganiCity  devices and the creation of applications. The Studio is based on the Eclipse platform [Eclipse] and built as a rich client platform application. The Graphical User Interface (GUI) is developed using the views mechanism from Eclipse. Thus, it proposes views for browsing devices, locating devices on a map and interacting with them, i.e., getting value from sensors or performing actions on actuators. The Studio is also targeted to ease the creation of IoT application following the Event-Condition-Action (ECA) pattern.   The GUI includes different views: navigator, deployment, properties views, as well as a Domain Specific Language (DSL) editor.",
            "title": "Eclipse sensiNact Studio"
        },
        {
            "location": "/tools/sensinact/#browsing-devices",
            "text": "Before users can use the studio for managing devices and applications, they need to connect a Eclipse sensiNact gateway. This action is performed by clicking on the plus sign icon on the device navigator. Then, gateway information have to be provided. If you have installed the gateway locally, you can use the following configuration:   Address : localhost  Port : 8080  Timeout : 10000    Once the information have been provided and the dialog validated, the Gateway is added to the Navigator View. To display and browse the available devices imported by this gateway, connecting to it is needed. This action is performed using the connect button.   The device Navigator View is then populated, and pin points are displayed on the map. By clicking on attributes names, it is possible to get the current value for the considered attribute. It is also possible to see attributes values on the map, clicking on the pin points.",
            "title": "Browsing devices"
        },
        {
            "location": "/tools/sensinact/#application-management",
            "text": "",
            "title": "Application management"
        },
        {
            "location": "/tools/sensinact/#application-creation",
            "text": "The Eclipse sensiNact Studio allows the creation of applications to be executed on the gateway. Creating an application is performed by writing a script using a dedicated syntax, and deploying this script to the gateway.   On the figure above, a project has been created on the project explorer view (on the left). In this project, a script named  speed-limit.sna  has been created, and is being edited. As the figures shows, the editor provides code highlighting (some keywords are displayed in a special font), code completion (with popups) and a syntax validator which displays red crosses on the script margin in case of error.  The dedicated syntax, a Domain Specific Language, is composed by the following blocks:   The shortcut block:  each resource is accessible through a unique URI, which can be quite long. This block aims at creating shortcut for the next blocks.  The event block:  the developer defines on which resources the application is triggered. When an event is thrown and is a valid trigger, the conditional block is executed.  The conditional block:  once the application has been triggered, and before any action can be executed, the data from the resource has to satisfy the conditional block. The keyword for this block is if followed by the conditions to be validated.  The actions statements:  if the conditional block is satisfied, actions are performed in the order that they are listed. The actions can be physical actions on actuators or virtual actions such as changing the format of a data using a mathematical function. The available actions, also named functions, are listed below:  Basic functions:  addition, subtraction, division, multiplication, modulo, string concatenation, substring, various operators (e.g., equals, greater than, lesser than, different), ACT and SET methods on Eclipse sensiNact resources.  Complex Event Processing functions (using the Esper1 library):  after, before, coincides, average, average deviation, count, max, min, median, standard deviation and sum.   The following table shows the basic structure for writing a script.   \n   [resource  ]+ \n   Shortcut block, which must contains at least one statement.   \n   on  + \n   The event block, lists the events triggering the script. At least one event must be provided.   \n   [if   do]+ [ ]+ [else do]? [ ]?+ end if; \n   The conditional block, which lists actions to be performed based on conditions.",
            "title": "Application creation"
        },
        {
            "location": "/tools/sensinact/#application-example",
            "text": "For this example, we are going to use simulated devices.  Let's run a gateway with the simulated devices.   sudo service sensinact stop  stops the gateway  with  sudo /opt/sensinact/sensinact -c  add the simulation bundle  restart the gateway with  sudo /opt/sensinact/sensinact  It's important to run the gateway this way, and not using the service to have the simulated devices UI linked to your current graphical session.    Now, in the project explorer view:   new project creation:  File > New > Project  right click on the created folder in the Project Explorer View.  New > File . Choose a name with the ending with  .sna  Add XText Nature to the project (a popup will automatically be displayed).   You can now edit your sna file with the following content:  resource slider=[OrganiCity/slider/cursor/position]\nresource light_on = [OrganiCity/light/switch/turn_on]\nresource light_off = [OrganiCity/light/switch/turn_off]\n\non slider.subscribe()\n\nif slider.get() < 500 do\n  light_off.act()\nelse do\n  light_on.act()\nend if  This script will be triggered each time the slider position will be updated ( on slider.subscribe()  statement). The light will be turned on or off depending on the slider position value.",
            "title": "Application example"
        },
        {
            "location": "/tools/sensinact/#application-deployment",
            "text": "Once the script has been written, it can be deployed to the gateway where it will be executed. This is performed using a right click on the script file.",
            "title": "Application deployment"
        },
        {
            "location": "/tools/sensinact/#application-monitoring",
            "text": "After the application has been deployed, a new set of resources is automatically created under the AppManager device. You can browse those resources into the Device Navigator View.   First of all, a new service is created with the name of the sna file (without the extension). In our example, it is  speed-limit . This service representing the application always contains a standard set of resources.   \n   \n     Resource \n     Type \n     Description \n     \n   autorestart \n   property \n   In case of failure, decides if the application should be automatically started again   \n   content \n   property \n   Script file content   \n   EXCEPTION \n   action \n   Deprecated   \n   location \n   property \n   GPS location which can be used if it makes sense    \n   maxinstances \n   property \n   Number of parallel instances which should be started   \n   resetOnStop \n   property \n   On Stop, decides if the generated resources by the application should be destroyed or kept   \n   START \n   action \n   Starts the application   \n   status \n   state variable \n   Current status of the application: START/STOP/...   \n   STOP \n   action \n   Stops the application   \n   UNINSTALL \n   action \n   Removes the application    To start the application, simply double click on the  START  resource. This will launch the start action, which will run the script.   The figure shows that the application is up and running on the server. The studio can be used to check if the application has the expected behavior, by querying the resources. The studio can also be shutted down, since the applications are executed on the gateway.",
            "title": "Application monitoring"
        },
        {
            "location": "/tools/sensinact/#conclusion",
            "text": "In this section, we have presented the way Eclipse sensiNact Studio can gives an overview of the available devices in the OrganiCity  context. We have also shown the creation process of IoT application following the Event-Condition-Action (ECA) pattern.",
            "title": "Conclusion"
        },
        {
            "location": "/tools/sensinact/#gateway",
            "text": "",
            "title": "Gateway"
        },
        {
            "location": "/tools/sensinact/#introduction_1",
            "text": "The Eclipse sensiNact Gateway allows the interconnection of heterogeneous devices and services into a consistent model. This one is presented to the Eclipse sensiNact Studio which can monitor the devices ecosystem and design application to be executed on the gateway.   More precisely, the Eclipse sensiNact Gateway integrates with the OC Platform using the Asset Discovery Service. Thereby, the gateway is aware of the assets provided by the OC Platform. On the other hand, the gateway has dedicated interfaces to directly connect to third parties devices and API. As a result, the gateway can interact with a lot of resources, which can be local or remote.",
            "title": "Introduction"
        },
        {
            "location": "/tools/sensinact/#the-gateway-architecture",
            "text": "The interactions between the gateway and other entities are performed through a set of northbound and southbound bridges. The goal of the bridges is to manage the communication with devices and services, which can be local or remote. On one hand, southbound bridges are in charge of collecting data from sensors and services, and to send orders which will be performed by actuators. On the other hand, northbound bridges are specialized in interacting with remote systems. Thanks to those bridges, it is possible to make third party systems aware of devices & virtual resources known by the gateway.   In terms of connectivity, on the southbound side the Eclipse sensiNact gateway allows to cope both with \u201cphysical device\u201d protocols and \u201cvirtual device\u201d ones, allowing a uniform and transparent access to an XBee network, or an HTTP Restful web service for example. Here's a non-exhaustive list of supported protocols:  \n   **EnOcean [EnOcean],** energy harvesting wireless sensor technology (ultra-low-power radio technology for free wireless sensors), and protocols in use to interact with those sensors; \n   **Bluetooth Low Energy.** Part of the Bluetooth specification version 4 [Bluetooth4], it is a personal area network, low power protocol designed mainly for healthcare or entertainment type of applications; \n   **MQTT [MQTT],** which is a machine-to-machine protocol, lightweight publish/subscribe messaging transport, useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium; \n   **ZigBee [ZigBee]** based protocols (XBee for example); \n   **CoAP [RFC7252],** which is a REST application protocol, designed to be \u201cthe HTTP for constrained networks and devices\u201d whose concept originated from the idea that \"the Internet Protocol could and should be applied even to the smallest devices,\" and that low-power devices with limited processing capabilities should be able to participate in the Internet of Things; it is usually used on top of a 6LoWPAN network, but it may travel regular IP networks as well (it is used by the OMA LWM2M protocol, for instance).   On the northbound side the Eclipse sensiNact gateway provides both client/server and publish/subscribe access protocols: MQTT [MQTT], JSON-RPC (1.0 and 2.0) [JSON-RPC], HTTP RESTful, CDMI [CDMI].  All the communications of Eclipse sensiNact gateway are converging to a central piece: the core. This element is in charge of the overall coordination of information, involving two managers: the device manager and the application manager.  The device manager, with its associated database (the OSGi registry) stores all the information regarding devices. This include devices availability, and also devices properties, location, etc.  The application manager is a bit more complex. It manages the applications, following devices availability and updating applications life cycle. It offers a plug-in facility, to extend its behaviour. The two main plugins are the Event Condition Action plugin, and the Complex Event Processor plugin. The Event Condition Action plugin provides the basic structure for creating applications. It allows the triggering of rules, based on event. Then, a condition can be evaluated, and actions performed accordingly. Of course, events, conditions and actions are related to devices, using the device manager. Using the Esper Engine, the Complex Event Processor plugin is able to generate high level events based on low level ones. For example, it is possible to know that two events occur in a given time interval, with a given order. The events generated by the CEP plug-in can be used in the ECA plugin.",
            "title": "The gateway architecture"
        },
        {
            "location": "/tools/sensinact/#conclusion_1",
            "text": "We have presented the architecture of the Eclipse sensiNact Gateway, and the way it is integrated into the OC Platform. We also have introduced its resource model, since it is used in the studio as well.  To help experimenters start easily using the Studio, we are providing \u201cGateways as a Service\u201d for the OrganiCity project. They are Gateways available in the cloud, and configured for interacting with OrganiCity devices.",
            "title": "Conclusion"
        },
        {
            "location": "/tools/tsmart/tsmart/",
            "text": "TSmarT\n\n\nThese are the TSmarT devices. A tool for retrieving environment data and establish alarms in your experiments within the \nOrganiCity\n EaaS platform.\n\n\nThis tool is based on the widespread TSmarT platform and its goal is to take advantage of sensor integration capabilities to provide not only a source of data but also a point to be handled remotely.\n\n\nTSmarT devices are integrated with OrganiCity platform and therefore able to share data retrieved by their sensors with experimenters and users, who can check those values through the OrganiCity \nObservatory\n. On a first stage, up to 15 TSmarT devices will be available for experimenters through OrganiCity platform. They will be initially located in different spots in Spain, with the majority of them sending data from Santander, but also from Madrid and Barcelona.\n\n\nOrganiCity TSmart devices act as a source of data, providing information related to environmental conditions thanks to the sensors integrated in them. Experimenters will be able to check periodically temperature, humidity and illuminance values wherever the devices are located, as well as establish simple alarms that could help them when creating their applications.\n\n\nTechnical capabilities\n\n\nTSmarT is a modular wireless communications platform designed to facilitate the development and implementation of M2M, monitoring and remote control applications in different markets. The TSmarT family encompasses two programmable devices (TSmoTe & TSgaTe) and expansion modules for the different wireless technologies supported (ZigBee, Wi-Fi, GPRS, NFC/RFID, GPS).\n\n\nThese products address OEMs, engineering companies and system integrators seeking for a simple way to integrate wireless technologies into their products.\n\n\nAmong its main technical features the following should be highlighted:\n\n\n\n\nStandard ANSI C programing\n\n\nMultiple communication interfaces: ZigBee, Wi-Fi, Sigfox GPRS, RFID/NFC, GPS\n\n\nReal-time multi-tasking operating system\n\n\nOpen source tools\n\n\nPowerful low-energy 32 bits microcontroller\n\n\nSensor interfaces: UART, I2C, SPI, analog and digital I/Os, RS485\n\n\n\n\nTSmarT devices support SIGFOX network, being this the technology employed to communicate them with OrganiCity platform. SIGFOX counts on wireless networks to connect low-energy objects, such as TSmarT devices, therefore offering global connectivity global cellular connectivity for the Internet of Things.\n\n\nTSmarT Configuration website\n\n\nA specific webpage devoted to let experimenters manage and configure TSmarT devices is offered within OrganiCity framework. Upon accessing its \"experimenter area\" on the OrganiCity Experimenter Portal, users who have required to perform some activities within their projects employing TSmarT devices will have the option to direct themselves to the TSmarT configuration webpage.\n\n\nThere, in the main screen they will find a list summarizing all the devices they can handle as well as their location over a map. By clicking on each device a new pop-up window will show up offering additional information, which can be expanded by clicking the \u2018STATUS\u2019 button or selecting the desired device from the left side menu. In addition, a couple of graphs below show the last measurements registered by that device sensors.\n\n\n\n\nUser has the chance to explore with more detail what is exactly happenning in each device. The screen will show all the information concerning each individual device:\n\n\n\n\nName\n\n\nGroup\n\n\nID\n\n\nDate and Time of the last measurement\n\n\nLatitude and longitude\n\n\nSensors values and alarms\n\n\n\n\nWhen clicking on \"CONFIGURE ALARMS\" a new pop-up window will appear on screen, letting experimenters modify the alarm values and establish the thresholds they prefer. Given the design characteristics and looking for guaranteeing a long device battery life, there are certain constraints related to the configuration of those alarms into the actual devices, being the changes introduced by experimenters applied twice a day.\n\n\n\n\nAll in all, this configuration webpage is an easy to handle tool which can complement your OrganiCity experience.",
            "title": "TSmarT"
        },
        {
            "location": "/tools/tsmart/tsmart/#tsmart",
            "text": "These are the TSmarT devices. A tool for retrieving environment data and establish alarms in your experiments within the  OrganiCity  EaaS platform.  This tool is based on the widespread TSmarT platform and its goal is to take advantage of sensor integration capabilities to provide not only a source of data but also a point to be handled remotely.  TSmarT devices are integrated with OrganiCity platform and therefore able to share data retrieved by their sensors with experimenters and users, who can check those values through the OrganiCity  Observatory . On a first stage, up to 15 TSmarT devices will be available for experimenters through OrganiCity platform. They will be initially located in different spots in Spain, with the majority of them sending data from Santander, but also from Madrid and Barcelona.  OrganiCity TSmart devices act as a source of data, providing information related to environmental conditions thanks to the sensors integrated in them. Experimenters will be able to check periodically temperature, humidity and illuminance values wherever the devices are located, as well as establish simple alarms that could help them when creating their applications.",
            "title": "TSmarT"
        },
        {
            "location": "/tools/tsmart/tsmart/#technical-capabilities",
            "text": "TSmarT is a modular wireless communications platform designed to facilitate the development and implementation of M2M, monitoring and remote control applications in different markets. The TSmarT family encompasses two programmable devices (TSmoTe & TSgaTe) and expansion modules for the different wireless technologies supported (ZigBee, Wi-Fi, GPRS, NFC/RFID, GPS).  These products address OEMs, engineering companies and system integrators seeking for a simple way to integrate wireless technologies into their products.  Among its main technical features the following should be highlighted:   Standard ANSI C programing  Multiple communication interfaces: ZigBee, Wi-Fi, Sigfox GPRS, RFID/NFC, GPS  Real-time multi-tasking operating system  Open source tools  Powerful low-energy 32 bits microcontroller  Sensor interfaces: UART, I2C, SPI, analog and digital I/Os, RS485   TSmarT devices support SIGFOX network, being this the technology employed to communicate them with OrganiCity platform. SIGFOX counts on wireless networks to connect low-energy objects, such as TSmarT devices, therefore offering global connectivity global cellular connectivity for the Internet of Things.",
            "title": "Technical capabilities"
        },
        {
            "location": "/tools/tsmart/tsmart/#tsmart-configuration-website",
            "text": "A specific webpage devoted to let experimenters manage and configure TSmarT devices is offered within OrganiCity framework. Upon accessing its \"experimenter area\" on the OrganiCity Experimenter Portal, users who have required to perform some activities within their projects employing TSmarT devices will have the option to direct themselves to the TSmarT configuration webpage.  There, in the main screen they will find a list summarizing all the devices they can handle as well as their location over a map. By clicking on each device a new pop-up window will show up offering additional information, which can be expanded by clicking the \u2018STATUS\u2019 button or selecting the desired device from the left side menu. In addition, a couple of graphs below show the last measurements registered by that device sensors.   User has the chance to explore with more detail what is exactly happenning in each device. The screen will show all the information concerning each individual device:   Name  Group  ID  Date and Time of the last measurement  Latitude and longitude  Sensors values and alarms   When clicking on \"CONFIGURE ALARMS\" a new pop-up window will appear on screen, letting experimenters modify the alarm values and establish the thresholds they prefer. Given the design characteristics and looking for guaranteeing a long device battery life, there are certain constraints related to the configuration of those alarms into the actual devices, being the changes introduced by experimenters applied twice a day.   All in all, this configuration webpage is an easy to handle tool which can complement your OrganiCity experience.",
            "title": "TSmarT Configuration website"
        },
        {
            "location": "/tools/set/",
            "text": "Sensing on the Go\n\n\nExperimenter Guide\n\n\nIntroduction\n\n\nThis guide will help you understand the functionality provided by the Sensing on the Go (previously known as Smartphone Experimentation) OrganiCity\nCoCreation tool, its capabilities and all the necessary steps to create, configure, monitor and manage your\nexperiment as well as retrieve the data collected.\n\n\nExperimentation as a Service\n\n\nThe Sensing on the Go is offered as an Experimentation As A Service tool that you can easily use over\nvia its cloud infrastructures and the provided Android Smartphone Application.\n\n\nExperimenter Portal\n\nThe Sensing on the Go cloud interface is tightly integrated with the OrganiCity Experimenter's portal.\nMost of the functionalities for managing the experimentation flow. In order to configure a new Experiment\nExperimenters need to follow the steps presented bellow:\n\n\n\n\nCreate an Account for OrganiCity and be accepted as an Experimenter.\n\n\nRegister a new Experiment and fill in all the required information.\n\n\nDraw a number of regions of interest on the Map for the data collection to take place.\n\n\nCreate an Application of type \"Smartphone Application\".\n\n\nNow your application is ready to be executed! (not realy :P)\n\n\n\n\nThere are \nthree operations that differentiate\n the creation of a Smartphone Crowdsensing Experiment from\nthe rest\nof the OrganiCity Experiments.\n\n\nFirst, when the experimentation areas are defined, the experimenter need to specify more information including:\n\n\n\n\nthe expected \nnumber of samples\n (minimum and expected) for collection by the experimenters,\n\n\nthe \ntime spans\n for the experimentation to be executed,\n\n\nthe \nimportance\n of the area in the whole experiment.\n\n\n\n\nSecondly, the experimenter needs to select which sensors the experiment will use on the smartphone.\nThe experimenter can select any of the available sensor plugins without the need for uploading any piece of\ncode.\nIn the case that the experimenter needs to upload a new sensor plugin, the upload can be done from this link.\nAny new sensor plugin can be either public or private based on the choice of the experimenter.\n\n\nFinally, the experimenter needs to provide the jar file that contains the business logic of the experiment.\nThis is a specific jar file for the experiment and is responsible for preparing the data for upload to the\nSensing on the Go Storage Services.\n\n\nDevelopment Environment\n\n\nSensing on the Go is based on the Android platform. It manages and uses multiple background services\nto communicate between the app and both the sensors and experiments running.\n\n\nIn the context of Sensing on the Go there are two types of Android plugins to be used:\n\n\n\n\nSensors and\n\n\nExperiments\n\n\n\n\nSensors operate on an async call for a context update and provide data back to the SET wrapper for this request. (calls\nto getPluginInfo ).\nExperiments operate on an synchronous call for a context update and provide data back to the SET wrapper for this request. (calls\nto getExperimentResult ).\n\n\nExperiment Plugins can access data from all Sensor plugins and :\n\n\n\n\neither simply aggregate them to a single measurement to upload to the server or\n\n\ndo internal calculations and format the results as the message to upload to the server.\n\n\n\n\nCode templates and examples for sensor and experiment plugins are available in the following repositories:\n\n\n\n\nSensor Plugins\n\n\nExperiment Plugins\n\n\n\n\nAll of them are available to use without the need for any development. If experimenters need to use any of them,\nthey simply need to select them during the creation of the experiment.",
            "title": "Sensing on the Go"
        },
        {
            "location": "/tools/set/#sensing-on-the-go",
            "text": "",
            "title": "Sensing on the Go"
        },
        {
            "location": "/tools/set/#experimenter-guide",
            "text": "",
            "title": "Experimenter Guide"
        },
        {
            "location": "/tools/set/#introduction",
            "text": "This guide will help you understand the functionality provided by the Sensing on the Go (previously known as Smartphone Experimentation) OrganiCity\nCoCreation tool, its capabilities and all the necessary steps to create, configure, monitor and manage your\nexperiment as well as retrieve the data collected.",
            "title": "Introduction"
        },
        {
            "location": "/tools/set/#experimentation-as-a-service",
            "text": "The Sensing on the Go is offered as an Experimentation As A Service tool that you can easily use over\nvia its cloud infrastructures and the provided Android Smartphone Application.  Experimenter Portal \nThe Sensing on the Go cloud interface is tightly integrated with the OrganiCity Experimenter's portal.\nMost of the functionalities for managing the experimentation flow. In order to configure a new Experiment\nExperimenters need to follow the steps presented bellow:   Create an Account for OrganiCity and be accepted as an Experimenter.  Register a new Experiment and fill in all the required information.  Draw a number of regions of interest on the Map for the data collection to take place.  Create an Application of type \"Smartphone Application\".  Now your application is ready to be executed! (not realy :P)   There are  three operations that differentiate  the creation of a Smartphone Crowdsensing Experiment from\nthe rest\nof the OrganiCity Experiments.  First, when the experimentation areas are defined, the experimenter need to specify more information including:   the expected  number of samples  (minimum and expected) for collection by the experimenters,  the  time spans  for the experimentation to be executed,  the  importance  of the area in the whole experiment.   Secondly, the experimenter needs to select which sensors the experiment will use on the smartphone.\nThe experimenter can select any of the available sensor plugins without the need for uploading any piece of\ncode.\nIn the case that the experimenter needs to upload a new sensor plugin, the upload can be done from this link.\nAny new sensor plugin can be either public or private based on the choice of the experimenter.  Finally, the experimenter needs to provide the jar file that contains the business logic of the experiment.\nThis is a specific jar file for the experiment and is responsible for preparing the data for upload to the\nSensing on the Go Storage Services.  Development Environment  Sensing on the Go is based on the Android platform. It manages and uses multiple background services\nto communicate between the app and both the sensors and experiments running.  In the context of Sensing on the Go there are two types of Android plugins to be used:   Sensors and  Experiments   Sensors operate on an async call for a context update and provide data back to the SET wrapper for this request. (calls\nto getPluginInfo ).\nExperiments operate on an synchronous call for a context update and provide data back to the SET wrapper for this request. (calls\nto getExperimentResult ).  Experiment Plugins can access data from all Sensor plugins and :   either simply aggregate them to a single measurement to upload to the server or  do internal calculations and format the results as the message to upload to the server.   Code templates and examples for sensor and experiment plugins are available in the following repositories:   Sensor Plugins  Experiment Plugins   All of them are available to use without the need for any development. If experimenters need to use any of them,\nthey simply need to select them during the creation of the experiment.",
            "title": "Experimentation as a Service"
        },
        {
            "location": "/tools/websockets/",
            "text": "Websockets\n\n\nIntroduction\n\n\nThis tool has been made available in order to provide real-time updates from assets in theOrganiCity platform. As an example, I might want to get a notification if the lights suddenly turns on in my office. By having e.g. a smartphone application that is using the websockets tool, it becomes possible to listen for updates coming directly from the office (provided that the office's light source is registerede as an asset in the OrganiCity platform). More generally, this tool creates a websocket client for connecting with the OrganiCity platform, and subscribe to updates on assets already registered on the platform.\n\n\nInstallation\n\n\nIn order to make this tool work one would need to be working in a Java environment, and it is therefore a prerequisite that a java IDE is installed. Otherwise, the installation is quite simple.\n\n\n\n\nGo to this Github page and download the project as a zip file: https://github.com/OrganicityEu/WebsocketClient\n\n\nUnzip the file locally\n\n\nYou can either open the entire websockets project as a maven project in your favourite java IDE or simply import WebsocketsClient/libs/WebsocketClient.jar as an external jar into your existing project\n\n\n\n\nThat is it! In the following section, we will provide a concrete usage example on how to import the websocket tool as an external jar into a new java project.\n\n\nUsage example\n\n\nThis section provides a simple example on how to use the websocket tool, and we will be using Netbeans as the java IDE. The specific example shows how to subscribe to a single asset already created in the OrganiCity platform (it is not possible to subscribe to more than one asset at a time, and it is not possible to subscribe to creation or deletion of a new asset).\n\n\nStart Netbeans and create a new empty java project\n\n\nThe below screenshots show the steps of creating a simple java application\n\n\n\n\n\n\nWhen the java project has been created it is time to import the websocket connection\n\n\nAdd WebsocketsClient.jar as external jar\n\n\nThe below screenshots show how to add an external jar to an existing java project.\n\n\nFirst you need to right-click on the \"Libraries\" folder and select \"Add Jar/Folder...\"\n\n\n\n\nThen you have to browse to where you unzipped the file from Github (see Installation section), select teh file named \"WebsocketClient.jar\", and finally click \"Choose\".\n\n\n\n\nThat's it. The library has now been imported and can be leveraged in your project. In order to test the websocket functionality it is required to have an existing asset. If you don't have an existing asset, then read the next section. Otherwise, you can skip this section and jump directly to \"Get authentication token\".\n\n\nAdding an asset (can be omitted if there is already an asset available)\n\n\nThis task can only be performed if you are a registered OrganiCity experimenter! In order to become an experimenter go to this website https://experimenters.organicity.eu, and click \"Sign in\" (even if you don't have a user yet - you can create one).\n\n\nYou create a new asset by following this the steps in this link: http://docs.organicity.eu/HowToPushAnAssetToTheExperimenterSite/#tutorial-how-to-push-an-assets-to-the-organicity-experimenter-site\n\n\nWhen the asset has been created, the next step is authentication.\n\n\nGet authentication token\n\n\nIn order to be able to actually subscribe to a specific asset you need an anthentication token (a proof that you actually have the rights to get the information from the asset). This can be quite tricky, but we have created a tutorial on how to get the token: http://docs.organicity.eu/HowToAuthenticateAnUser/. You can either follow the steps directly from top to bottom or you can scroll all the way to the bottom of the tutorial and leverage existing libraries which might reduce some of your complexity.\n\n\nWhen you have generated the authentication token it is time write some code.\n\n\nCode example\n\n\nBelow is a code snippet showing how to subscribe to a specific asset. The specific code is not of any great use in a real setting, since it just performs a new subscription, and then deletes it five seconds later. The only purpose of the example is to show how to both subscribe and unsubscribe.\n\n\nYou can subscribe to an asset by using one of the following two constructors:\n\n\n\n\nThe simple: public OrionSubscription(String entityId, String token)\n\n\nThe advanced: public OrionSubscription(String[] conditions, String[] attributes, String entityId, String token)\n\n\n\n\nA specific code example would be:\n\n\nOrionSubscription subscription = new OrionSubscription(\"some_entity_id\", \"some_token_string\");\n\n\nEach of the parameters are described in the table below\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nValue\n\n\nType\n\n\n\n\n\n\n\n\n\n\nconditions\n\n\nDefines the \"trigger\" for the subscription\n\n\nNeed value\n\n\nString[]\n\n\n\n\n\n\nattributes\n\n\nDefine the \"triggering attributes\"\n\n\nNeed value\n\n\nString[]\n\n\n\n\n\n\nentityId\n\n\nId of the asset you want to subscribe to\n\n\nNeed value\n\n\nString\n\n\n\n\n\n\ntoken\n\n\nThe token accuired in the previous step\n\n\nNeed value\n\n\nString\n\n\n\n\n\n\n\n\nBelow is an example of a valid asset:\n\n\n{\n  \"id\": \"urn:oc:entity:experimenters:5a660d96-0ef7-42ca-9f6c-5dbb86d6aa20:58ab32f36f8b513746565c54:wsasset\",\n  \"type\": \"urn:oc:entityType:userImage\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\",\n    \"metadata\": {}\n  },\n  \"comments\": {\n    \"type\": \"urn:oc:attributeType:text:string\",\n    \"value\": \"hello\",\n    \"metadata\": {}\n  },\n  \"user\": {\n    \"type\": \"urn:oc:attributeType:text:string\",\n    \"value\": \"world\",\n    \"metadata\": {}\n  }\n}\n\n\n\n\nAnd now the actual code :-)\n\n\nimport java.util.List;\nimport dk.alexandra.orion.websocket.transports.OrionSubscription;\nimport websockets.WebsocketClientStomp;\nimport websockets.handlers.WebsocketCallback;\n\npublic class VanillaTestClient implements WebsocketCallback{\n\n  WebsocketClientStomp wsc;\n  long now;\n  boolean hasSubscription = false;\n\n\n  public VanillaTestClient(){\n    now = System.currentTimeMillis();\n    wsc= new WebsocketClientStomp(this, \"ws://31.200.243.76:8090/orion\");\n    startLoop();\n  }\n\n  private void startLoop(){\n    while(true){\n      if(System.currentTimeMillis()>now+5000){\n        if(!hasSubscription){\n      /*\n      Example of setting conditions and attributes. \"comments\" and \"user\" are taken\n      from the example asset above. When using these, you will get a notifaction\n      with user information, when the comment is altered (if \"hello\" is changed to\n      something else)\n      */\n      String[] attr = new String[1];\n      attr[0] = \"comments\";\n      String[] cond = new String[1];\n      cond[0] = \"user\";\n\n      String entityId = \"<Your asset id here here>\";\n      String token = \"<Your token here>\";\n\n      //Example of subscribing to certain asset conditions and attributes\n      //OrionSubscription subscription = new OrionSubscription(cond, attr, entityId, token);\n\n      //Example of subscribing to a certain asset without any specific conditions\n      OrionSubscription subscription = new OrionSubscription(entityId, token);\n\n      System.out.println(\"trying to set subscrition\");\n      hasSubscription = wsc.registerSubscription(subscription);\n\n          if(hasSubscription){\n            System.out.println(\"subscription set\");\n          }  \n        }else{\n          List<String> subscriptions = wsc.getSubscriptions();\n          if(subscriptions.size()>0){\n            if(wsc.unregisterSubscription(subscriptions.get(0))){\n              hasSubscription=false;  \n            }\n          }\n        }\n\n        now = System.currentTimeMillis();\n      }\n    }\n  }\n\n  @Override\n  public void messageReceived(String mesg) {\n    System.out.println(\"Received message in Processing \"+mesg);\n  }\n\n\n  public static void main(String[] args){\n    System.out.println(\"Starting Vanilla test client\");\n    VanillaTestClient client = new VanillaTestClient();\n  }\n}\n\n\n\n\nIf everything went as expected, then you have now made your first subscriptioon to the OrganiCity platform, and you are ready to make your application truely responsive to changes within OrganiCity.\n\n\nTechnical background\n\n\nThe OrganiCity platform is built around the Orion Context Broker (https://fiware-orion.readthedocs.io/en/master/), and the websockets tool conform to the abilities and formats dictated by the context broker. As the Context Broker is REST based, we provide a Spring.io based middleware (https://github.com/OrganicityEu-Platform/WebsocketMiddleware) for transforming the connections between REST and Websockets.\n\n\nFor further technical and code detail, please take a look here: https://github.com/OrganicityEu/WebsocketClient\n\n\nTechnical reference to the Orion context brokers subscription feature: https://fiware-orion.readthedocs.io/en/develop/user/walkthrough_apiv2/index.html#subscriptions\n\n\nLook there to acquire token: http://docs.organicity.eu/HowToAuthenticateAnUser/\n\n\nKnown issues\n\n\nWhen running the example code directly from within your IDE (e.g. Eclipse or Netbeans) it seems that the java process will not close down when stopping the application. It will only shut down properly if you run the application as debug. If you run the example from the commandline (as the final application outside of the IDE) then there should be no problems - it should all be working as expected, and all related java processe will clode down correctly.",
            "title": "Websockets"
        },
        {
            "location": "/tools/websockets/#websockets",
            "text": "",
            "title": "Websockets"
        },
        {
            "location": "/tools/websockets/#introduction",
            "text": "This tool has been made available in order to provide real-time updates from assets in theOrganiCity platform. As an example, I might want to get a notification if the lights suddenly turns on in my office. By having e.g. a smartphone application that is using the websockets tool, it becomes possible to listen for updates coming directly from the office (provided that the office's light source is registerede as an asset in the OrganiCity platform). More generally, this tool creates a websocket client for connecting with the OrganiCity platform, and subscribe to updates on assets already registered on the platform.",
            "title": "Introduction"
        },
        {
            "location": "/tools/websockets/#installation",
            "text": "In order to make this tool work one would need to be working in a Java environment, and it is therefore a prerequisite that a java IDE is installed. Otherwise, the installation is quite simple.   Go to this Github page and download the project as a zip file: https://github.com/OrganicityEu/WebsocketClient  Unzip the file locally  You can either open the entire websockets project as a maven project in your favourite java IDE or simply import WebsocketsClient/libs/WebsocketClient.jar as an external jar into your existing project   That is it! In the following section, we will provide a concrete usage example on how to import the websocket tool as an external jar into a new java project.",
            "title": "Installation"
        },
        {
            "location": "/tools/websockets/#usage-example",
            "text": "This section provides a simple example on how to use the websocket tool, and we will be using Netbeans as the java IDE. The specific example shows how to subscribe to a single asset already created in the OrganiCity platform (it is not possible to subscribe to more than one asset at a time, and it is not possible to subscribe to creation or deletion of a new asset).",
            "title": "Usage example"
        },
        {
            "location": "/tools/websockets/#start-netbeans-and-create-a-new-empty-java-project",
            "text": "The below screenshots show the steps of creating a simple java application    When the java project has been created it is time to import the websocket connection",
            "title": "Start Netbeans and create a new empty java project"
        },
        {
            "location": "/tools/websockets/#add-websocketsclientjar-as-external-jar",
            "text": "The below screenshots show how to add an external jar to an existing java project.  First you need to right-click on the \"Libraries\" folder and select \"Add Jar/Folder...\"   Then you have to browse to where you unzipped the file from Github (see Installation section), select teh file named \"WebsocketClient.jar\", and finally click \"Choose\".   That's it. The library has now been imported and can be leveraged in your project. In order to test the websocket functionality it is required to have an existing asset. If you don't have an existing asset, then read the next section. Otherwise, you can skip this section and jump directly to \"Get authentication token\".",
            "title": "Add WebsocketsClient.jar as external jar"
        },
        {
            "location": "/tools/websockets/#adding-an-asset-can-be-omitted-if-there-is-already-an-asset-available",
            "text": "This task can only be performed if you are a registered OrganiCity experimenter! In order to become an experimenter go to this website https://experimenters.organicity.eu, and click \"Sign in\" (even if you don't have a user yet - you can create one).  You create a new asset by following this the steps in this link: http://docs.organicity.eu/HowToPushAnAssetToTheExperimenterSite/#tutorial-how-to-push-an-assets-to-the-organicity-experimenter-site  When the asset has been created, the next step is authentication.",
            "title": "Adding an asset (can be omitted if there is already an asset available)"
        },
        {
            "location": "/tools/websockets/#get-authentication-token",
            "text": "In order to be able to actually subscribe to a specific asset you need an anthentication token (a proof that you actually have the rights to get the information from the asset). This can be quite tricky, but we have created a tutorial on how to get the token: http://docs.organicity.eu/HowToAuthenticateAnUser/. You can either follow the steps directly from top to bottom or you can scroll all the way to the bottom of the tutorial and leverage existing libraries which might reduce some of your complexity.  When you have generated the authentication token it is time write some code.",
            "title": "Get authentication token"
        },
        {
            "location": "/tools/websockets/#code-example",
            "text": "Below is a code snippet showing how to subscribe to a specific asset. The specific code is not of any great use in a real setting, since it just performs a new subscription, and then deletes it five seconds later. The only purpose of the example is to show how to both subscribe and unsubscribe.  You can subscribe to an asset by using one of the following two constructors:   The simple: public OrionSubscription(String entityId, String token)  The advanced: public OrionSubscription(String[] conditions, String[] attributes, String entityId, String token)   A specific code example would be:  OrionSubscription subscription = new OrionSubscription(\"some_entity_id\", \"some_token_string\");  Each of the parameters are described in the table below     Parameter  Description  Value  Type      conditions  Defines the \"trigger\" for the subscription  Need value  String[]    attributes  Define the \"triggering attributes\"  Need value  String[]    entityId  Id of the asset you want to subscribe to  Need value  String    token  The token accuired in the previous step  Need value  String     Below is an example of a valid asset:  {\n  \"id\": \"urn:oc:entity:experimenters:5a660d96-0ef7-42ca-9f6c-5dbb86d6aa20:58ab32f36f8b513746565c54:wsasset\",\n  \"type\": \"urn:oc:entityType:userImage\",\n  \"TimeInstant\": {\n    \"type\": \"urn:oc:attributeType:ISO8601\",\n    \"value\": \"2016-10-04T13:45:00.000Z\",\n    \"metadata\": {}\n  },\n  \"comments\": {\n    \"type\": \"urn:oc:attributeType:text:string\",\n    \"value\": \"hello\",\n    \"metadata\": {}\n  },\n  \"user\": {\n    \"type\": \"urn:oc:attributeType:text:string\",\n    \"value\": \"world\",\n    \"metadata\": {}\n  }\n}  And now the actual code :-)  import java.util.List;\nimport dk.alexandra.orion.websocket.transports.OrionSubscription;\nimport websockets.WebsocketClientStomp;\nimport websockets.handlers.WebsocketCallback;\n\npublic class VanillaTestClient implements WebsocketCallback{\n\n  WebsocketClientStomp wsc;\n  long now;\n  boolean hasSubscription = false;\n\n\n  public VanillaTestClient(){\n    now = System.currentTimeMillis();\n    wsc= new WebsocketClientStomp(this, \"ws://31.200.243.76:8090/orion\");\n    startLoop();\n  }\n\n  private void startLoop(){\n    while(true){\n      if(System.currentTimeMillis()>now+5000){\n        if(!hasSubscription){\n      /*\n      Example of setting conditions and attributes. \"comments\" and \"user\" are taken\n      from the example asset above. When using these, you will get a notifaction\n      with user information, when the comment is altered (if \"hello\" is changed to\n      something else)\n      */\n      String[] attr = new String[1];\n      attr[0] = \"comments\";\n      String[] cond = new String[1];\n      cond[0] = \"user\";\n\n      String entityId = \"<Your asset id here here>\";\n      String token = \"<Your token here>\";\n\n      //Example of subscribing to certain asset conditions and attributes\n      //OrionSubscription subscription = new OrionSubscription(cond, attr, entityId, token);\n\n      //Example of subscribing to a certain asset without any specific conditions\n      OrionSubscription subscription = new OrionSubscription(entityId, token);\n\n      System.out.println(\"trying to set subscrition\");\n      hasSubscription = wsc.registerSubscription(subscription);\n\n          if(hasSubscription){\n            System.out.println(\"subscription set\");\n          }  \n        }else{\n          List<String> subscriptions = wsc.getSubscriptions();\n          if(subscriptions.size()>0){\n            if(wsc.unregisterSubscription(subscriptions.get(0))){\n              hasSubscription=false;  \n            }\n          }\n        }\n\n        now = System.currentTimeMillis();\n      }\n    }\n  }\n\n  @Override\n  public void messageReceived(String mesg) {\n    System.out.println(\"Received message in Processing \"+mesg);\n  }\n\n\n  public static void main(String[] args){\n    System.out.println(\"Starting Vanilla test client\");\n    VanillaTestClient client = new VanillaTestClient();\n  }\n}  If everything went as expected, then you have now made your first subscriptioon to the OrganiCity platform, and you are ready to make your application truely responsive to changes within OrganiCity.",
            "title": "Code example"
        },
        {
            "location": "/tools/websockets/#technical-background",
            "text": "The OrganiCity platform is built around the Orion Context Broker (https://fiware-orion.readthedocs.io/en/master/), and the websockets tool conform to the abilities and formats dictated by the context broker. As the Context Broker is REST based, we provide a Spring.io based middleware (https://github.com/OrganicityEu-Platform/WebsocketMiddleware) for transforming the connections between REST and Websockets.  For further technical and code detail, please take a look here: https://github.com/OrganicityEu/WebsocketClient  Technical reference to the Orion context brokers subscription feature: https://fiware-orion.readthedocs.io/en/develop/user/walkthrough_apiv2/index.html#subscriptions  Look there to acquire token: http://docs.organicity.eu/HowToAuthenticateAnUser/",
            "title": "Technical background"
        },
        {
            "location": "/tools/websockets/#known-issues",
            "text": "When running the example code directly from within your IDE (e.g. Eclipse or Netbeans) it seems that the java process will not close down when stopping the application. It will only shut down properly if you run the application as debug. If you run the example from the commandline (as the final application outside of the IDE) then there should be no problems - it should all be working as expected, and all related java processe will clode down correctly.",
            "title": "Known issues"
        },
        {
            "location": "/tools/scenarios/",
            "text": "Scenarios\n\n\nIntroduction\n\n\nThe scenario tool has been developed through the vision of capturing citizens' ideas about their cities. The overall aim is to make anyone able to create their own vison of how a smart city could look like, by descibing a specific future situation, service, product or something completely different, that they imagine would become part of their city. The scenario tool is basically a repository of future stories told by ordinary citiznes and the people involved in the OrganiCity project. Become part of the tool by contributing your future ideas.\n\n\nScenario tool walk-through\n\n\nThis section will go over how to interact with the tool from an end-user perspective. It is possible to grab the source code, and make your own scenario tool or repurpose it for use in an other context. Additionally, you can interact with the scenario tool through our REST api. These more technical features can be explored by going to the ver last section of this tutorial \"Technical background and use\".\n\n\nThe scenario tool is available here: https://scenarios.organicity.eu\n\n\nThe landing page\n\n\nWhen entering the website for the first time you will be presented with an overview of the eight types of scenarios available, and how many have been generated under each type. Additionally, there is an overview of the latest added scenarios (see picture below).\n\n\n\n\nIt is possible to select between english and spanish, when traversing the website. A specific scenario has been written in the language prefered by the author, and will therefore not be changed when changing the language of the website! the below picture shows how to change language:\n\n\n\n\nExploring scenarios\n\n\nWhen pressing the \"explore\" button at the top of the webpage, you will be refered to a page that resembles the landing page. The difference is that, it is now possible to browse through all available scenarios, and there is a filtering mechanism for simplifying search. The below picture shows how the explore page looks like.\n\n\n\n\nIf no filtering has been applied, you can simply scroll your way trough all the scenarios. This can be quite combersome as the repository grows, and as a result we have added filtering that will reduce the scrollable list significantly. Filtering can through rtext searching and / or by by clicking on the types of interest. In the below picture \"transport\" and \"energy\" has been selected as the two types of interest. The list of relevant scenarios will automatically change according to what filtering has been applied.\n\n\n\n\nSelecting a specific scenario\n\n\nwhen you have browsed the scenarios, and finally found one of interest, you simply click on it, and you will be directed to an elaborated page. In the below picture a specific scenario has been selected, and it now becomes possible to read the full scenario, see a star rating, evaluate the scenario, see how many has viewed it and how many comments it has gotten.\n\n\n\n\nRating a scenario is done by hovering the mouse marker over the star at the top left corner of the page. The star expands into five stars, and you simply move the cursor to the number of stars you would like the scenario to have, and lick the mouse button. You can always change your mind and redu the rating at a later stage.\n\n\n\n\nIt is also possible to bookmark a scenario for later reference (the list of bookmarked scenarios can be found under your profile). Bookmarking happens much the same way as with star rating. You move the mouse cursor to the bookmark icon at the top left of the webpage, and click. When the icon becomes filled it is saved. You can remove the bookmark simply by clicking once more at the icon, so that it becomes transparetn again.\n\n\n\n\nCreate a scenario\n\n\nAt some point you might have been so entrigued that you decide to contribute your own scenario. In order to do this, you simply click \"CREATE\" at the very top of the webpage. First you will be required to create a new user if you don't have onw already. When the user creation is finished, you will be refered to a page that looks like the picture below:\n\n\n\n\nYou are presented with an elaborate form that needs to be filled out. We have provided helping text for understanding what needs to be filled in each of the boxes. When you have finished filling out the form click \"PREVIEW\", and you will be ready to publish the scenario to the broad public.\n\n\nMy profile\n\n\nThe very last part of traversing the scenario tool is to look at your profile page (see picture below). Here you can update your information, see a list of the secnarios you have contributed, and a list of your bookmarked scenarios\n\n\n\n\nThat's it! You now now everything that is worth knowing about the scenario tool, from an end-user perspective. If you are interested in knowing what is under the hood of the tool, we have both the source code publicly available on Github, and we have a REST api. In the following section we will point you to the relevant locations.\n\n\nTechnical background and use\n\n\nThe Scenario tool is completely open source, and can be repurposed for any use. The code base is available at Github, and can be found here: https://github.com/OrganicityEu-Platform/scenarios\n\n\nIf you would like to interact programmatically with the Scenario tool (e.g. extract all available scenarios), then you can simply leverage the existing REST api, which can be found here: https://organicityeu.github.io/api/Scenarios.html",
            "title": "Scenarios"
        },
        {
            "location": "/tools/scenarios/#scenarios",
            "text": "",
            "title": "Scenarios"
        },
        {
            "location": "/tools/scenarios/#introduction",
            "text": "The scenario tool has been developed through the vision of capturing citizens' ideas about their cities. The overall aim is to make anyone able to create their own vison of how a smart city could look like, by descibing a specific future situation, service, product or something completely different, that they imagine would become part of their city. The scenario tool is basically a repository of future stories told by ordinary citiznes and the people involved in the OrganiCity project. Become part of the tool by contributing your future ideas.",
            "title": "Introduction"
        },
        {
            "location": "/tools/scenarios/#scenario-tool-walk-through",
            "text": "This section will go over how to interact with the tool from an end-user perspective. It is possible to grab the source code, and make your own scenario tool or repurpose it for use in an other context. Additionally, you can interact with the scenario tool through our REST api. These more technical features can be explored by going to the ver last section of this tutorial \"Technical background and use\".  The scenario tool is available here: https://scenarios.organicity.eu",
            "title": "Scenario tool walk-through"
        },
        {
            "location": "/tools/scenarios/#the-landing-page",
            "text": "When entering the website for the first time you will be presented with an overview of the eight types of scenarios available, and how many have been generated under each type. Additionally, there is an overview of the latest added scenarios (see picture below).   It is possible to select between english and spanish, when traversing the website. A specific scenario has been written in the language prefered by the author, and will therefore not be changed when changing the language of the website! the below picture shows how to change language:",
            "title": "The landing page"
        },
        {
            "location": "/tools/scenarios/#exploring-scenarios",
            "text": "When pressing the \"explore\" button at the top of the webpage, you will be refered to a page that resembles the landing page. The difference is that, it is now possible to browse through all available scenarios, and there is a filtering mechanism for simplifying search. The below picture shows how the explore page looks like.   If no filtering has been applied, you can simply scroll your way trough all the scenarios. This can be quite combersome as the repository grows, and as a result we have added filtering that will reduce the scrollable list significantly. Filtering can through rtext searching and / or by by clicking on the types of interest. In the below picture \"transport\" and \"energy\" has been selected as the two types of interest. The list of relevant scenarios will automatically change according to what filtering has been applied.",
            "title": "Exploring scenarios"
        },
        {
            "location": "/tools/scenarios/#selecting-a-specific-scenario",
            "text": "when you have browsed the scenarios, and finally found one of interest, you simply click on it, and you will be directed to an elaborated page. In the below picture a specific scenario has been selected, and it now becomes possible to read the full scenario, see a star rating, evaluate the scenario, see how many has viewed it and how many comments it has gotten.   Rating a scenario is done by hovering the mouse marker over the star at the top left corner of the page. The star expands into five stars, and you simply move the cursor to the number of stars you would like the scenario to have, and lick the mouse button. You can always change your mind and redu the rating at a later stage.   It is also possible to bookmark a scenario for later reference (the list of bookmarked scenarios can be found under your profile). Bookmarking happens much the same way as with star rating. You move the mouse cursor to the bookmark icon at the top left of the webpage, and click. When the icon becomes filled it is saved. You can remove the bookmark simply by clicking once more at the icon, so that it becomes transparetn again.",
            "title": "Selecting a specific scenario"
        },
        {
            "location": "/tools/scenarios/#create-a-scenario",
            "text": "At some point you might have been so entrigued that you decide to contribute your own scenario. In order to do this, you simply click \"CREATE\" at the very top of the webpage. First you will be required to create a new user if you don't have onw already. When the user creation is finished, you will be refered to a page that looks like the picture below:   You are presented with an elaborate form that needs to be filled out. We have provided helping text for understanding what needs to be filled in each of the boxes. When you have finished filling out the form click \"PREVIEW\", and you will be ready to publish the scenario to the broad public.",
            "title": "Create a scenario"
        },
        {
            "location": "/tools/scenarios/#my-profile",
            "text": "The very last part of traversing the scenario tool is to look at your profile page (see picture below). Here you can update your information, see a list of the secnarios you have contributed, and a list of your bookmarked scenarios   That's it! You now now everything that is worth knowing about the scenario tool, from an end-user perspective. If you are interested in knowing what is under the hood of the tool, we have both the source code publicly available on Github, and we have a REST api. In the following section we will point you to the relevant locations.",
            "title": "My profile"
        },
        {
            "location": "/tools/scenarios/#technical-background-and-use",
            "text": "The Scenario tool is completely open source, and can be repurposed for any use. The code base is available at Github, and can be found here: https://github.com/OrganicityEu-Platform/scenarios  If you would like to interact programmatically with the Scenario tool (e.g. extract all available scenarios), then you can simply leverage the existing REST api, which can be found here: https://organicityeu.github.io/api/Scenarios.html",
            "title": "Technical background and use"
        },
        {
            "location": "/tools/tinkerspace/",
            "text": "Tinkerspace\n\n\nIntroduction\n\n\nAn increasing amount of people are interested in creating a personalized digital experience, i.e. to be able to select and form the usage of electronic devices to suit their own personal preferences. This might include using unique mobile applications, but not everyone have the technical skills required to develop complex applications. The idea behind Tinkerspace is to provide both technical and non technical citizens with a powerful graphical editor tool that enables them to transform their ideas into mobile applications. \n\n\nWithin the OrganiCity facility, Tinkerspace offers the following functionality: \n\n\n\n\nEnables end-users to quickly \nbuild\n a mobile web application based on a set of ready-made building blocks with smart city and the open data access\n\n\nEnables experimenters to develop specific building blocks tailor-made for their experiment. These blocks can then be built into powerful mobile web applications to be used by end-users, or can \n    be made available for end-users co-creation\n\n\n\n\nTinkerspace is available at \nTinkerspace\n .\n\n\nFunctionalities and features\n\n\nTinkerspace uses the notion of \nblocks\n much like in a LEGO\u2122 fashion. Users can connect existing blocks in the graphical editor in order to create applications without the need for programming. When a user makes connections between blocks, the result will show in a preview screen indicating the final smartphone appearance in real time. When the user is satisfied, the application can be shared by sending the URL of the web application to others. The link to the web application may be saved in the home screen of most mobile devices, giving a similar appearance as a downloaded app. The web applications are platform independent so they work on all modern smart phones.\n\n\nFor Tinkerspace users who know Javascript programming, it is possible to create their own blocks. This opens up the possibility for creating a vast amount of different applications using the platform. It is also possible for programmers to share their created blocks with other users, which makes the library of blocks being constantly extended. Moreover, it is also possible for the creator of a block to let other developers see the code and connections of a block and \nremix\n this to fit their own needs.\n\n\nImplementation\n\n\nA few blocks in the Tinkerspace platform have been created for interacting with the OC Platform. These serve as a starting point for experimenters to get up and running with OC Experiments and data quickly. The Tinkerspace OrganiCity-specific blocks use the following OrganiCity Components:\n\n\n\n\nThe OC Accounts for performing authorization\n\n\nThe OC Experimenter Portal where the experimenter sets up their experiment and retrieves the experimenter ID and the experiment ID\n\n\nThe OC Asset Discovery Service for retrieving OC Assets\n\n\nThe OrganiCity-specific blocks are basically generic example blocks that can be used for authorization, retrieving and creating assets. All these blocks are \nremixable\n so that  experimenters can view examples of how to communicate with the OC Platform and then, if necessary, modify these to fit their needs.\n\n\n\n\nCreating new apps using Tinkerspace\n\n\nThe main part of Tinkerspace that the user interacts with is the \neditor\n, which consists of three major parts:\n\n\n\n\nThe Block Library\n\n\nThe Canvas\n\n\nThe App Settings and Preview area\n\n\n\n\nThe \nBlock Library\n contains a set of building blocks such as \nButton\n, which is used to trigger events; \nMy Location\n, which reads the smartphone; \nMap\n, which displays information on a map, etc. The \nBlock Library\n and \nApp Settings and Preview area\n can be collapsed to allow more screen area for the canvas, which can be useful when arranging blocks into an app.\n\n\n\n\nFigure 1.\n Tinkerspace user interface\n\n\nThe figure shows a simple example where three blocks are combined into an app, allowing us to read a remote temperature sensor and to display the value on a gauge when pressing a trigger button. The \nSenzebox\n block reads the sensor value at an IP address, entered in the settings field. The \nGauge\n block displays the value coming from the Senzebox, and the \nButton\n block provides a trigger to read the temperature. Some settings are available, e.g. the background colour, the text for the button, the IP address for the sensor, etc. Not all settings are shown in the figure.\nAs it can be seen in the Figure 2, a Tinkerspace block may have input(s) and output(s) and will perform some functionality. The inputs and outputs are colour-coded in order to simplify selecting suitable blocks to connect with. Blocks are connected by \ndragging\n the coloured box of the output to the corresponding socket of the input in another block. While it may look so, it is not possible to \npuzzle\n together the blocks as in a jigsaw puzzle.\n\n\n\n\nFigure 2.\n Creating new apps using Tinkerspace\n\n\nWhen the blocks are connected using the colour-coded connectors, the result is shown in the \nApp preview\n part of the screen indicating the appearance of the final smartphone web app in real time. When the experimenter is satisfied with the result, the app is given a name and saved, and the URL of the web app is then e-mailed to the phone. The app may also be shared with others. On the mobile device, the link to the web app may be saved in the home screen, giving a similar appearance to a native mobile app.\n\n\nCreating Tinkerspace blocks\n\n\nTinkerspace also enables users to create their own blocks, for private use or for sharing with others. This requires experience with Javascript development. JavaScript (JS) has been chosen as the implementation language for TinkerSpace components. The reason is relatively good performance of JS engines in modern WebKit-based browsers in mobile devices, combined with platform independence offered by this solution (it should work on both iOS and Android).\n\n\nThe quickest way to get started would be to login to tinkerspace, enter the \nBlocks\n section, and start experimenting. Some blocks are marked \nremixable\n indicating that they can be copied and adapted by other developers.\n\n\n\n\nFigure 3.\n Tinkerspace menu\n\n\nThe workflow of creating a component is as follows: \n\n\n\n\nConfigure the component parameters\n\n\nWrite the JavaScript of the component\n\n\nSubmit the component into the Tinkerspace system\n\n\n\n\nTo write the javascript code of one component, a constructor function named \nmake_[componentname]\n must be defined. This function can be invoked multiple times to create separate instances of the component, each encapsulating its own state variables. The constructor function must return a struct with a number of functions provided by the component (this struct may be empty, which would be the case for certain GUI components that accept no input from other components) \n\n\nExample:\n\n\nfunction make_TriggerButton (label, id, env) {\n   var button = document.getElementById(id);\n   button.setAttribute(\"value\",label);\n   button.onclick = function () { env.trigger() };\n}\n\n\n\n\nThe graphical user interface in the TinkerSpace editor uses an abstraction where a component has inputs and outputs. To this end, the following mapping is used: \n\n\n\n\nInput = Provided Push \n\n\nInput = Required Pull \n\n\nOutput = Provided Pull \n\n\nOutput = Required Push\n\n\nProvided interface\n\n\n\n\nA provided interface has zero or more ports. In javascript, it is implemented as a struct whose selectors are functions in this component that can be invoked by other components. If the component provides any functions, the constructor function must return a struct with selectors whose order, names, kinds, and types correspond to the provided ports of the component . Example:\n\n\nfunction make_Counter (start_value, id, env) \n{    \n    var value = start_value;    \n    return { \n        inc : function (increment) { value = value + increment; },       \n        get : function () { return value ; }    \n    } \n}\n\n\n\n\nA required interface has zero or more ports. In javascript, it is implemented as a struct whose selectors are references to functions from other components that this component may invoke. The following example shows a constructor with these two parameters:\n\n\nfunction make_Sum(id , env) {    \n    return {        \n        sum: function () { \n            x = env.requiredMethodA();\n            y = env.requiredMethodB();            \n            return x+y;\n        }    \n    } \n}\n\n\n\n\nThe selectors in the env struct, \nrequiredMethodA\n and \nrequiredMethodB\n, have to be listed in the Configuration Gui  as required ports. These names are local to this component, i.e., the names of the required ports in this component need not coincide with the names of the provided ports in the components that they are connected to.\n\n\nThe provided and required interfaces contain zero or more ports. A port is either push or pull: \n\n\n\n\nPush: Functions that do not return a value. Can be executed either immediately when they are invoked, which is the default behavior, or at a later point in time, if they are wrapped in window:setTimeout() at the point of invocation; in this way a component may also schedule itself to execute after a certain period of time. \n\n\nPull: Functions that always return a value. Must be executed immediately upon invocation. In both cases, the functions provided and required by a component can take at most one argument (but this argument may be a struct).\n\n\n\n\nA problem of JavaScript that has to be overcome in the TinkerSpace architecture is the fact that a JS program is not normally allowed to communicate with a web site other than where it is deployed (Java Same Origin Policy). In order to solve this, Tinkerspace solution provides a proxy server. Use the special function \n_satinExternalCall()\n to set up an asynchronous POST or GET service call and pass the result to a callback function.\n\n\n_satinExternalCall(processResponse, curl, callT)\n// processResponse: Callback function\n// curl: Url for the call\n// callT: \"GET\" or \"POST\"\n\n\n\n\nExample of proxy call:\n\n\nfunction myFunction() {\n    lat = 65.583057;\n    lon = 22.146142;\n    var url = \"http://api.yr.no/weatherapi/locationforecast/1.8/\" + \"?lat=\" + lat + \"&lon=\" + lon;\n    _satinExternalCall(processResponse, url, \"GET\");\n }\n\n\n\n\nExample of callback function:\n\n\nfunction processResponse(response) {\n   satinlog.print(response.responseText); //debug\n\n   if (!response.error && response.status == \"200\" && response.responseText.length > 0) {\n       // Do something with the response \n   }\n}\n\n\n\n\nOrganicity specific Blocks in Tinkerspace\n\n\nThis section focus on how to use some of the OrganiCity-specific blocks.\n\n\nThere are currently 4 OrganiCity-specific blocks:\n\n\n\n\nOrganiCity Login\n\n\nOrganiCity Asset Discovery\n\n\nOrganiCity Assets Table Display\n\n\nOrganiCity Asset Creator\n\n\n\n\nThe functionality of each block is described briefly, followed by an end-to-end example of how to create an OrganiCity-related application using these blocks.\n\n\nOrganiCity Login\n\n\nThe OrganiCity Login block provides a starting point for creating OrganiCity-related applications. This block will log in users to their OrganiCity account using the OAuth 2.0 [Oauth2] authorization process. When a user has logged in successfully, the block will trigger the \nLogin Complete\n output that can be used to start other blocks.\n\n\nOrganiCity Asset Discovery\n\n\nThe OrganiCity Asset Discovery block is an example block that shows how to retrieve data from the Asset Discovery API. The block needs a \nLogin Complete\n input to ensure the users are  authorized (typically issued via the OrganiCity Login block). The block is then started by activating its \ntrigger\n input by for example the Button block. Once started, this block will make a call to the API querying for a list of Assets based on a sensor type that the user specifies in the block configuration. Once it has received this data (in JSON format) from the API, it will push this to its output for other blocks to use. This block has no graphical components.\n\n\nOrganiCity Assets Table Display\n\n\nThis block provides an easy-to-understand example of how API output from the OrganiCity Asset Discovery block can be parsed and displayed. The block will start parsing the JSON data as soon as it is provided to its input terminal. This block holds a simple graphical component, an HTML-table, that will be updated with sensor values from the API call in the OrganiCity Asset Discovery.\n\n\nOrganicity Example application\n\n\nUsing the above mentioned components we can build an OrganiCity example application that\n\n\n\n\nMakes sure the user is authorized\n\n\nRetrieves a list of Assets from the OC Asset Discovery API based on a sensor type\n\n\nDisplays the results in a table\n\n\n\n\nTo create this application, first login to Tinkerspace and choose \nCreate new app!\n. Then use the search field in the top left corner to look for the OrganiCity Login block (Figure 4).\n\n\n\n\nFigure 4.\n Search for the Organicity Login block and drag it onto the Canvas (black area)\n\n\nNow this block\u2019s output needs to be connected to some other block. To do this, click on the output terminal of this block in order to automatically search for blocks that fit with this one (Figure 5).\n\n\n\n\nFigure 5.\n By clicking ports on blocks the list of blocks on the left will automatically be updated with blocks that fit the selected input or output port\n\n\nIn our example we will choose to connect the OrganiCity Asset Discovery block that provides a way to search for Assets within the OC Platform. Drag and drop this onto the canvas, and then connect the OrganiCity Login block output to the corresponding input on the OrganiCity Asset Discovery block (Figure 6).\n\n\n\n\nFigure 6.\n Add blocks to your applciation by using drag and drop\n\n\nNow click the \nTrigger\n input of the OrganiCity Asset Discovery block in order to find triggers that can operate together with this block (in the same manner as in Figure 5). Find the \nButton\n block in the left menu and drag-and-drop this onto the canvas. Now connect the ports between these three blocks. When completed it should look like in Figure 7.\n\n\n\n\nFigure 7.\n The three blocks (Organicity Login, Button and Organicity Asset Discovery) connected\n\n\nFinally, connect the output port of the OC Asset Discovery in order to complete the example application. Click the output terminal to find and connect the OrganiCity Asset Table Display. Now the example application is complete and should look like Figure 8.\n\n\n\n\nFigure 8.\n The finished example application\n\n\nThe preview window on the right should show that all handles are connected. You should also see a preview of the application. The application is now finished and you can share it with users by sending the link (URL) for the application (Figure 9).\n\n\n\n\nFigure 9.\n Sahre your application by sending its URL\n\n\nWhen users open OrganiCity applications, they will be first asked to login to their OrganiCity Account. If they do not have one already, there is a link to create an account. When users have logged in successfully, the application will open automatically (Figure 10).\n\n\n\n\nFigure 10.\n Users first need to login in order to use Organicity applications\n\n\nIt is also possible for users to save applications to their home screen. This procedure is described for iPhone in Figures 10 and 11, but this works on Android phones as well in a similar manner. When users have chosen to save the application to their homescreen, it will appear as a \nnative\n application among their other installed apps (Figure 11).\n\n\n\n\nFigure 11.\n An OrganiCity application can be made to look as a \nnative application\n by saving it to the home screen\n\n\nCONCLUSION\n\n\nTinkerspace is a graphical programming environment that works by connecting blocks in a LEGO\u2122 fashion. The platform makes it possible for both non-programmers and programmers  to quickly build applications for working with OrganiCity projects. There are several example blocks available that help experimenters connect to the OrganiCity Platform. It is also possible for experimenters to create their own blocks using Javascript/HTML, or to \nremix\n existing blocks in order to see their source code and configurations. These things together makes Tinkerspace a powerful tool for OrganiCity experimenters.\n\n\nFor more detailed information about how to create blocks, please refer to: \nTinkerspace-LTU",
            "title": "Tinkerspace"
        },
        {
            "location": "/tools/tinkerspace/#tinkerspace",
            "text": "",
            "title": "Tinkerspace"
        },
        {
            "location": "/tools/tinkerspace/#introduction",
            "text": "An increasing amount of people are interested in creating a personalized digital experience, i.e. to be able to select and form the usage of electronic devices to suit their own personal preferences. This might include using unique mobile applications, but not everyone have the technical skills required to develop complex applications. The idea behind Tinkerspace is to provide both technical and non technical citizens with a powerful graphical editor tool that enables them to transform their ideas into mobile applications.   Within the OrganiCity facility, Tinkerspace offers the following functionality:    Enables end-users to quickly  build  a mobile web application based on a set of ready-made building blocks with smart city and the open data access  Enables experimenters to develop specific building blocks tailor-made for their experiment. These blocks can then be built into powerful mobile web applications to be used by end-users, or can \n    be made available for end-users co-creation   Tinkerspace is available at  Tinkerspace  .",
            "title": "Introduction"
        },
        {
            "location": "/tools/tinkerspace/#functionalities-and-features",
            "text": "Tinkerspace uses the notion of  blocks  much like in a LEGO\u2122 fashion. Users can connect existing blocks in the graphical editor in order to create applications without the need for programming. When a user makes connections between blocks, the result will show in a preview screen indicating the final smartphone appearance in real time. When the user is satisfied, the application can be shared by sending the URL of the web application to others. The link to the web application may be saved in the home screen of most mobile devices, giving a similar appearance as a downloaded app. The web applications are platform independent so they work on all modern smart phones.  For Tinkerspace users who know Javascript programming, it is possible to create their own blocks. This opens up the possibility for creating a vast amount of different applications using the platform. It is also possible for programmers to share their created blocks with other users, which makes the library of blocks being constantly extended. Moreover, it is also possible for the creator of a block to let other developers see the code and connections of a block and  remix  this to fit their own needs.",
            "title": "Functionalities and features"
        },
        {
            "location": "/tools/tinkerspace/#implementation",
            "text": "A few blocks in the Tinkerspace platform have been created for interacting with the OC Platform. These serve as a starting point for experimenters to get up and running with OC Experiments and data quickly. The Tinkerspace OrganiCity-specific blocks use the following OrganiCity Components:   The OC Accounts for performing authorization  The OC Experimenter Portal where the experimenter sets up their experiment and retrieves the experimenter ID and the experiment ID  The OC Asset Discovery Service for retrieving OC Assets  The OrganiCity-specific blocks are basically generic example blocks that can be used for authorization, retrieving and creating assets. All these blocks are  remixable  so that  experimenters can view examples of how to communicate with the OC Platform and then, if necessary, modify these to fit their needs.",
            "title": "Implementation"
        },
        {
            "location": "/tools/tinkerspace/#creating-new-apps-using-tinkerspace",
            "text": "The main part of Tinkerspace that the user interacts with is the  editor , which consists of three major parts:   The Block Library  The Canvas  The App Settings and Preview area   The  Block Library  contains a set of building blocks such as  Button , which is used to trigger events;  My Location , which reads the smartphone;  Map , which displays information on a map, etc. The  Block Library  and  App Settings and Preview area  can be collapsed to allow more screen area for the canvas, which can be useful when arranging blocks into an app.   Figure 1.  Tinkerspace user interface  The figure shows a simple example where three blocks are combined into an app, allowing us to read a remote temperature sensor and to display the value on a gauge when pressing a trigger button. The  Senzebox  block reads the sensor value at an IP address, entered in the settings field. The  Gauge  block displays the value coming from the Senzebox, and the  Button  block provides a trigger to read the temperature. Some settings are available, e.g. the background colour, the text for the button, the IP address for the sensor, etc. Not all settings are shown in the figure.\nAs it can be seen in the Figure 2, a Tinkerspace block may have input(s) and output(s) and will perform some functionality. The inputs and outputs are colour-coded in order to simplify selecting suitable blocks to connect with. Blocks are connected by  dragging  the coloured box of the output to the corresponding socket of the input in another block. While it may look so, it is not possible to  puzzle  together the blocks as in a jigsaw puzzle.   Figure 2.  Creating new apps using Tinkerspace  When the blocks are connected using the colour-coded connectors, the result is shown in the  App preview  part of the screen indicating the appearance of the final smartphone web app in real time. When the experimenter is satisfied with the result, the app is given a name and saved, and the URL of the web app is then e-mailed to the phone. The app may also be shared with others. On the mobile device, the link to the web app may be saved in the home screen, giving a similar appearance to a native mobile app.",
            "title": "Creating new apps using Tinkerspace"
        },
        {
            "location": "/tools/tinkerspace/#creating-tinkerspace-blocks",
            "text": "Tinkerspace also enables users to create their own blocks, for private use or for sharing with others. This requires experience with Javascript development. JavaScript (JS) has been chosen as the implementation language for TinkerSpace components. The reason is relatively good performance of JS engines in modern WebKit-based browsers in mobile devices, combined with platform independence offered by this solution (it should work on both iOS and Android).  The quickest way to get started would be to login to tinkerspace, enter the  Blocks  section, and start experimenting. Some blocks are marked  remixable  indicating that they can be copied and adapted by other developers.   Figure 3.  Tinkerspace menu  The workflow of creating a component is as follows:    Configure the component parameters  Write the JavaScript of the component  Submit the component into the Tinkerspace system   To write the javascript code of one component, a constructor function named  make_[componentname]  must be defined. This function can be invoked multiple times to create separate instances of the component, each encapsulating its own state variables. The constructor function must return a struct with a number of functions provided by the component (this struct may be empty, which would be the case for certain GUI components that accept no input from other components)   Example:  function make_TriggerButton (label, id, env) {\n   var button = document.getElementById(id);\n   button.setAttribute(\"value\",label);\n   button.onclick = function () { env.trigger() };\n}  The graphical user interface in the TinkerSpace editor uses an abstraction where a component has inputs and outputs. To this end, the following mapping is used:    Input = Provided Push   Input = Required Pull   Output = Provided Pull   Output = Required Push  Provided interface   A provided interface has zero or more ports. In javascript, it is implemented as a struct whose selectors are functions in this component that can be invoked by other components. If the component provides any functions, the constructor function must return a struct with selectors whose order, names, kinds, and types correspond to the provided ports of the component . Example:  function make_Counter (start_value, id, env) \n{    \n    var value = start_value;    \n    return { \n        inc : function (increment) { value = value + increment; },       \n        get : function () { return value ; }    \n    } \n}  A required interface has zero or more ports. In javascript, it is implemented as a struct whose selectors are references to functions from other components that this component may invoke. The following example shows a constructor with these two parameters:  function make_Sum(id , env) {    \n    return {        \n        sum: function () { \n            x = env.requiredMethodA();\n            y = env.requiredMethodB();            \n            return x+y;\n        }    \n    } \n}  The selectors in the env struct,  requiredMethodA  and  requiredMethodB , have to be listed in the Configuration Gui  as required ports. These names are local to this component, i.e., the names of the required ports in this component need not coincide with the names of the provided ports in the components that they are connected to.  The provided and required interfaces contain zero or more ports. A port is either push or pull:    Push: Functions that do not return a value. Can be executed either immediately when they are invoked, which is the default behavior, or at a later point in time, if they are wrapped in window:setTimeout() at the point of invocation; in this way a component may also schedule itself to execute after a certain period of time.   Pull: Functions that always return a value. Must be executed immediately upon invocation. In both cases, the functions provided and required by a component can take at most one argument (but this argument may be a struct).   A problem of JavaScript that has to be overcome in the TinkerSpace architecture is the fact that a JS program is not normally allowed to communicate with a web site other than where it is deployed (Java Same Origin Policy). In order to solve this, Tinkerspace solution provides a proxy server. Use the special function  _satinExternalCall()  to set up an asynchronous POST or GET service call and pass the result to a callback function.  _satinExternalCall(processResponse, curl, callT)\n// processResponse: Callback function\n// curl: Url for the call\n// callT: \"GET\" or \"POST\"  Example of proxy call:  function myFunction() {\n    lat = 65.583057;\n    lon = 22.146142;\n    var url = \"http://api.yr.no/weatherapi/locationforecast/1.8/\" + \"?lat=\" + lat + \"&lon=\" + lon;\n    _satinExternalCall(processResponse, url, \"GET\");\n }  Example of callback function:  function processResponse(response) {\n   satinlog.print(response.responseText); //debug\n\n   if (!response.error && response.status == \"200\" && response.responseText.length > 0) {\n       // Do something with the response \n   }\n}",
            "title": "Creating Tinkerspace blocks"
        },
        {
            "location": "/tools/tinkerspace/#organicity-specific-blocks-in-tinkerspace",
            "text": "This section focus on how to use some of the OrganiCity-specific blocks.  There are currently 4 OrganiCity-specific blocks:   OrganiCity Login  OrganiCity Asset Discovery  OrganiCity Assets Table Display  OrganiCity Asset Creator   The functionality of each block is described briefly, followed by an end-to-end example of how to create an OrganiCity-related application using these blocks.",
            "title": "Organicity specific Blocks in Tinkerspace"
        },
        {
            "location": "/tools/tinkerspace/#organicity-login",
            "text": "The OrganiCity Login block provides a starting point for creating OrganiCity-related applications. This block will log in users to their OrganiCity account using the OAuth 2.0 [Oauth2] authorization process. When a user has logged in successfully, the block will trigger the  Login Complete  output that can be used to start other blocks.",
            "title": "OrganiCity Login"
        },
        {
            "location": "/tools/tinkerspace/#organicity-asset-discovery",
            "text": "The OrganiCity Asset Discovery block is an example block that shows how to retrieve data from the Asset Discovery API. The block needs a  Login Complete  input to ensure the users are  authorized (typically issued via the OrganiCity Login block). The block is then started by activating its  trigger  input by for example the Button block. Once started, this block will make a call to the API querying for a list of Assets based on a sensor type that the user specifies in the block configuration. Once it has received this data (in JSON format) from the API, it will push this to its output for other blocks to use. This block has no graphical components.",
            "title": "OrganiCity Asset Discovery"
        },
        {
            "location": "/tools/tinkerspace/#organicity-assets-table-display",
            "text": "This block provides an easy-to-understand example of how API output from the OrganiCity Asset Discovery block can be parsed and displayed. The block will start parsing the JSON data as soon as it is provided to its input terminal. This block holds a simple graphical component, an HTML-table, that will be updated with sensor values from the API call in the OrganiCity Asset Discovery.",
            "title": "OrganiCity Assets Table Display"
        },
        {
            "location": "/tools/tinkerspace/#organicity-example-application",
            "text": "Using the above mentioned components we can build an OrganiCity example application that   Makes sure the user is authorized  Retrieves a list of Assets from the OC Asset Discovery API based on a sensor type  Displays the results in a table   To create this application, first login to Tinkerspace and choose  Create new app! . Then use the search field in the top left corner to look for the OrganiCity Login block (Figure 4).   Figure 4.  Search for the Organicity Login block and drag it onto the Canvas (black area)  Now this block\u2019s output needs to be connected to some other block. To do this, click on the output terminal of this block in order to automatically search for blocks that fit with this one (Figure 5).   Figure 5.  By clicking ports on blocks the list of blocks on the left will automatically be updated with blocks that fit the selected input or output port  In our example we will choose to connect the OrganiCity Asset Discovery block that provides a way to search for Assets within the OC Platform. Drag and drop this onto the canvas, and then connect the OrganiCity Login block output to the corresponding input on the OrganiCity Asset Discovery block (Figure 6).   Figure 6.  Add blocks to your applciation by using drag and drop  Now click the  Trigger  input of the OrganiCity Asset Discovery block in order to find triggers that can operate together with this block (in the same manner as in Figure 5). Find the  Button  block in the left menu and drag-and-drop this onto the canvas. Now connect the ports between these three blocks. When completed it should look like in Figure 7.   Figure 7.  The three blocks (Organicity Login, Button and Organicity Asset Discovery) connected  Finally, connect the output port of the OC Asset Discovery in order to complete the example application. Click the output terminal to find and connect the OrganiCity Asset Table Display. Now the example application is complete and should look like Figure 8.   Figure 8.  The finished example application  The preview window on the right should show that all handles are connected. You should also see a preview of the application. The application is now finished and you can share it with users by sending the link (URL) for the application (Figure 9).   Figure 9.  Sahre your application by sending its URL  When users open OrganiCity applications, they will be first asked to login to their OrganiCity Account. If they do not have one already, there is a link to create an account. When users have logged in successfully, the application will open automatically (Figure 10).   Figure 10.  Users first need to login in order to use Organicity applications  It is also possible for users to save applications to their home screen. This procedure is described for iPhone in Figures 10 and 11, but this works on Android phones as well in a similar manner. When users have chosen to save the application to their homescreen, it will appear as a  native  application among their other installed apps (Figure 11).   Figure 11.  An OrganiCity application can be made to look as a  native application  by saving it to the home screen",
            "title": "Organicity Example application"
        },
        {
            "location": "/tools/tinkerspace/#conclusion",
            "text": "Tinkerspace is a graphical programming environment that works by connecting blocks in a LEGO\u2122 fashion. The platform makes it possible for both non-programmers and programmers  to quickly build applications for working with OrganiCity projects. There are several example blocks available that help experimenters connect to the OrganiCity Platform. It is also possible for experimenters to create their own blocks using Javascript/HTML, or to  remix  existing blocks in order to see their source code and configurations. These things together makes Tinkerspace a powerful tool for OrganiCity experimenters.  For more detailed information about how to create blocks, please refer to:  Tinkerspace-LTU",
            "title": "CONCLUSION"
        }
    ]
}